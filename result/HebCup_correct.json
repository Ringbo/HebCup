{
    "Origin": "Configure a sslConfig for the server using the legacy configuration",
    "Reference": "Configure a SSLConfig.Builder for the server using the legacy configuration",
    "HebCup": "Configure a SSLConfig.Builder for the server using the legacy configuration"
}
{
    "Origin": "Test of npara method, of class GeometricDistribution.",
    "Reference": "Test of length method, of class GeometricDistribution.",
    "HebCup": "Test of Length method, of class GeometricDistribution."
}
{
    "Origin": "If it's successfully completed, {@link BrowserResult#getMediaItems()} will return the search\nresult.",
    "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the search\nresult.",
    "HebCup": "If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the search result."
}
{
    "Origin": "Request an update of the current cluster metadata info, return the current version before the update",
    "Reference": "Request an update of the current cluster metadata info, return the current updateVersion before the update",
    "HebCup": "Request an update of the current cluster metadata info, return the current updateVersion before the update"
}
{
    "Origin": "Gets the full path from a full filename, which is the prefix + path.",
    "Reference": "Gets the full path from a full fileName, which is the prefix + path.",
    "HebCup": "Gets the full path from a full fileName, which is the prefix + path."
}
{
    "Origin": "Unlinks interior Node p with predecessor trail.",
    "Reference": "Unlinks interior Node p with predecessor pred.",
    "HebCup": "Unlinks interior Node p with predecessor pred."
}
{
    "Origin": "Sets the host's {@link OnBackPressedDispatcherOwner}.",
    "Reference": "Sets the host's {@link OnBackPressedDispatcher}.",
    "HebCup": "Sets the host's {@link OnBackPressedDispatcher}."
}
{
    "Origin": "Creates a {@link NativeLinkable} using sources compiled by the D compiler.",
    "Reference": "Creates a {@link NativeLinkableGroup} using sources compiled by the D compiler.",
    "HebCup": "Creates a {@link NativeLinkableGroup} using sources compiled by the D compiler."
}
{
    "Origin": "For example, the period in hours between two times can be calculated\nusing {@code startTime.periodUntil(endTime, HOURS)}.",
    "Reference": "For example, the period in hours between two times can be calculated\nusing {@code startTime.until(endTime, HOURS)}.",
    "HebCup": "For example, the period in hours between two times can be calculated using {@code startTime.until(endTime, HOURS)}."
}
{
    "Origin": "Scenario:\n  - no CA inherited trust\n  - gateway does not explicitly trust the service, but automatically validates against self-signed\n  - service trusts gateway certificate",
    "Reference": "Scenario:\n  - no CA inherited trust\n  - gateway does not explicitly trust the API, but automatically validates against self-signed\n  - API trusts gateway certificate",
    "HebCup": "Scenario: - no CA inherited trust - gateway does not explicitly trust the Api, but automatically validates against self-signed - Api trusts gateway certificate"
}
{
    "Origin": "Create new {@link Builder} based on an existing {@link BaseEvent} instance.",
    "Reference": "Create new {@link Builder} based on an existing {@link CoreEvent} instance.",
    "HebCup": "Create new {@link Builder} based on an existing {@link CoreEvent} instance."
}
{
    "Origin": "If {@code labels = \"*abc*\"}, settings with a label containing \"abc\" are returned.",
    "Reference": "If {@code labelFilter = \"*abc*\"}, settings with a label containing \"abc\" are returned.",
    "HebCup": "If {@code LabelFilter = ``*abc*``}, settings with a label containing ``abc`` are returned."
}
{
    "Origin": "The {@link EventContextKeys#MESSAGE_TARGET}, if any",
    "Reference": "The {@link EventContextKeys#MESSAGE_CHANNEL}, if any",
    "HebCup": "The {@link EventContextKeys#MESSAGE_CHANNEL}, if any"
}
{
    "Origin": "Create a new empty {@link Sequential} with atomic guarantees on all mutative\noperations.",
    "Reference": "Create a new empty {@link Swap} with atomic guarantees on all mutative\noperations.",
    "HebCup": "Create a new empty {@link Swap} with atomic guarantees on all mutative operations."
}
{
    "Origin": "Sets the {@code Cipher} to use for encrypting and decrypting serialized identity data to prevent easy\ninspection of Subject identity data.",
    "Reference": "Sets the {@code CipherService} to use for encrypting and decrypting serialized identity data to prevent easy\ninspection of Subject identity data.",
    "HebCup": "Sets the {@code CipherService} to use for encrypting and decrypting serialized identity data to prevent easy inspection of Subject identity data."
}
{
    "Origin": "This method allows you to specify IterationListeners for this model.",
    "Reference": "This method allows you to specify trainingListeners for this model.",
    "HebCup": "This method allows you to specify TrainingListeners for this model."
}
{
    "Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSettingWithResponse#ConfigurationSetting}",
    "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSettingWithResponse#ConfigurationSetting}",
    "HebCup": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSettingWithResponse#ConfigurationSetting}"
}
{
    "Origin": "The\n{@code orderType} is an enum value located under the {@link #ORDER_TYPE}\nkey.",
    "Reference": "The\n{@code orderType} is an enum value located under the {@link HasOrderTypeUtil#ORDER_TYPE}\nkey.",
    "HebCup": "The {@code orderType} is an enum value located under the {@link HasOrderTypeUtil.ORDER_TYPE} key."
}
{
    "Origin": "Read an optional Long value (stored as string) form a JSON Object.",
    "Reference": "Read an optional Date value (stored as string) form a JSON Object.",
    "HebCup": "Read an Optional Date value (stored as string) form a JSON Object."
}
{
    "Origin": "Returns bounds of the split button part.",
    "Reference": "Returns bounds of the menu button part.",
    "HebCup": "Returns bounds of the Menu Button part."
}
{
    "Origin": "Asynchronously gets a service.",
    "Reference": "Asynchronously gets a api.",
    "HebCup": "Asynchronously gets a Api."
}
{
    "Origin": "Returns true if the constructor method is locally empty (allows calls to empty init and super\nconstructor).",
    "Reference": "Returns true if the constructor method is locally empty (allows calls to init and super\nconstructor).",
    "HebCup": "Returns true if the constructor method is locally empty (allows calls to Init and super constructor)."
}
{
    "Origin": "In alarm, only minute dimensionality\nindicators are expected to process.",
    "Reference": "In alarm, only minute dimensionality\nmetrics are expected to process.",
    "HebCup": "In alarm, only minute dimensionality Metrics are expected to process."
}
{
    "Origin": "Persists running state to the {@link RemoteRuntimeDataset}.",
    "Reference": "Persists running state to the {@link RemoteRuntimeTable}.",
    "HebCup": "Persists running state to the {@link RemoteRuntimeTable}."
}
{
    "Origin": "Moves on to next top level domain in {@code topLevelDomainsList}.",
    "Reference": "Moves on to next top level domain in {@code tldCycleIterator}.",
    "HebCup": "Moves on to next top level domain in {@code tldCycleIterator}."
}
{
    "Origin": "Gets the Chemical Dissolution Chamber of the ItemStackInput in the parameters",
    "Reference": "Gets the Chemical Dissolution Chamber of the ItemStack in the parameters",
    "HebCup": "Gets the Chemical Dissolution Chamber of the ItemStack in the parameters"
}
{
    "Origin": "Runs operations for a single client.",
    "Reference": "Runs operations for a single session.",
    "HebCup": "Runs operations for a single Session."
}
{
    "Origin": "Creates an exception from an service name.",
    "Reference": "Creates an exception from an API name.",
    "HebCup": "Creates an exception from an api Name."
}
{
    "Origin": "Gets the value of the 'ValueType' field.",
    "Reference": "Gets the value of the 'valueType' field.",
    "HebCup": "Gets the value of the 'valueType' field."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Checks if the given name is a legal binary name.",
    "Reference": "Checks if the given name is a legal type name.",
    "HebCup": "Checks if the given name is a legal Type Name."
}
{
    "Origin": "Returns an instance of a GLSL data type for the given {@link DataType}.",
    "Reference": "Returns an instance of a GLSL data type for the given {@link ShaderVariable}.",
    "HebCup": "Returns an instance of a GLSL data type for the given {@link ShaderVariable}."
}
{
    "Origin": "Tests if this string starts with any specified prefixes.",
    "Reference": "Tests if this CharSequence starts with any specified prefixes.",
    "HebCup": "Tests if this CharSequence starts with any specified prefixes."
}
{
    "Origin": "Stub of {@link Plugin#willDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses\nto override",
    "Reference": "Stub of {@link Plugin#beforeDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses\nto override",
    "HebCup": "Stub of {@link Plugin#beforeDeclareSetter (TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses to override"
}
{
    "Origin": "Standard setter for the leftwardLabel String for this RelationshipType",
    "Reference": "Standard setter for the leftwardType String for this RelationshipType",
    "HebCup": "Standard setter for the leftwardType String for this RelationshipType"
}
{
    "Origin": "Create a {@link ServiceLocator}.",
    "Reference": "Create a {@link InstanceManager}.",
    "HebCup": "Create a {@link InstanceManager}."
}
{
    "Origin": "If the name is a single identifier, then this can be\n      reclassified as an {@link ASTVariableReference}",
    "Reference": "If the name is a single identifier, then this can be\n      reclassified as an {@link ASTVariableAccess}",
    "HebCup": "If the name is a single identifier, then this can be reclassified as an {@link ASTVariableAccess}"
}
{
    "Origin": "Returns the object with the settings used for calls to labelAudio.",
    "Reference": "Returns the object with the settings used for calls to getEvaluation.",
    "HebCup": "Returns the object with the settings used for calls to GetEvaluation."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement }{@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Is the value with this qualifier less than the length of any of the arrays?",
    "Reference": "Is the value with this qualifier less than the length of any of the sequences?",
    "HebCup": "Is the value with this qualifier less than the length of any of the sequences?"
}
{
    "Origin": "Clears the given persisted files stored in {@link #mPersistedFiles}.",
    "Reference": "Clears the given persisted files stored in {@link #mPersistedFilesInfo}.",
    "HebCup": "Clears the given persisted files stored in {@link #mPersistedFilesInfo}."
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Scheduler, with this\ntask's result as the argument to the supplied function.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Executor, with this\ntask's result as the argument to the supplied function.",
    "HebCup": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied function."
}
{
    "Origin": "The {@link KeyCreateOptions#isEnabled()} enabled} field\nis set to true by Azure Key Vault, if not specified.",
    "Reference": "The {@link CreateKeyOptions#isEnabled()} enabled} field\nis set to true by Azure Key Vault, if not specified.",
    "HebCup": "The {@link CreateKeyOptions#isEnabled ()} enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Helper to parse the imported file into an {@link ImportedGradeWrapper} depending on its type",
    "Reference": "Helper to parse the imported file into an {@link ImportedSpreadsheetWrapper} depending on its type",
    "HebCup": "Helper to parse the imported file into an {@link ImportedSpreadsheetWrapper} depending on its type"
}
{
    "Origin": "Create new instance of {@link InstanceManagerStore}.",
    "Reference": "Create new instance of {@link InjectionManagerStore}.",
    "HebCup": "Create new instance of {@link InjectionManagerStore}."
}
{
    "Origin": "Setter for comment format.",
    "Reference": "Setter for comment pattern.",
    "HebCup": "Setter for comment Pattern."
}
{
    "Origin": "More specifically, the root modules are resolved as if by calling\n{@code resolveRequires}.",
    "Reference": "More specifically, the root modules are resolved as if by calling\n{@code resolve}.",
    "HebCup": "More specifically, the root modules are resolved as if by calling {@code resolve}."
}
{
    "Origin": "Get the set of all custom providers registered for the given service provider contract\nin the underlying {@link InstanceManager instance manager} container.",
    "Reference": "Get the set of all custom providers registered for the given service provider contract\nin the underlying {@link InjectionManager injection manager} container.",
    "HebCup": "Get the set of all custom providers registered for the given service provider contract in the underlying {@link InjectionManager Injection Manager} container."
}
{
    "Origin": "Gets the full path from a full filename, which is the prefix + path,\nand also excluding the final directory separator.",
    "Reference": "Gets the full path from a full fileName, which is the prefix + path,\nand also excluding the final directory separator.",
    "HebCup": "Gets the full path from a full fileName, which is the prefix + path, and also excluding the final directory separator."
}
{
    "Origin": "Returns {@code true} if there is a value in the current thread's copy of\nthis thread-local variable, even if that values is {@code null}.",
    "Reference": "Returns {@code true} if there is a value in the current strand's copy of\nthis thread-local variable, even if that values is {@code null}.",
    "HebCup": "Returns {@code true} if there is a value in the current Strand's copy of this thread-local variable, even if that values is {@code null}."
}
{
    "Origin": "See {@link ClientsClassDefinition#getWhitelistedProperties()}",
    "Reference": "See {@link ClientsClassDefinition#getIncludedProperties()}",
    "HebCup": "See {@link ClientsClassDefinition#getincludedProperties()}"
}
{
    "Origin": "Sets the {@link RetryPolicy} that is used when each request is sent.",
    "Reference": "Sets the {@link HttpPipelinePolicy} that is used when each request is sent.",
    "HebCup": "Sets the {@link HttpPipelinePolicy} that is used when each request is sent."
}
{
    "Origin": "Gets all of the {@link AlertDefinition}s that exist on the path for\n{@link Components#AMBARI_SERVER}.",
    "Reference": "Gets all of the {@link AlertDefinition}s that exist on the path for\n{@link RootComponent#AMBARI_SERVER}.",
    "HebCup": "Gets all of the {@link AlertDefinition}s that exist on the path for {@link RootComponent#AMBARI_SERVER}."
}
{
    "Origin": "Set the nodeType.",
    "Reference": "Set the newType.",
    "HebCup": "Set the newType."
}
{
    "Origin": "Creates a list of default files to check for credentials.",
    "Reference": "Creates a list of files to check for credentials.",
    "HebCup": "Creates a list of files to check for credentials."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Deletes the specified variable from the configuration.",
    "Reference": "Deletes the specified variable from the CONFIGURATION.",
    "HebCup": "Deletes the specified variable from the CONFIGURATION."
}
{
    "Origin": "Set a new {@link JacksonResourceProvider} to this builder, dedicated to provide an {@link ObjectMapper} for\nserialization and deserialization of data.",
    "Reference": "Set a new {@link JacksonResources} to this builder, dedicated to provide an {@link ObjectMapper} for\nserialization and deserialization of data.",
    "HebCup": "Set a new {@link JacksonResources} to this builder, dedicated to provide an {@link ObjectMapper} for serialization and deserialization of data."
}
{
    "Origin": "Binds the specified {@link Service} at the specified path pattern.",
    "Reference": "Binds the specified {@link HttpService} at the specified path pattern.",
    "HebCup": "Binds the specified {@link HttpService} at the specified path pattern."
}
{
    "Origin": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor2)}.",
    "Reference": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor)}.",
    "HebCup": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor)}."
}
{
    "Origin": "Normalizes the specified URL and creates a new instance of this class.",
    "Reference": "Normalizes the specified URI and creates a new instance of this class.",
    "HebCup": "Normalizes the specified uri and creates a new instance of this class."
}
{
    "Origin": "If you actual latency will be lower than \"desirableOperationLatency\",\nwill calculate the difference and use it as {@link BulkheadConfig}.maxWaitTime",
    "Reference": "If you actual latency will be lower than \"slowCallDurationThreshold\",\nwill calculate the difference and use it as {@link BulkheadConfig}.maxWaitTime",
    "HebCup": "If you actual latency will be lower than ``slowCallDurationThreshold``, will calculate the difference and use it as {@link BulkheadConfig}.maxWaitTime"
}
{
    "Origin": "The {@link MessagingExceptionHandler} configured on {@link MessageProcessorChain} or {@link FlowConstruct} will be used to\nhandle any errors that occur.",
    "Reference": "The {@link FlowExceptionHandler} configured on {@link MessageProcessorChain} or {@link FlowConstruct} will be used to handle\nany errors that occur.",
    "HebCup": "The {@link FlowExceptionHandler} configured on {@link MessageProcessorChain} or {@link FlowConstruct} will be used to handle any errors that occur."
}
{
    "Origin": "Report the ending barline.",
    "Reference": "Report the ending PartBarline.",
    "HebCup": "Report the ending barline."
}
{
    "Origin": "Adds a 'followingUser' type notification with the specified request json object.",
    "Reference": "Adds a 'following - user' type notification with the specified request json object.",
    "HebCup": "Adds a 'following_user' type notification with the specified request json object."
}
{
    "Origin": "Tests {@link Array#from(Value...)}.",
    "Reference": "Tests {@link XQArray#from(Value...)}.",
    "HebCup": "Tests {@link XQArray#from (Value...)}."
}
{
    "Origin": "Handles a netty RPC callable with logging.",
    "Reference": "Handles a streaming RPC callable with logging.",
    "HebCup": "Handles a Streaming Rpc Callable with logging."
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and type = ?.",
    "HebCup": "and type = ?."
}
{
    "Origin": "Show {@link Toast} for exception",
    "Reference": "Show {@link Toast} for throwable",
    "HebCup": "Show {@link Toast} for Throwable"
}
{
    "Origin": "Reset the leader election throttle.",
    "Reference": "Reset the leader election throttles.",
    "HebCup": "Reset the leader election Throttles."
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix.",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix.",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix."
}
{
    "Origin": "Generates a valid document ID for a service, used to index the service in ES.",
    "Reference": "Generates a valid document ID for a API, used to index the API in ES.",
    "HebCup": "Generates a valid document ID for a Api, used to index the Api in ES."
}
{
    "Origin": "Returns the JDBC connection {@link #username} property.",
    "Reference": "Returns the JDBC connection {@link #userName} property.",
    "HebCup": "Returns the JDBC connection {@link#userName} property."
}
{
    "Origin": "When the insertion is complete, the\n{@code ticker} will be {@link CountUpLatch#countUp() incremented} by 1.",
    "Reference": "When the insertion is complete, the\n{@code tracker} will be {@link CountUpLatch#countUp() incremented} by 1.",
    "HebCup": "When the insertion is complete, the {@code tracker} will be {@link CountUpLatch#countUp () incremented} by 1."
}
{
    "Origin": "Return  if {@link ITokenTypeAttribute#TF_COMMON_WORD} is set.",
    "Reference": "Return  if {@link ITokenizer#TF_COMMON_WORD} is set.",
    "HebCup": "Return if {@link ITokenizer#TF_COMMON_WORD} is set."
}
{
    "Origin": "Removes given PacketExtension from the list of child packet\nextensions.",
    "Reference": "Removes given ExtensionElement from the list of child packet\nextensions.",
    "HebCup": "Removes given ExtensionElement from the list of child packet extensions."
}
{
    "Origin": "Reads the inbound request headers from the request and sets them on\nthe {@link ServiceRequest}.",
    "Reference": "Reads the inbound request headers from the request and sets them on\nthe {@link ApiRequest}.",
    "HebCup": "Reads the inbound request headers from the request and sets them on the {@link ApiRequest}."
}
{
    "Origin": "Returns the input stream of this message content.",
    "Reference": "Returns the CachedOutputStream of this message content.",
    "HebCup": "Returns the Cached Output Stream of this message content."
}
{
    "Origin": "The value is {@link ArtifactFileMetadata#PLACEHOLDER} if the artifact's metadata is not\nfully captured in {@link #additionalOutputData}.",
    "Reference": "The value is {@link FileArtifactValue#PLACEHOLDER} if the artifact's metadata is not fully\ncaptured in {@link #additionalOutputData}.",
    "HebCup": "The value is {@link FileArtifactValue#PLACEHOLDER} if the artifact's metadata is not fully captured in {@link#additionalOutputData}."
}
{
    "Origin": "Removes the specified properties of the {@link NamespacedEntityId}.",
    "Reference": "Removes the specified properties of the {@link MetadataEntity}.",
    "HebCup": "Removes the specified properties of the {@link MetadataEntity}."
}
{
    "Origin": "Called in response to the {@link RContext#destroy} method.",
    "Reference": "Called in response to the {@link RContext#dispose} method.",
    "HebCup": "Called in response to the {@link RContext#Dispose} method."
}
{
    "Origin": "Add the specified {@link Graph} to the cache.",
    "Reference": "Add the specified {@link Store} to the cache.",
    "HebCup": "Add the specified {@link Store} to the cache."
}
{
    "Origin": "An example of a valid direction is\n{@code new Vector(1, 0, 1)}.",
    "Reference": "An example of a valid direction is\n{@code new BlockVector3(1, 0, 1)}.",
    "HebCup": "An example of a valid direction is {@code new BlockVector3 (1, 0, 1)}."
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildClient ()}."
}
{
    "Origin": "Handles: POST /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}",
    "Reference": "Handles: POST /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}",
    "HebCup": "Handles: POST /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}"
}
{
    "Origin": "This call returns true in the interpreter or a low tier compilation that does profiling.",
    "Reference": "This call returns true in the interpreter or a low grade compilation that does profiling.",
    "HebCup": "This call returns true in the interpreter or a Low Grade compilation that does profiling."
}
{
    "Origin": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions)}",
    "Reference": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHttpHeaders, Map, BlobAccessConditions)}",
    "HebCup": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHttpHeaders, Map, BlobAccessConditions)}"
}
{
    "Origin": "The returned context supplier is intended to be cached in the currently adopted\nAST.",
    "Reference": "The returned context reference is intended to be cached in the currently adopted\nAST.",
    "HebCup": "The returned Context Reference is intended to be cached in the currently adopted AST."
}
{
    "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Appends BCC address.",
    "Reference": "Appends CC address.",
    "HebCup": "Appends Cc address."
}
{
    "Origin": "Gets the description.",
    "Reference": "Gets the code.",
    "HebCup": "Gets the Code."
}
{
    "Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHTTPHeaders)}",
    "Reference": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHttpHeaders)}",
    "HebCup": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHttpHeaders)}"
}
{
    "Origin": "Getter for {@link #exposeHeaders}",
    "Reference": "Getter for {@link #allowHeaders}",
    "HebCup": "Getter for {@link#allowHeaders}"
}
{
    "Origin": "Accumulate secondarys into a LinkedListX (extended Persistent List) and Right with the supplied combiner function",
    "Reference": "Accumulate secondarys into a LazySeq (extended Persistent List) and Right with the supplied combiner function",
    "HebCup": "Accumulate secondarys into a LazySeq (extended Persistent List) and Right with the supplied combiner function"
}
{
    "Origin": "Phone Number",
    "Reference": "Phone number",
    "HebCup": "Phone number"
}
{
    "Origin": "Requests that the player prefetch a media item with the media id for playback.",
    "Reference": "Requests that the player prepare a media item with the media id for playback.",
    "HebCup": "Requests that the player prepare a media item with the media id for playback."
}
{
    "Origin": "Gets the current {@link Art} value represented by this {@link Painting}.",
    "Reference": "Gets the current {@link ArtType} value represented by this {@link Painting}.",
    "HebCup": "Gets the current {@link ArtType} value represented by this {@link Painting}."
}
{
    "Origin": "WARNING: Read the javadoc of {@link Component#canCallListenerInterface()} for important\nsecurity-related information.",
    "Reference": "WARNING: Read the javadoc of {@link Component#canCallListener()} for important\nsecurity-related information.",
    "HebCup": "WARNING: Read the javadoc of {@link Component#canCallListener ()} for important security-related information."
}
{
    "Origin": "They must not be of type {@link KnownAmountPaymentPeriod}.",
    "Reference": "They must not be of type {@link KnownAmountSwapPaymentPeriod}.",
    "HebCup": "They must not be of type {@link KnownAmountSwapPaymentPeriod}."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.createSubDirectory#string}",
    "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory#string}",
    "HebCup": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory#string}"
}
{
    "Origin": "Retrieves the metadata for the specified {@link NamespacedEntityId}.",
    "Reference": "Retrieves the metadata for the specified {@link MetadataEntity}.",
    "HebCup": "Retrieves the metadata for the specified {@link MetadataEntity}."
}
{
    "Origin": "BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobRequestConditions, boolean)}",
    "Reference": "BlobRange, ParallelTransferOptions, DownloadRetryOptions, BlobRequestConditions, boolean)}",
    "HebCup": "BlobRange, ParallelTransferOptions, DownloadRetryOptions, BlobRequestConditions, boolean)}"
}
{
    "Origin": "Called when the user reorders the policies in a service.",
    "Reference": "Called when the user reorders the policies in a API.",
    "HebCup": "Called when the user reorders the policies in a Api."
}
{
    "Origin": "Tests {@code globalRecommend(Set, int, Set, Set)}.",
    "Reference": "Tests {@code recommendRelatedItems()(Set, int, Set, Set)}.",
    "HebCup": "Tests {@code recommendRelatedItems(Set, int, Set, Set)}."
}
{
    "Origin": "Setter for the output directory where the data files are stored.",
    "Reference": "Setter for the directory where the data files are stored.",
    "HebCup": "Setter for the directory where the data files are stored."
}
{
    "Origin": "Adds a qualified \"exports dynamic\" directive to the declaration.",
    "Reference": "Adds a qualified \"opens\" directive to the declaration.",
    "HebCup": "Adds a qualified ``opens`` directive to the declaration."
}
{
    "Origin": "Gets the list of {@link CertificateProperties CertificateProperties} on this page.",
    "Reference": "Gets the iterable stream of {@link CertificateProperties CertificateProperties} on this page.",
    "HebCup": "Gets the IterableStream of {@link CertificateProperties CertificateProperties} on this page."
}
{
    "Origin": "Receive indicator result from persistence, after it is saved into storage.",
    "Reference": "Receive metrics result from persistence, after it is saved into storage.",
    "HebCup": "Receive Metrics result from persistence, after it is saved into storage."
}
{
    "Origin": "Sets the journal serializer, returning the builder for method chaining.",
    "Reference": "Sets the journal namespace, returning the builder for method chaining.",
    "HebCup": "Sets the journal Namespace, returning the builder for method chaining."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubDirectory#String}",
    "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory#String}",
    "HebCup": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory#String}"
}
{
    "Origin": "If {@code labels = \"\\0\"}, settings without any label are returned.",
    "Reference": "If {@code labelFilter = \"\\0\"}, settings without any label are returned.",
    "HebCup": "If {@code LabelFilter = ``\\0``}, settings without any label are returned."
}
{
    "Origin": "Create an instance of {@link CTWebProperties }",
    "Reference": "Create an instance of {@link CTRel }",
    "HebCup": "Create an instance of {@link CTRel}"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Is has plain column or not.",
    "Reference": "Contains plain column or not.",
    "HebCup": "contains Plain Column or not."
}
{
    "Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getContentLanguage(Context)}.",
    "Reference": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.",
    "HebCup": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage (Context)}."
}
{
    "Origin": "Slight performance increase over {@link #render(BufferBuilder)}.",
    "Reference": "Slight performance increase over {@link #render(VertexBuffer)}.",
    "HebCup": "Slight performance increase over {@link #render(VertexBuffer)}."
}
{
    "Origin": "The input stream should\ncontain an X.509 certificate chain in PEM format.",
    "Reference": "The input stream should\ncontain an X.509 certificate collection in PEM format.",
    "HebCup": "The input stream should contain an X.509 certificate Collection in PEM format."
}
{
    "Origin": "Sets the storage serializer.",
    "Reference": "Sets the storage namespace.",
    "HebCup": "Sets the storage Namespace."
}
{
    "Origin": "Whether the channel product is a beta product",
    "Reference": "Whether the channel product is a betaMarker product",
    "HebCup": "Whether the channel product is a betaMarker product"
}
{
    "Origin": "Gets the dialogNodeId.",
    "Reference": "Gets the dialogNode.",
    "HebCup": "Gets the dialogNode."
}
{
    "Origin": "the barChartProperties of the chart",
    "Reference": "the chartProperties of the chart",
    "HebCup": "the ChartProperties of the chart"
}
{
    "Origin": "Otherwise, it traverses all objects in\ngiven array and adds their scalar values named\n{@code cursor#getNext()} to the result.",
    "Reference": "Otherwise, it traverses all objects in\ngiven array and adds their scalar values named\n{@code pathCursor#getNext()} to the result.",
    "HebCup": "Otherwise, it traverses all objects in given array and adds their scalar values named {@code pathCursor#getNext ()} to the result."
}
{
    "Origin": "Get the fileContentType property: Sets the MIME content type of the\nfile.",
    "Reference": "Get the contentType property: Sets the MIME content type of the\nfile.",
    "HebCup": "Get the ContentType property: Sets the MIME content type of the file."
}
{
    "Origin": "Test of var method, of class HyperGeometricDistribution.",
    "Reference": "Test of variance method, of class HyperGeometricDistribution.",
    "HebCup": "Test of Variance method, of class HyperGeometricDistribution."
}
{
    "Origin": "Get the {@link SessionConfiguration} for the specified camera id.",
    "Reference": "Get the {@link SessionConfig} for the specified camera id.",
    "HebCup": "Get the {@link SessionConfig} for the specified camera id."
}
{
    "Origin": "Decode an action profile member to PI action group member.",
    "Reference": "Decode an action profile member to PI action profile member.",
    "HebCup": "Decode an action profile member to Pi Action Profile Member."
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "Removes all actors and cells from the table (same as {@link #clear()}) and additionally resets all table properties and\ncell, column, and row defaults.",
    "Reference": "Removes all actors and cells from the table (same as {@link #clearChildren()}) and additionally resets all table properties\nand cell, column, and row defaults.",
    "HebCup": "Removes all actors and cells from the table (same as {@link#clearChildren ()}) and additionally resets all table properties and cell, column, and row defaults."
}
{
    "Origin": "Returns an immutable set containing one element.",
    "Reference": "Returns an unmodifiable set containing one element.",
    "HebCup": "Returns an Unmodifiable set containing one element."
}
{
    "Origin": "First sends a request to the BlobStore and gets a list of all blob file summaries\nprefixed by the given coreName.",
    "Reference": "First sends a request to the BlobStore and gets a list of all blob file summaries\nprefixed by the given blobName.",
    "HebCup": "First sends a request to the BlobStore and gets a list of all blob file summaries prefixed by the given blobName."
}
{
    "Origin": "Method that returns code to access a named state parameter.",
    "Reference": "Method that returns code to access a named prop parameter.",
    "HebCup": "Method that returns code to access a named Prop parameter."
}
{
    "Origin": "Sets {@link MediaItem2} object to render using VideoView2.",
    "Reference": "Sets {@link MediaItem} object to render using VideoView2.",
    "HebCup": "Sets {@link MediaItem} object to render using VideoView2."
}
{
    "Origin": "Returns the whitelisted regular expressions.",
    "Reference": "Returns the white regular expressions.",
    "HebCup": "Returns the White regular expressions."
}
{
    "Origin": "Test of var method, of class BinomialDistribution.",
    "Reference": "Test of variance method, of class BinomialDistribution.",
    "HebCup": "Test of Variance method, of class BinomialDistribution."
}
{
    "Origin": "Returns an immutable list containing three elements.",
    "Reference": "Returns an unmodifiable list containing three elements.",
    "HebCup": "Returns an Unmodifiable list containing three elements."
}
{
    "Origin": "Sets SSLHostConfig infos.",
    "Reference": "Sets SslHostConfig infos.",
    "HebCup": "Sets SslHostConfig infos."
}
{
    "Origin": "Returns a literal for the {@link Reference} policy.",
    "Reference": "Returns a literal for the {@link ScrService.Reference} policy.",
    "HebCup": "Returns a literal for the {@link ScrService.Reference} policy."
}
{
    "Origin": "Sets playback rate using {@link PlaybackParams2}.",
    "Reference": "Sets playback rate using {@link PlaybackParams}.",
    "HebCup": "Sets playback rate using {@link PlaybackParams}."
}
{
    "Origin": "Gets the value of the source property.",
    "Reference": "Gets the value of the parameter property.",
    "HebCup": "Gets the value of the Parameter property."
}
{
    "Origin": "Runs a process using a custom timeout and a process terminator.",
    "Reference": "Runs a process using a custom termination check interval and a process\nterminator.",
    "HebCup": "Runs a process using a custom terminationCheckInterval and a process terminator."
}
{
    "Origin": "Use {@link #destroyToNaiveMatrix()} if you do not need further\nupdates.",
    "Reference": "Use {@link #destroyToPopulationMatrix()} if you do not need further\nupdates.",
    "HebCup": "Use {@link #destroyToPopulationMatrix()} if you do not need further updates."
}
{
    "Origin": "Creates an audit entry when a service definition is deleted.",
    "Reference": "Creates an audit entry when a API definition is deleted.",
    "HebCup": "Creates an audit entry when a api Definition is deleted."
}
{
    "Origin": "If --all is specified, --interface won't be visible",
    "Reference": "If --all is specified, --entity won't be visible",
    "HebCup": "If --all is specified, --entity won't be visible"
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.PageBlobClient.copyIncremental#URL-String}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.PageBlobClient.copyIncremental#String-String}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.PageBlobClient.copyIncremental#String-String}"
}
{
    "Origin": "Gets a collection of bibentries and sets an ID for every entry.",
    "Reference": "Gets a collection of entries and sets an ID for every entry.",
    "HebCup": "Gets a collection of entries and sets an ID for every entry."
}
{
    "Origin": "Gets current playback position as a {@link MediaTimestamp2}.",
    "Reference": "Gets current playback position as a {@link MediaTimestamp}.",
    "HebCup": "Gets current playback position as a {@link MediaTimestamp}."
}
{
    "Origin": "In order to apply the rotation transformation to an existing transformation,\nuse {@link #rotate(Quaterniond) rotate()} instead.",
    "Reference": "In order to apply the rotation transformation to an existing transformation,\nuse {@link #rotate(Quaterniondc) rotate()} instead.",
    "HebCup": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaterniondc) rotate()} instead."
}
{
    "Origin": "Varargs version of {@link #addState(Closure, Object, java.util.Set)}.",
    "Reference": "Varargs version of {@link #addState(Consumer, Object, java.util.Set)}.",
    "HebCup": "Varargs version of {@link #addState(Consumer, Object, java.util.Set)}."
}
{
    "Origin": "Creates a command that can be run later which will restore a display to its\ncurrent state.",
    "Reference": "Creates a module that can be run later which will restore a display to its\ncurrent state.",
    "HebCup": "Creates a Module that can be run later which will restore a display to its current state."
}
{
    "Origin": "This method sets the value of the database column m_prj_risk.dateraised",
    "Reference": "This method sets the value of the database column m_prj_risk.raisedDate",
    "HebCup": "This method sets the value of the database column m_prj_risk.Raiseddate"
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions#settingSelector}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listRevisions#settingSelector}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listRevisions#settingSelector}"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method\nwhen some files are consistent in a larger inode tree.",
    "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method\nwhen some files are consistent in a larger inode tree.",
    "HebCup": "Tests the {@link FileSystemMaster#checkConsistency (AlluxioURI, CheckConsistencyContext)} method when some files are consistent in a larger inode tree."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#isEnabled() enabled}\nfield is set to true by Azure Key Vault, if not specified.",
    "Reference": "The {@link CreateRsaKeyOptions#isEnabled() enabled}\nfield is set to true by Azure Key Vault, if not specified.",
    "HebCup": "The {@link CreateRsaKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "The executor will shutdown\non {@link #shutdown()}, if not detached.",
    "Reference": "The executors will shutdown\non {@link #shutdown()}, if not detached.",
    "HebCup": "The Executors will shutdown on {@link#shutdown ()}, if not detached."
}
{
    "Origin": "Returns the value of the {@code bitfield} field.",
    "Reference": "Returns the value of the {@code direction} field.",
    "HebCup": "Returns the value of the {@code direction} field."
}
{
    "Origin": "The meta-property for the {@code expiryDateTime} property.",
    "Reference": "The meta-property for the {@code expiry} property.",
    "HebCup": "The meta-property for the {@code expiry} property."
}
{
    "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "HebCup": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners."
}
{
    "Origin": "Returns the {@link CaptureRequestConfiguration} for the {@link CaptureStage} object.",
    "Reference": "Returns the {@link CaptureRequestConfig} for the {@link CaptureStage} object.",
    "HebCup": "Returns the {@link CaptureRequestConfig} for the {@link CaptureStage} object."
}
{
    "Origin": "Get the FCPClient if it exists.",
    "Reference": "Get the PersistentRequestClient if it exists.",
    "HebCup": "Get the PersistentRequestClient if it exists."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Note that the writing process does not start until the returned {@code Mono} is subscribed\nto.",
    "Reference": "Note that the writing process does not start until the returned {@code Flux} is subscribed\nto.",
    "HebCup": "Note that the writing process does not start until the returned {@code Flux} is subscribed to."
}
{
    "Origin": "Tests resilency when D2 device availability is changed.",
    "Reference": "Tests resiliency when D2 device availability is changed.",
    "HebCup": "Tests resiliency when D2 device availability is changed."
}
{
    "Origin": "Start building a new factory class-based service binding.",
    "Reference": "Start building a new supplier class-based service binding.",
    "HebCup": "Start building a new Supplier Class-based service binding."
}
{
    "Origin": "Creates an exception from an service name.",
    "Reference": "Creates an exception from an API name.",
    "HebCup": "Creates an exception from an api Name."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Make sure to\n{@link #releaseParser(SAXParser)} in\na  block every time you call this.",
    "Reference": "Make sure to\n{@link #releaseParser(PoolSAXParser)} in\na  block every time you call this.",
    "HebCup": "Make sure to {@link #releaseParser(PoolSAXParser)} in a block every time you call this."
}
{
    "Origin": "Send a non-mutation message to a given endpoint.",
    "Reference": "Send a non-mutation message to a given node.",
    "HebCup": "Send a non-mutation message to a given Node."
}
{
    "Origin": "unlike excise we just need this endpoint gone without going through any notifications *",
    "Reference": "unlike excise we just need this node gone without going through any notifications *",
    "HebCup": "unlike excise we just need this Node gone without going through any notifications *"
}
{
    "Origin": "Returns the opening {@link Month} within this set of bounds.",
    "Reference": "Returns the openAt {@link Month} within this set of bounds.",
    "HebCup": "Returns the OpenAt {@link Month} within this set of bounds."
}
{
    "Origin": "Generates a valid document ID for a service, used to index the service in ES.",
    "Reference": "Generates a valid document ID for a api, used to index the api in ES.",
    "HebCup": "Generates a valid document ID for a Api, used to index the Api in ES."
}
{
    "Origin": "Deletes the elements in the mValues list and notifies the Adapter",
    "Reference": "Deletes the elements in the values list and notifies the Adapter",
    "HebCup": "Deletes the elements in the values list and notifies the Adapter"
}
{
    "Origin": "The version of this Titan graph database",
    "Reference": "The version of this JanusGraph graph database",
    "HebCup": "The version of this JanusGraph graph database"
}
{
    "Origin": "Sets the schema version to the given {@link SharedRealm}.",
    "Reference": "Sets the schema version to the given {@link OsSharedRealm}.",
    "HebCup": "Sets the schema version to the given {@link OsSharedRealm}."
}
{
    "Origin": "Adds a handle to the constant pool of the class being built.",
    "Reference": "Adds a method handle to the constant pool of the class being built.",
    "HebCup": "Adds a MethodHandle to the constant pool of the class being built."
}
{
    "Origin": "Bind contract provider model to a provider class using the supplied instance manager.",
    "Reference": "Bind contract provider model to a provider class using the supplied injection manager.",
    "HebCup": "Bind contract provider model to a provider class using the supplied Injection Manager."
}
{
    "Origin": "Sets the quorum name for lock operations.",
    "Reference": "Sets the split brain protection name for lock operations.",
    "HebCup": "Sets the split Brain Protection Name for lock operations."
}
{
    "Origin": "Returns an AccountListItem from the specified position in the mValues list",
    "Reference": "Returns an AccountListItem from the specified position in the values list",
    "HebCup": "Returns an AccountListItem from the specified position in the values list"
}
{
    "Origin": "PlaybackParams2 to the given input.",
    "Reference": "PlaybackParams to the given input.",
    "HebCup": "PlaybackParams to the given input."
}
{
    "Origin": "Setter for {@link #allowCredentials}",
    "Reference": "Setter for {@link #allowedCredentials}",
    "HebCup": "Setter for {@link#allowedCredentials}"
}
{
    "Origin": "Obtain the {@link MongoDatabase database} with given name form the given {@link MongoDbFactory factory}.",
    "Reference": "Obtain the {@link MongoDatabase database} with given name form the given {@link MongoDatabaseFactory factory}.",
    "HebCup": "Obtain the {@link MongoDatabase database} with given name form the given {@link MongoDatabaseFactory factory}."
}
{
    "Origin": "Returns an immutable map containing a single mapping.",
    "Reference": "Returns an unmodifiable map containing a single mapping.",
    "HebCup": "Returns an Unmodifiable map containing a single mapping."
}
{
    "Origin": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubDirectoryWithResponse(String, Duration,",
    "Reference": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectoryWithResponse(String, Duration,",
    "HebCup": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectoryWithResponse (String, Duration,"
}
{
    "Origin": "Marks the action as analyzing.",
    "Reference": "Marks the action as scanning.",
    "HebCup": "Marks the action as Scanning."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Test of var method, of class Exponential.",
    "Reference": "Test of variance method, of class Exponential.",
    "HebCup": "Test of Variance method, of class Exponential."
}
{
    "Origin": "Extracts the underlying quotes from the {@link CurveInputs} instances and returns them in a map.",
    "Reference": "Extracts the underlying quotes from the {@link RatesCurveInputs} instances and returns them in a map.",
    "HebCup": "Extracts the underlying quotes from the {@link RatesCurveInputs} instances and returns them in a map."
}
{
    "Origin": "Copy the contents of a Bucket to a RandomAccessThing at a specific offset.",
    "Reference": "Copy the contents of a Bucket to a RandomAccessBuffer at a specific offset.",
    "HebCup": "Copy the contents of a Bucket to a RandomAccessBuffer at a specific offset."
}
{
    "Origin": "This method is used\nonly to initialize the acceptReplacers field.",
    "Reference": "This method is used\nonly to initialize the headerReplacers field.",
    "HebCup": "This method is used only to initialize the HeaderReplacers field."
}
{
    "Origin": "Asynchronously gets a service.",
    "Reference": "Asynchronously gets a api.",
    "HebCup": "Asynchronously gets a Api."
}
{
    "Origin": "Tests this matcher against the given {@link DiscordRequest}.",
    "Reference": "Tests this matcher against the given {@link DiscordWebRequest}.",
    "HebCup": "Tests this matcher against the given {@link DiscordWebRequest}."
}
{
    "Origin": "Add optimized insert value.",
    "Reference": "Add insert value.",
    "HebCup": "add Insert Value."
}
{
    "Origin": "{@code\nimport ratpack.rx2.RxRatpack;\nimport ratpack.test.exec.ExecHarness;\nimport io.reactivex.Observable;",
    "Reference": "{@code\nimport ratpack.rx2.RxRatpack;\nimport ratpack.test.exec.ExecHarness;\nimport io.reactivex.Single;",
    "HebCup": "{@code import ratpack.rx2.RxRatpack; import ratpack.test.exec.ExecHarness; import io.reactivex.Single;"
}
{
    "Origin": "Sets the value of the 'ValueType' field.",
    "Reference": "Sets the value of the 'valueType' field.",
    "HebCup": "Sets the value of the 'valueType' field."
}
{
    "Origin": "Registers a new content observer for the media library",
    "Reference": "Registers a new library observer for the media library",
    "HebCup": "Registers a new Library Observer for the media library"
}
{
    "Origin": "Test of parse method, of class FinishedMessageParser.",
    "Reference": "Test of parse method, of class FinishedParser.",
    "HebCup": "Test of parse method, of class FinishedParser."
}
{
    "Origin": "We make sure that\ntrying to update the field works if the user has the \"correct\" role, but failes if it doesn't.",
    "Reference": "We make sure that\ntrying to update the field works if the user has the \"correct\" role, but fails if it doesn't.",
    "HebCup": "We make sure that trying to update the field works if the user has the ``correct`` role, but fails if it doesn't."
}
{
    "Origin": "Create new {@link Builder} based on an existing {@link BaseEvent} instance and and {@link EventContext}.",
    "Reference": "Create new {@link Builder} based on an existing {@link CoreEvent} instance and and {@link EventContext}.",
    "HebCup": "Create new {@link Builder} based on an existing {@link CoreEvent} instance and and {@link EventContext}."
}
{
    "Origin": "Test of npara method, of class MultivariateGaussian.",
    "Reference": "Test of length method, of class MultivariateGaussian.",
    "HebCup": "Test of Length method, of class MultivariateGaussian."
}
{
    "Origin": "Creates an entity and populates its state based on the dbObject given.",
    "Reference": "Creates an entity and populates its state based on the document given.",
    "HebCup": "Creates an entity and populates its state based on the Document given."
}
{
    "Origin": "Setter for the URL of the content review icon associated with this item",
    "Reference": "Setter for the css class of the content review icon associated with this item",
    "HebCup": "Setter for the CssClass of the content review icon associated with this item"
}
{
    "Origin": "Verifies that the given {@code emailContent} is the same as\nthe content given in the file at {@code filePathParam}.",
    "Reference": "Verifies that the given {@code emailContent} is the same as\nthe content given in the file at {@code fileName}.",
    "HebCup": "Verifies that the given {@code emailContent} is the same as the content given in the file at {@code fileName}."
}
{
    "Origin": "This will set the margin between the annotations \"outer\" rectangle defined by\n/Rect and the border.",
    "Reference": "This will set the difference between the annotations \"outer\" rectangle defined by\n/Rect and the border.",
    "HebCup": "This will set the difference between the annotations ``outer`` rectangle defined by /Rect and the border."
}
{
    "Origin": "NativeLinkable}.",
    "Reference": "NativeLinkableGroup}.",
    "HebCup": "NativeLinkableGroup}."
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix and store\nthe result in .",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix and store\nthe result in .",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix and store the result in ."
}
{
    "Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method\nwhen a file is not the correct size.",
    "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method\nwhen a file is not the correct size.",
    "HebCup": "Tests the {@link FileSystemMaster#checkConsistency (AlluxioURI, CheckConsistencyContext)} method when a file is not the correct size."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Requests that the player prefetch the media items for playback.",
    "Reference": "Requests that the player prepare the media items for playback.",
    "HebCup": "Requests that the player prepare the media items for playback."
}
{
    "Origin": "Sets the value of the cryptAlgorithmType property.",
    "Reference": "Sets the value of the algorithmName property.",
    "HebCup": "Sets the value of the AlgorithmName property."
}
{
    "Origin": "This method checks if the region of {@code path} starting\nat {@code pathOffset} matches the path segments in {@code segments}.",
    "Reference": "This method checks if the region of {@code path} starting\nat {@code pathOffset} matches the path pathSegments in {@code pathSegments}.",
    "HebCup": "This method checks if the region of {@code path} starting at {@code pathOffset} matches the path pathSegments in {@code pathSegments}."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Set this {@link AxisAngle4f} to be equivalent to the given\n{@link Quaterniond}.",
    "Reference": "Set this {@link AxisAngle4f} to be equivalent to the given\n{@link Quaterniondc}.",
    "HebCup": "Set this {@link AxisAngle4f} to be equivalent to the given {@link Quaterniondc}."
}
{
    "Origin": "Gets the value of the descrption property.",
    "Reference": "Gets the value of the description property.",
    "HebCup": "Gets the value of the Description property."
}
{
    "Origin": "Test of from method, of class Statistics.",
    "Reference": "Test of fromJson method, of class Statistics.",
    "HebCup": "Test of fromJson method, of class Statistics."
}
{
    "Origin": "showIndex.",
    "Reference": "showTagArticles.",
    "HebCup": "showTagArticles."
}
{
    "Origin": "Creates an instance of {@link RowFactory} using provided {@link RowTypeFactory}\nand {@link GetterFactory}.",
    "Reference": "Creates an instance of {@link RowFactory} using provided {@link SchemaFactory}\nand {@link GetterFactory}.",
    "HebCup": "Creates an instance of {@link RowFactory} using provided {@link SchemaFactory} and {@link GetterFactory}."
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix and store\nthe result in .",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix and store\nthe result in .",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix and store the result in ."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "If the offsets list is empty, then an offset of 0 is used for each array.",
    "Reference": "If the offsets list is empty, then an offset of 0 is used for each\nsequence.",
    "HebCup": "If the offsets list is empty, then an offset of 0 is used for each sequence."
}
{
    "Origin": "Indicates if the way is ready to handle new messages.",
    "Reference": "Indicates if the way is available to handle new messages.",
    "HebCup": "Indicates if the way is Available to handle new messages."
}
{
    "Origin": "Returns  if annotation is present on\ngiven accessible object.",
    "Reference": "Returns  if annotation is present on\ngiven annotated element.",
    "HebCup": "Returns if annotation is present on given Annotated Element."
}
{
    "Origin": "Gets the nodeType.",
    "Reference": "Gets the newType.",
    "HebCup": "Gets the newType."
}
{
    "Origin": "Create an unnamed, parented {@link InstanceManager}.",
    "Reference": "Create an unnamed, parented {@link InjectionManager}.",
    "HebCup": "Create an unnamed, parented {@link InjectionManager}."
}
{
    "Origin": "Starts continuous task.",
    "Reference": "Starts local continuous task.",
    "HebCup": "Starts Local Continuous Task."
}
{
    "Origin": "They must not be of type {@link KnownAmountPaymentPeriod}.",
    "Reference": "They must not be of type {@link KnownAmountSwapPaymentPeriod}.",
    "HebCup": "They must not be of type {@link KnownAmountSwapPaymentPeriod}."
}
{
    "Origin": "The {@link KeyCreateOptions} is required.",
    "Reference": "The {@link CreateKeyOptions} is required.",
    "HebCup": "The {@link CreateKeyOptions} is required."
}
{
    "Origin": "Sets the value of the 'BloomFilter' field",
    "Reference": "Sets the value of the 'bloomFilter' field.",
    "HebCup": "Sets the value of the 'bloomFilter' field"
}
{
    "Origin": "Generate a FormType from a string.",
    "Reference": "Generate a FormTypes from a string.",
    "HebCup": "Generate a FormTypes from a string."
}
{
    "Origin": "Gets the value of the 'KeepDeletedCells' field",
    "Reference": "Gets the value of the 'keepDeletedCells' field.",
    "HebCup": "Gets the value of the 'keepDeletedCells' field"
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "caller should not modify leavingEndpoints",
    "Reference": "caller should not modify leavingNodes",
    "HebCup": "caller should not modify leavingNodes"
}
{
    "Origin": "Setup starts 4 process instances of oneTaskProcess\nand 1 instance of oneTaskProcess2",
    "Reference": "Setup starts 4 process instances of oneTaskProcess\nand 1 instance of otherOneTaskProcess",
    "HebCup": "Setup starts 4 process instances of oneTaskProcess and 1 instance of otherOneTaskProcess"
}
{
    "Origin": "Using the starting mark found for each alteration item, defines all slices.",
    "Reference": "Using the starting mark found for each alteration item, defines all roi.",
    "HebCup": "Using the starting mark found for each alteration item, defines all roi."
}
{
    "Origin": "Checks whether memory cache key (image URI) for current ImageView is actual",
    "Reference": "Checks whether memory cache key (image URI) for current ImageAware is actual",
    "HebCup": "Checks whether memory cache key (image URI) for current imageAware is actual"
}
{
    "Origin": "This method obtains the extension as the textual part of the filename\nafter the last dot.",
    "Reference": "This method obtains the extension as the textual part of the fileName\nafter the last dot.",
    "HebCup": "This method obtains the extension as the textual part of the fileName after the last dot."
}
{
    "Origin": "Implements {@link PacketListener}.",
    "Reference": "Implements {@link StanzaListener}.",
    "HebCup": "Implements {@link StanzaListener}."
}
{
    "Origin": "Provides a list of all connection wrappers corresponding to a given environment.",
    "Reference": "Provides a list of all connection configs corresponding to a given environment.",
    "HebCup": "Provides a list of all connection Configs corresponding to a given environment."
}
{
    "Origin": "If this lookup object has private access, then the caller class is the lookupClass.",
    "Reference": "If this lookup object has full privilege access, then the caller class is the lookupClass.",
    "HebCup": "If this lookup object has Full Privilege Access, then the caller class is the lookupClass."
}
{
    "Origin": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link CurveId} as the identifier.",
    "Reference": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link RatesCurveId} as the identifier.",
    "HebCup": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier."
}
{
    "Origin": "Add a list of documents to the Solr server.",
    "Reference": "Add a list of documents to the Solr client.",
    "HebCup": "Add a list of documents to the Solr Client."
}
{
    "Origin": "Returns the builder for the settings used for calls to labelAudio.",
    "Reference": "Returns the builder for the settings used for calls to listEvaluationJobs.",
    "HebCup": "Returns the builder for the settings used for calls to ListEvaluationJobs."
}
{
    "Origin": "propagate any exception thrown\ndrop events if invocation of {@link #process(BaseEvent)} returns null.",
    "Reference": "propagate any exception thrown\ndrop events if invocation of {@link #process(CoreEvent)} returns null.",
    "HebCup": "propagate any exception thrown drop events if invocation of {@link #process(CoreEvent)} returns null."
}
{
    "Origin": "Check equality between a String and a char[] object, specifying (offset,len) pairs\n  for limiting the fragments to be checked.",
    "Reference": "Check equality between a CharSequence and a char[] object, specifying (offset,len) pairs\n  for limiting the fragments to be checked.",
    "HebCup": "Check equality between a CharSequence and a char[] object, specifying (offset,len) pairs for limiting the fragments to be checked."
}
{
    "Origin": "Get type of the report.",
    "Reference": "Get delimiter of the report.",
    "HebCup": "Get Delimiter of the report."
}
{
    "Origin": "Whenever there is a palindrome, the result increments by 1.",
    "Reference": "Whenever there is a palindrome, the count increments by 1.",
    "HebCup": "Whenever there is a palindrome, the count increments by 1."
}
{
    "Origin": "Test of var method, of class Exponential.",
    "Reference": "Test of variance method, of class Exponential.",
    "HebCup": "Test of Variance method, of class Exponential."
}
{
    "Origin": "BatchOptions#getMaximumSizeInBytes()}.",
    "Reference": "CreateBatchOptions#getMaximumSizeInBytes()}.",
    "HebCup": "CreateBatchOptions#getMaximumSizeInBytes ()}."
}
{
    "Origin": "Configure a sslConfig for the http service using the legacy configuration",
    "Reference": "Configure a SSLConfig.Builder for the http service using the legacy configuration",
    "HebCup": "Configure a SSLConfig.Builder for the http service using the legacy configuration"
}
{
    "Origin": "Error responses are never streaming so we always use {@link SyncResponseHandlerAdapter}.",
    "Reference": "Error responses are never streaming so we always use {@link AsyncResponseHandler}.",
    "HebCup": "Error responses are never streaming so we always use {@link AsyncResponseHandler}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Resets the log unit server via the BatchProcessor.",
    "Reference": "Resets the log unit server via the SequentialProcessor.",
    "HebCup": "Resets the log unit server via the sequentialProcessor."
}
{
    "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Setter for {@link #exposeOnlyRequestedHeader}",
    "Reference": "Setter for {@link #allowOnlyRequestedHeader}",
    "HebCup": "Setter for {@link#allowOnlyRequestedHeader}"
}
{
    "Origin": "Creates an entity and populates its state based on the dbObject given.",
    "Reference": "Creates an entity and populates its state based on the document given.",
    "HebCup": "Creates an entity and populates its state based on the Document given."
}
{
    "Origin": "Returns {@code true} if the specified provider is built by the vendor.",
    "Reference": "Returns {@code true} if the specified factory is built by the vendor.",
    "HebCup": "Returns {@code true} if the specified factory is built by the vendor."
}
{
    "Origin": "Creates a new {@code AtomicTreeMapBuilder}.",
    "Reference": "Creates a new {@code AtomicNavigableMapBuilder}.",
    "HebCup": "Creates a new {@code AtomicNavigableMapBuilder}."
}
{
    "Origin": "Returns an immutable map containing eight mappings.",
    "Reference": "Returns an unmodifiable map containing eight mappings.",
    "HebCup": "Returns an Unmodifiable map containing eight mappings."
}
{
    "Origin": "Method getJobID returns the Hadoop running job JobID.",
    "Reference": "Method getProcessStepID returns the Hadoop running job JobID.",
    "HebCup": "Method getProcessStepID returns the Hadoop running job JobID."
}
{
    "Origin": "Generate a ChallengeStatus from a string.",
    "Reference": "Generate a ChallengeStatuses from a string.",
    "HebCup": "Generate a ChallengeStatuses from a string."
}
{
    "Origin": "Encodes the given object using the configured {@link #serializer()}.",
    "Reference": "Encodes the given object using the configured {@link #userSerializer}.",
    "HebCup": "Encodes the given object using the configured {@link #serializer()}."
}
{
    "Origin": "Amalgamate all pre-destroy callbacks and return a read only list",
    "Reference": "Amalgamate all pre-destroy callbacks and return a read only set",
    "HebCup": "Amalgamate all pre-destroy callbacks and return a read only Set"
}
{
    "Origin": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, ReliableDownloadOptions,",
    "Reference": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, DownloadRetryOptions,",
    "HebCup": "Code snippets for {@link BlobAsyncClient#downloadWithResponse (BlobRange, DownloadRetryOptions,"
}
{
    "Origin": "Returns the last sync d l object in the ordered set where companyId = ?",
    "Reference": "Returns the last sync d l object in the ordered set where repositoryId = ?",
    "HebCup": "Returns the last sync d l object in the ordered set where repositoryId = ?"
}
{
    "Origin": "Adds in memory files to the array list passed in.",
    "Reference": "Adds in-Alluxio files to the array list passed in.",
    "HebCup": "Adds In Alluxio Files to the array list passed in."
}
{
    "Origin": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link NamespacedEntityId}.",
    "Reference": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link MetadataEntity}.",
    "HebCup": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link MetadataEntity}."
}
{
    "Origin": "Count the total file size, including id files, of {@link DatabaseStore}s.",
    "Reference": "Count the total file size, including id files, of {@link DatabaseFile}s.",
    "HebCup": "Count the total file size, including id files, of {@link DatabaseFile}s."
}
{
    "Origin": "Scheduler:\n {@code combineLatest} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Combined list of {@link BufferEdge} is passed to {@link DeclarationAssembler} for merging.",
    "Reference": "Combined list of {@link ByteFragmentAtOffset} is passed to {@link DeclarationAssembler} for\nmerging.",
    "HebCup": "Combined list of {@link ByteFragmentAtOffset} is passed to {@link DeclarationAssembler} for merging."
}
{
    "Origin": "Starts the server with the given properties.",
    "Reference": "Starts the integration with the given properties.",
    "HebCup": "Starts the integration with the given properties."
}
{
    "Origin": "Returns an immutable set containing three elements.",
    "Reference": "Returns an unmodifiable set containing three elements.",
    "HebCup": "Returns an Unmodifiable set containing three elements."
}
{
    "Origin": "Converts a Swagger parameter to an instance of {@link Body}.",
    "Reference": "Converts a Swagger parameter to an instance of {@link Entity}.",
    "HebCup": "Converts a Swagger parameter to an instance of {@link Entity}."
}
{
    "Origin": "Gets the primitive target conversion type.",
    "Reference": "Gets the target primitive conversion type.",
    "HebCup": "Gets the target Primitive conversion type."
}
{
    "Origin": "Removes all the tags from the {@link NamespacedEntityId}",
    "Reference": "Removes all the tags from the {@link MetadataEntity}",
    "HebCup": "Removes all the tags from the {@link MetadataEntity}"
}
{
    "Origin": "Scheduler:\n {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Sets the {@code referenceEntityIds} property in the builder\nfrom an array of objects.",
    "Reference": "Sets the {@code legalEntityIds} property in the builder\nfrom an array of objects.",
    "HebCup": "Sets the {@code legalEntityIds} property in the builder from an array of objects."
}
{
    "Origin": "Start building a new factory instance-based service binding.",
    "Reference": "Start building a new supplier instance-based service binding.",
    "HebCup": "Start building a new Supplier Instance-based service binding."
}
{
    "Origin": "Name of schedule",
    "Reference": "Name of task",
    "HebCup": "Name of Task"
}
{
    "Origin": "Creates a {@code For}-comprehension of 7 Iterables.",
    "Reference": "Creates a {@code For}-comprehension of 7 Options.",
    "HebCup": "Creates a {@code For}-comprehension of 7 Iterables."
}
{
    "Origin": "Returns matched property name or  if name is not matched.",
    "Reference": "Returns matched name or  if name is not matched.",
    "HebCup": "Returns matched Name or if name is not matched."
}
{
    "Origin": "Set the modelId.",
    "Reference": "Set the model.",
    "HebCup": "Set the model."
}
{
    "Origin": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_SELECT_PACKAGES_PROPERTY} from stack",
    "Reference": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_PACKAGES_PROPERTY} from stack",
    "HebCup": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_PACKAGES_PROPERTY} from stack"
}
{
    "Origin": "Count number of {@link AggregationExceptions} updates contained in the\ngiven list of {@link CPOWrapper}.",
    "Reference": "Count number of {@link AggregationExceptions} updates contained in the\ngiven list of {@link ContentProviderOperation}.",
    "HebCup": "Count number of {@link AggregationExceptions} updates contained in the given list of {@link ContentProviderOperation}."
}
{
    "Origin": "So if you\nwant to be sure that your {@link IGetAndSetLocator} is handled in all situations then call this\nmethod twice with your implementations.",
    "Reference": "So if you\nwant to be sure that your {@link IPropertyLocator} is handled in all situations then call this\nmethod twice with your implementations.",
    "HebCup": "So if you want to be sure that your {@link IPropertyLocator} is handled in all situations then call this method twice with your implementations."
}
{
    "Origin": "if numeratorTree is a + b and divisor greater than 1, and a and b are less than the\nlength of some array, then (a + b) / divisor is less than the length of that array.",
    "Reference": "if numeratorTree is a + b and divisor greater than 1, and a and b are less than the\nlength of some sequence, then (a + b) / divisor is less than the length of that sequence.",
    "HebCup": "if numeratorTree is a + b and divisor greater than 1, and a and b are less than the length of some sequence, then (a + b) / divisor is less than the length of that sequence."
}
{
    "Origin": "Generates a valid document ID for a service referenced by a contract, used to\nretrieve the service from ES.",
    "Reference": "Generates a valid document ID for a API referenced by a contract, used to\nretrieve the API from ES.",
    "HebCup": "Generates a valid document ID for a Api referenced by a contract, used to retrieve the Api from ES."
}
{
    "Origin": "This method returns the value of the database column s_user.dateofbirth",
    "Reference": "This method returns the value of the database column s_user.birthday",
    "HebCup": "This method returns the value of the database column s_user.Birthday"
}
{
    "Origin": "If {@link #IGNORE_OVERFLOW} is true and one of the bounds is outside the Short range, then\nthat bound is set to the bound of the Short range.",
    "Reference": "If {@link #ignoreOverflow} is true and one of the bounds is outside the Short range, then\nthat bound is set to the bound of the Short range.",
    "HebCup": "If {@link#ignoreOverflow} is true and one of the bounds is outside the Short range, then that bound is set to the bound of the Short range."
}
{
    "Origin": "Encode a PiActionGroupMember to a ActionProfileMember.",
    "Reference": "Encode a PiActionProfileMember to a ActionProfileMember.",
    "HebCup": "Encode a PiActionProfileMember to a ActionProfileMember."
}
{
    "Origin": "See {@link #filterBlocks(Predicate, boolean)} to adjust\nthis behavior.",
    "Reference": "See {@link #filter(Predicate, boolean)} to adjust\nthis behavior.",
    "HebCup": "See {@link#filter (Predicate, boolean)} to adjust this behavior."
}
{
    "Origin": "Configure a sslConfig for the gateway using the legacy configuration",
    "Reference": "Configure a SSLConfig.Builder for the gateway using the legacy configuration",
    "HebCup": "Configure a SSLConfig.Builder for the gateway using the legacy configuration"
}
{
    "Origin": "Get Resource Definition Snippet Block.",
    "Reference": "Get HTTP Resource Definition Snippet Block.",
    "HebCup": "get Http Resource Definition Snippet Block."
}
{
    "Origin": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.",
    "Reference": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}.",
    "HebCup": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}."
}
{
    "Origin": "Set the Date that this Token expires",
    "Reference": "Set the ZonedDateTime that this Token expires",
    "HebCup": "Set the ZonedDateTime that this Token expires"
}
{
    "Origin": "If Hazelcast Security is not enabled, then only the given group name is compared to\nconfiguration.",
    "Reference": "If Hazelcast Security is not enabled, then only the given cluster name is compared to\nconfiguration.",
    "HebCup": "If Hazelcast Security is not enabled, then only the given cluster Name is compared to configuration."
}
{
    "Origin": "Checks the dirty status of the 'reprUrl' field.",
    "Reference": "Checks the dirty status of the 'headers' field.",
    "HebCup": "Checks the dirty status of the 'Headers' field."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Returns an immutable list containing seven elements.",
    "Reference": "Returns an unmodifiable list containing seven elements.",
    "HebCup": "Returns an Unmodifiable list containing seven elements."
}
{
    "Origin": "Returns the input stream of this message content.",
    "Reference": "Returns the CachedOutputStream of this message content.",
    "HebCup": "Returns the Cached Output Stream of this message content."
}
{
    "Origin": "See {@link FastCornerIntensity} for more details.",
    "Reference": "See {@link FastCornerDetector} for more details.",
    "HebCup": "See {@link FastCornerDetector} for more details."
}
{
    "Origin": "Services incoming range write calls.",
    "Reference": "Services incoming multi write calls.",
    "HebCup": "Services incoming multi Write calls."
}
{
    "Origin": "This method creates a mapping from each index source lookup symbol (directly applied to the index)\nto the corresponding probe key Input",
    "Reference": "This method creates a mapping from each index source lookup variable (directly applied to the index)\nto the corresponding probe key Input",
    "HebCup": "This method creates a mapping from each Index Source Lookup Variable (directly applied to the index) to the corresponding probe key Input"
}
{
    "Origin": "Tests resilency when ingress device is down.",
    "Reference": "Tests resiliency when ingress device is down.",
    "HebCup": "Tests resiliency when ingress device is down."
}
{
    "Origin": "Returns an immutable list containing zero elements.",
    "Reference": "Returns an unmodifiable list containing zero elements.",
    "HebCup": "Returns an Unmodifiable list containing zero elements."
}
{
    "Origin": "Maps all index descriptors according to {@link #indexReferenceNoLocking(IndexDescriptor2)}.",
    "Reference": "Maps all index descriptors according to {@link #indexReferenceNoLocking(IndexDescriptor)}.",
    "HebCup": "Maps all index descriptors according to {@link #indexReferenceNoLocking(IndexDescriptor)}."
}
{
    "Origin": "Sets a metadata property for the specified {@link NamespacedEntityId}.",
    "Reference": "Sets a metadata property for the specified {@link MetadataEntity}.",
    "HebCup": "Sets a metadata property for the specified {@link MetadataEntity}."
}
{
    "Origin": "This indicator says if --entity and --defaultSearchResult parameter are visible.",
    "Reference": "This indicator says if --interface and --defaultSearchResult parameter are visible.",
    "HebCup": "This indicator says if --interface and --defaultSearchResult parameter are visible."
}
{
    "Origin": "The input stream should\ncontain an X.509 certificate chain in PEM format.",
    "Reference": "The input stream should\ncontain an X.509 certificate collection in PEM format.",
    "HebCup": "The input stream should contain an X.509 certificate Collection in PEM format."
}
{
    "Origin": "Returns the builder for the settings used for calls to labelAudio.",
    "Reference": "Returns the builder for the settings used for calls to getEvaluation.",
    "HebCup": "Returns the builder for the settings used for calls to GetEvaluation."
}
{
    "Origin": "Calls {@link #executeSqlScript(Context, SQLiteDatabase, String, boolean)} with transactional set to true.",
    "Reference": "Calls {@link #executeSqlScript(Context, Database, String, boolean)} with transactional set to true.",
    "HebCup": "Calls {@link#executeSqlScript (Context, Database, String, boolean)} with transactional set to true."
}
{
    "Origin": "List of group IDs",
    "Reference": "List of user IDs",
    "HebCup": "List of user IDs"
}
{
    "Origin": "Returns the edit groups.",
    "Reference": "Returns the element views.",
    "HebCup": "Returns the Element Views."
}
{
    "Origin": "Set the etag property: The etag property.",
    "Reference": "Set the eTag property: The eTag property.",
    "HebCup": "Set the eTag property: The eTag property."
}
{
    "Origin": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}",
    "Reference": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}",
    "HebCup": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}"
}
{
    "Origin": "Scenario:\n  - CA is only in service trust store, missing from gateway trust store\n  - Gateway does not trust service, as it does not trust CA\n  - Service trusts gateway via CA",
    "Reference": "Scenario:\n  - CA is only in API trust store, missing from gateway trust store\n  - Gateway does not trust API, as it does not trust CA\n  - API trusts gateway via CA",
    "HebCup": "Scenario: - CA is only in Api trust store, missing from gateway trust store - Gateway does not trust Api, as it does not trust CA - Api trusts gateway via CA"
}
{
    "Origin": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubDirectory(String)} ()}",
    "Reference": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubdirectory(String)} ()}",
    "HebCup": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubdirectory (String)} ()}"
}
{
    "Origin": "Set the fileContentType property: Sets the MIME content type of the\nfile.",
    "Reference": "Set the contentType property: Sets the MIME content type of the\nfile.",
    "HebCup": "Set the contentType property: Sets the MIME content type of the file."
}
{
    "Origin": "Calls {@link Plugin#didDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} on\nall the bundled plugins",
    "Reference": "Calls {@link Plugin#afterDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} on\nall the bundled plugins",
    "HebCup": "Calls {@link Plugin#afterDeclareProperty (TypeSpec.Builder, PropertyGenerator, FieldSpec)} on all the bundled plugins"
}
{
    "Origin": "Returns the required Java version of this plugin.",
    "Reference": "Returns the minimumJava version of this plugin.",
    "HebCup": "Returns the Minimum Java Version of this plugin."
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildClient ()}."
}
{
    "Origin": "Alias for {@link Future#of(ExecutorService, CheckedFunction0)}",
    "Reference": "Alias for {@link Future#of(Executor, CheckedFunction0)}",
    "HebCup": "Alias for {@link Future#of(Executor, CheckedFunction0)}"
}
{
    "Origin": "Checks whether the extension of the filename is one of those specified.",
    "Reference": "Checks whether the extension of the fileName is one of those specified.",
    "HebCup": "Checks whether the extension of the fileName is one of those specified."
}
{
    "Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "HebCup": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."
}
{
    "Origin": "Setter for {@link #allowOnlyRequestedMethod}",
    "Reference": "Setter for {@link #allowAllRequestedHeaders}",
    "HebCup": "Setter for {@link#allowAllRequestedHeaders}"
}
{
    "Origin": "Decorates {@link Service}s under the specified directory.",
    "Reference": "Decorates {@link HttpService}s under the specified directory.",
    "HebCup": "Decorates {@link HttpService}s under the specified directory."
}
{
    "Origin": "Any function operating on a {@code *_compiler_t} must offer the basic thread-safety guarantee.",
    "Reference": "Any function operating on a {@code *_context_t} must offer the basic thread-safety guarantee.",
    "HebCup": "Any function operating on a {@code *_context_t} must offer the basic thread-safety guarantee."
}
{
    "Origin": "Also, puts the new names->nodes map in the TsurgeonPattern that called copy.",
    "Reference": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy.",
    "HebCup": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy."
}
{
    "Origin": "For each ChildGlideModule, write an Indexer with an Annotation with the class name.",
    "Reference": "For each LibraryGlideModule, write an Indexer with an Annotation with the class name.",
    "HebCup": "For each libraryGlideModule, write an Indexer with an Annotation with the class name."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method\nwhen no files are consistent.",
    "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method\nwhen no files are consistent.",
    "HebCup": "Tests the {@link FileSystemMaster#checkConsistency (AlluxioURI, CheckConsistencyContext)} method when no files are consistent."
}
{
    "Origin": "Stub of {@link Plugin#didDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses\nto override",
    "Reference": "Stub of {@link Plugin#afterDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses\nto override",
    "HebCup": "Stub of {@link Plugin#afterDeclareGetter (TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to override"
}
{
    "Origin": "Get the fileContentEncoding property: Specifies which content encodings\nhave been applied to the file.",
    "Reference": "Get the contentEncoding property: Specifies which content encodings\nhave been applied to the file.",
    "HebCup": "Get the ContentEncoding property: Specifies which content encodings have been applied to the file."
}
{
    "Origin": "Sets new {@link ISeedingStrategy}.",
    "Reference": "Sets new {@link SeedingStrategy}.",
    "HebCup": "Sets new {@link SeedingStrategy}."
}
{
    "Origin": "Returns an immutable list containing five elements.",
    "Reference": "Returns an unmodifiable list containing five elements.",
    "HebCup": "Returns an Unmodifiable list containing five elements."
}
{
    "Origin": "Returns a task manager services configuration for the tests",
    "Reference": "Returns a configuration for the tests.",
    "HebCup": "Returns a Configuration for the tests"
}
{
    "Origin": "Generates random transaction trits with the provided trytes, trunk and hash.",
    "Reference": "Generates transaction trits with the provided trytes, trunk and hash.",
    "HebCup": "Generates Transaction Trits With the provided trytes, trunk and hash."
}
{
    "Origin": "Scheduler:\n {@code combineLatest} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Gets the name of the associated quorum if any.",
    "Reference": "Gets the name of the associated split brain protection if any.",
    "HebCup": "Gets the name of the associated SplitBrainProtection if any."
}
{
    "Origin": "Sets decryption as succeeded",
    "Reference": "Sets crypto job as succeeded",
    "HebCup": "Sets CryptoJob as succeeded"
}
{
    "Origin": "The configuration is saved under the config name defined by\n{@link QuorumConfig#getName()}.",
    "Reference": "The configuration is saved under the config name defined by\n{@link SplitBrainProtectionConfig#getName()}.",
    "HebCup": "The configuration is saved under the config name defined by {@link SplitBrainProtectionConfig#getName ()}."
}
{
    "Origin": "Sets the {@link Service} and returns the {@link ServerBuilder} that this\n{@link ServiceBindingBuilder} was created from.",
    "Reference": "Sets the {@link HttpService} and returns the {@link ServerBuilder} that this\n{@link ServiceBindingBuilder} was created from.",
    "HebCup": "Sets the {@link HttpService} and returns the {@link ServerBuilder} that this {@link ServiceBindingBuilder} was created from."
}
{
    "Origin": "Aggregate given void publishers into a new {@literal Mono} that will be fulfilled\nwhen all of the given {@literal sources} have been fulfilled.",
    "Reference": "Aggregate given publishers into a new {@literal Mono} that will be fulfilled\nwhen all of the given {@literal sources} have been fulfilled.",
    "HebCup": "Aggregate given ? publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled."
}
{
    "Origin": "Withings API into a list of {@link CaloriesBurned} {@link DataPoint} objects.",
    "Reference": "Withings API into a list of {@link CaloriesBurned1} {@link DataPoint} objects.",
    "HebCup": "Withings API into a list of {@link CaloriesBurned1} {@link DataPoint} objects."
}
{
    "Origin": "Bugsnag.onBreadcrumb(new OnBreadcrumb() {\npublic boolean run(Breadcrumb breadcrumb) {\nreturn false;  ignore the breadcrumb\n}\n})",
    "Reference": "Bugsnag.onBreadcrumb(new OnBreadcrumbCallback() {\npublic boolean run(Breadcrumb breadcrumb) {\nreturn false;  ignore the breadcrumb\n}\n})",
    "HebCup": "Bugsnag.onBreadcrumb (new OnBreadcrumbCallback () {public boolean run (Breadcrumb breadcrumb) {return false; ignore the breadcrumb}})"
}
{
    "Origin": "Returns an immutable map containing nine mappings.",
    "Reference": "Returns an unmodifiable map containing nine mappings.",
    "HebCup": "Returns an Unmodifiable map containing nine mappings."
}
{
    "Origin": "Set Repeated type.",
    "Reference": "Set Time Unit.",
    "HebCup": "set Time Unit."
}
{
    "Origin": "Gets the value of the 'RowKey' field",
    "Reference": "Gets the value of the 'rowKey' field.",
    "HebCup": "Gets the value of the 'rowKey' field"
}
{
    "Origin": "Returns the host address associated with this exception.",
    "Reference": "Returns the host associated with this exception.",
    "HebCup": "Returns the Host associated with this exception."
}
{
    "Origin": "See {@link #begin(TxnMode)} for more details an options.",
    "Reference": "See {@link #begin(TxnType)} for more details an options.",
    "HebCup": "See {@link #begin(TxnType)} for more details an options."
}
{
    "Origin": "If there is no separate publisher ID property defined, this group name\nwill also be used as a WAN publisher ID.",
    "Reference": "If there is no separate publisher ID property defined, this cluster name\nwill also be used as a WAN publisher ID.",
    "HebCup": "If there is no separate publisher ID property defined, this cluster Name will also be used as a WAN publisher ID."
}
{
    "Origin": "Test an {@link Array} used as a FIFO queue.",
    "Reference": "Test an {@link XQArray} used as a FIFO queue.",
    "HebCup": "Test an {@link XQArray} used as a FIFO queue."
}
{
    "Origin": "Get the storage blocks map.",
    "Reference": "Get the buffer blocks map.",
    "HebCup": "Get the buffer Blocks map."
}
{
    "Origin": "Redirects the {@link AarConfiguration} inherited from another repository to point to this one, so that\nthe other repository can be garbage collected.",
    "Reference": "Redirects the {@link RepositoryConfiguration} inherited from another repository to point to this one, so that\nthe other repository can be garbage collected.",
    "HebCup": "Redirects the {@link RepositoryConfiguration} inherited from another repository to point to this one, so that the other repository can be garbage collected."
}
{
    "Origin": "This merges the two objects - {@code this} and the specified time -\nto form an instance of {@code OffsetDateTime}.",
    "Reference": "This merges the two objects - {@code this} and the specified time -\nto form an instance of {@code ZonedDateTime}.",
    "HebCup": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code ZonedDateTime}."
}
{
    "Origin": "Attempts to add an endpoint to the replicas for this datacenter, adding to the endpoints set if successful.",
    "Reference": "Attempts to add an endpoint to the replicas for this datacenter, adding to the replicas set if successful.",
    "HebCup": "Attempts to add an endpoint to the replicas for this datacenter, adding to the replicas set if successful."
}
{
    "Origin": "Adds libraries from the given {@link NativeLinkable}.",
    "Reference": "Adds libraries from the given {@link NativeLinkableGroup}.",
    "HebCup": "Adds libraries from the given {@link NativeLinkableGroup}."
}
{
    "Origin": "See {@link Args#getBlockingExecutor}.",
    "Reference": "See {@link Args#getOffloadExecutor}.",
    "HebCup": "See {@link Args#getOffloadExecutor}."
}
{
    "Origin": "Associates this cache configuration to a quorum.",
    "Reference": "Associates this cache configuration to a split brain protection.",
    "HebCup": "Associates this cache configuration to a quorum."
}
{
    "Origin": "Gets the value of the cycle property.",
    "Reference": "Gets the value of the cycleOption property.",
    "HebCup": "Gets the value of the cycleOption property."
}
{
    "Origin": "If {@code labels = \"abc1234\"}, settings with a label equal to \"abc1234\" are returned.",
    "Reference": "If {@code labelFilter = \"abc1234\"}, settings with a label equal to \"abc1234\" are returned.",
    "HebCup": "If {@code LabelFilter = ``abc1234``}, settings with a label equal to ``abc1234`` are returned."
}
{
    "Origin": "Sets the {@link jodd.madvoc.ActionRequest#nextActionPath(String) next action request} for the chain.",
    "Reference": "Sets the {@link jodd.madvoc.ActionRequest#setNextActionPath(String) next action request} for the chain.",
    "HebCup": "Sets the {@link jodd.madvoc.ActionRequest#setNextActionPath (String) next action request} for the chain."
}
{
    "Origin": "Gets the list of {@link CertificateContact contacts} on this page.",
    "Reference": "Gets the iterable stream of {@link CertificateContact contacts} on this page.",
    "HebCup": "Gets the IterableStream of {@link CertificateContact contacts} on this page."
}
{
    "Origin": "Tests that an MqttConnack packet can be encoded successfully\nwithout throwing any exceptions.",
    "Reference": "Tests that an MqttConnAck packet can be encoded successfully\nwithout throwing any exceptions.",
    "HebCup": "Tests that an mqttConnAck packet can be encoded successfully without throwing any exceptions."
}
{
    "Origin": "Returns true if field jvmType is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field type is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field Type is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "Installs split button mouseover listener.",
    "Reference": "Installs menu button mouseover listener.",
    "HebCup": "Installs menu Button mouseover listener."
}
{
    "Origin": "MessageSourceContact in the supplied list.",
    "Reference": "ComparableEvtObj in the supplied list.",
    "HebCup": "ComparableEvtObj in the supplied list."
}
{
    "Origin": "Once the prefetch is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "Reference": "Once the prepare is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "HebCup": "Once the prepare is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."
}
{
    "Origin": "FilterEvaluator should return {@link Optional#absent()} when the link doesn't match any filters",
    "Reference": "FilterEvaluator should return {@link Optional.empty()} when the link doesn't match any filters",
    "HebCup": "FilterEvaluator should return {@link Optional#empty()} when the link doesn't match any filters"
}
{
    "Origin": "config LoadBalancer factory.",
    "Reference": "config load balancer policy.",
    "HebCup": "config LoadBalancer Policy."
}
{
    "Origin": "The process method which take a MaryData object in parameter, compute the\nfeatures of the utterance referenced in the parameter and return a new",
    "Reference": "The process method which take a Utterance object in parameter, compute the\nfeatures of the utterance referenced in the parameter and return a new",
    "HebCup": "The process method which take a Utterance object in parameter, compute the features of the utterance referenced in the parameter and return a new"
}
{
    "Origin": "Returns an immutable set containing nine elements.",
    "Reference": "Returns an unmodifiable set containing nine elements.",
    "HebCup": "Returns an Unmodifiable set containing nine elements."
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting#string-string}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string}"
}
{
    "Origin": "Reads the MainClass attribute",
    "Reference": "Reads the ModuleMainClass attribute",
    "HebCup": "Reads the ModuleMainClass attribute"
}
{
    "Origin": "The negative of {@code endsNotWith} is {@link #endsWith}.",
    "Reference": "The negative of {@code endsNotWith} is {@link #endingWith}.",
    "HebCup": "The negative of {@code endsNotWith} is {@link#endingWith}."
}
{
    "Origin": "Return {@link SessionResult#RESULT_CODE_SUCCESS} to proceed the command.",
    "Reference": "Return {@link SessionResult#RESULT_SUCCESS} to proceed the command.",
    "HebCup": "Return {@link SessionResult#RESULT_SUCCESS} to proceed the command."
}
{
    "Origin": "Returns the {@link NativeBleDescriptor} for the given UUID in case you need lower-level access.",
    "Reference": "Returns the {@link BleDescriptorWrapper} for the given UUID in case you need lower-level access.",
    "HebCup": "Returns the {@link BleDescriptorWrapper} for the given UUID in case you need lower-level access."
}
{
    "Origin": "Returns a copy of this runtime, with the given authenticator.",
    "Reference": "Returns a copy of this runtime, with the given endpoint authenticator.",
    "HebCup": "Returns a copy of this runtime, with the given authenticator."
}
{
    "Origin": "Setter for {@link #exposeOnlyRequestedHeader}",
    "Reference": "Setter for {@link #allowOnlyRequestedHeader}",
    "HebCup": "Setter for {@link#allowOnlyRequestedHeader}"
}
{
    "Origin": "testFinishBeforeOthers",
    "Reference": "testInitializeTxnBeforeOthers",
    "HebCup": "testInitializeTxnBeforeOthers"
}
{
    "Origin": "Returns the text displayed by the button.",
    "Reference": "Returns the text displayed by the %type%.",
    "HebCup": "Returns the text displayed by the %type%."
}
{
    "Origin": "Tests the {@link FileSystemMaster#mount(AlluxioURI, AlluxioURI, MountOptions)} method.",
    "Reference": "Tests the {@link FileSystemMaster#mount(AlluxioURI, AlluxioURI, MountContext)} method.",
    "HebCup": "Tests the {@link FileSystemMaster#mount (AlluxioURI, AlluxioURI, MountContext)} method."
}
{
    "Origin": "Configures the {@link MessagingExceptionHandler} that should be used to handle any errors that occur in this scope.",
    "Reference": "Configures the {@link FlowExceptionHandler} that should be used to handle any errors that occur in this scope.",
    "HebCup": "Configures the {@link FlowExceptionHandler} that should be used to handle any errors that occur in this scope."
}
{
    "Origin": "This method allows you to specify IterationListeners for this model.",
    "Reference": "This method allows you to specify trainingListeners for this model.",
    "HebCup": "This method allows you to specify TrainingListeners for this model."
}
{
    "Origin": "Returns the selection listener that will be notified.",
    "Reference": "Returns the wakeup listener that will be notified.",
    "HebCup": "Returns the Wakeup Listener that will be notified."
}
{
    "Origin": "If not, then this method adds a\n{@link ExtendedThrowableProxyConverter} instance to the end of the chain.",
    "Reference": "If not, then this method adds a\n{@link ThrowableProxyConverter} instance to the end of the chain.",
    "HebCup": "If not, then this method adds a {@link ThrowableProxyConverter} instance to the end of the chain."
}
{
    "Origin": "Test of npara method, of class BernoulliDistribution.",
    "Reference": "Test of length method, of class BernoulliDistribution.",
    "HebCup": "Test of Length method, of class BernoulliDistribution."
}
{
    "Origin": "Calls\n{@link #getBlockDefinitionsJsonPaths()} and {@link #getBlockExtensions()}.",
    "Reference": "Calls\n{@link #getBlockDefinitionsJsonPaths()} and {@link #configureBlockExtensions()}.",
    "HebCup": "Calls {@link#getBlockDefinitionsJsonPaths ()} and {@link#configureBlockExtensions ()}."
}
{
    "Origin": "Each {@link ExpressionId} should be unique.",
    "Reference": "Each {@link NameId} should be unique.",
    "HebCup": "Each {@link NameId} should be unique."
}
{
    "Origin": "Assert or condition.",
    "Reference": "Assert conditions.",
    "HebCup": "Assert Conditions."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Apply {@link #coerce(String, Type, CNode, DataContext)} method to a collection item.",
    "Reference": "Apply {@link #coerce(String, Type, TreeNode, DataContext)} method to a collection item.",
    "HebCup": "Apply {@link#coerce (String, Type, TreeNode, DataContext)} method to a collection item."
}
{
    "Origin": "See {@link #setPadding(int, int, int, int)}",
    "Reference": "See {@link #setPadding(float, float, float, float)}",
    "HebCup": "See {@link #setPadding(float, float, float, float)}"
}
{
    "Origin": "Gets Java types from Soy type.",
    "Reference": "Gets Java type from Soy type.",
    "HebCup": "Gets Java Type from Soy type."
}
{
    "Origin": "This method get the storeQuery and return the corresponding output and its types.",
    "Reference": "This method get the onDemandQuery and return the corresponding output and its types.",
    "HebCup": "This method get the OnDemandQuery and return the corresponding output and its types."
}
{
    "Origin": "Adds a control metadata.",
    "Reference": "Adds a packet metadata.",
    "HebCup": "Adds a Packet Metadata."
}
{
    "Origin": "Sets the value of the 'KeepDeletedCells' field.",
    "Reference": "Sets the value of the 'keepDeletedCells' field.",
    "HebCup": "Sets the value of the 'keepDeletedCells' field."
}
{
    "Origin": "The address should be parseable by {@link InetAddress#getByName(String)}.",
    "Reference": "The address should be parseable by\n{@link InetAddress#getAllByName(String)}.",
    "HebCup": "The address should be parseable by {@link InetAddress#getAllByName (String)}."
}
{
    "Origin": "If {@code keys = \"abc*\"}, settings with a key starting with \"abc\" are returned.",
    "Reference": "If {@code keyFilter = \"abc*\"}, settings with a key starting with \"abc\" are returned.",
    "HebCup": "If {@code KeyFilter = ``abc*``}, settings with a key starting with ``abc`` are returned."
}
{
    "Origin": "Sets the units of this drug order",
    "Reference": "Sets the doseUnits of this drug order",
    "HebCup": "Sets the doseUnits of this drug order"
}
{
    "Origin": "Set this matrix to the rotation transformation of the given {@link Quaterniond}.",
    "Reference": "Set this matrix to the rotation transformation of the given {@link Quaterniondc}.",
    "HebCup": "Set this matrix to the rotation transformation of the given {@link Quaterniondc}."
}
{
    "Origin": "This method allows you to specify IterationListeners for this model.",
    "Reference": "This method allows you to specify trainingListeners for this model.",
    "HebCup": "This method allows you to specify TrainingListeners for this model."
}
{
    "Origin": "Provide a {@link Mutate} {@link PTransform} to write data to a Cassandra database.",
    "Reference": "Provide a {@link Write} {@link PTransform} to write data to a Cassandra database.",
    "HebCup": "Provide a {@link Write} {@link PTransform} to write data to a Cassandra database."
}
{
    "Origin": "Return the {@link SharedMemory} channel that the Plugin and its\nrelated classes use for outgoing messages to the upstream service.",
    "Reference": "Return the {@link InterProcessCommunication} channel that the Plugin\nand its related classes use for outgoing messages to the upstream\nservice.",
    "HebCup": "Return the {@link InterProcessCommunication} channel that the Plugin and its related classes use for outgoing messages to the upstream service."
}
{
    "Origin": "Creates a default DBScan",
    "Reference": "Creates a default DBSCAN",
    "HebCup": "Creates a default DBSCAN"
}
{
    "Origin": "The factory itself is bound in a per-lookup scope.",
    "Reference": "The supplier itself is bound in a per-lookup scope.",
    "HebCup": "The Supplier itself is bound in a per-lookup scope."
}
{
    "Origin": "Returns a {@link PointerBuffer} view of the {@code data.l} field.",
    "Reference": "Returns a {@link CLongBuffer} view of the {@code data.l} field.",
    "HebCup": "Returns a {@link CLongBuffer} view of the {@code data.l} field."
}
{
    "Origin": "Get the value of reportFormat.",
    "Reference": "Get the value of junitFailOnCVSS.",
    "HebCup": "Get the value of junitFailOnCVSS."
}
{
    "Origin": "Gets the resolution of the bitstream that this instance represents.",
    "Reference": "Gets the height of the bitstream that this instance represents.",
    "HebCup": "Gets the Height of the bitstream that this instance represents."
}
{
    "Origin": "Stub of {@link Plugin#didDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} for subclasses to\noverride",
    "Reference": "Stub of {@link Plugin#afterDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} for subclasses to\noverride",
    "HebCup": "Stub of {@link Plugin#afterDeclareProperty (TypeSpec.Builder, PropertyGenerator, FieldSpec)} for subclasses to override"
}
{
    "Origin": "This is a mutually exclusive option to {@link #samlServiceProvider(ServiceProviderResolver)}",
    "Reference": "This is a mutually exclusive option to {@link #saml2Login(ServiceProviderResolver)}",
    "HebCup": "This is a mutually exclusive option to {@link#saml2Login (ServiceProviderResolver)}"
}
{
    "Origin": "{@value #getExtension()}}",
    "Reference": "{@value #getExtensions()}}",
    "HebCup": "{@value#getExtensions ()}}"
}
{
    "Origin": "Stub of {@link Plugin#willDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses\nto override",
    "Reference": "Stub of {@link Plugin#beforeDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses\nto override",
    "HebCup": "Stub of {@link Plugin#beforeDeclareGetter (TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses to override"
}
{
    "Origin": "Returns a new Coord4D from a ByteBuf.",
    "Reference": "Returns a new Coord4D from a PacketBuffer.",
    "HebCup": "Returns a new Coord4D from a PacketBuffer."
}
{
    "Origin": "Can be used to get the Mimetype",
    "Reference": "Can be used to get the MimeType",
    "HebCup": "Can be used to get the MimeType"
}
{
    "Origin": "Returns the {@link ImageCapture.CaptureMode}.",
    "Reference": "Returns the {@link CaptureMode}.",
    "HebCup": "Returns the {@link CaptureMode}."
}
{
    "Origin": "Invalidates are not allowed more frequently than {@link ControllerLeaderLocator::MILLIS_BETWEEN_INVALIDATE} millis.",
    "Reference": "Invalidates are not allowed more frequently than {@link ControllerLeaderLocator::MIN_INVALIDATE_INTERVAL_MS} millis.",
    "HebCup": "Invalidates are not allowed more frequently than {@link ControllerLeaderLocator::MIN_INVALIDATE_INTERVAL_MS} millis."
}
{
    "Origin": "Retrieves the genre name for this track.",
    "Reference": "Retrieves the genres for this track.",
    "HebCup": "Retrieves the Genres for this track."
}
{
    "Origin": "The meta-property for the {@code price} property.",
    "Reference": "The meta-property for the {@code tradedPrice} property.",
    "HebCup": "The meta-property for the {@code tradedPrice} property."
}
{
    "Origin": "In case the {@code parent} instance manager\nis not specified, the locator will not be parented.",
    "Reference": "In case the {@code parent} injection manager\nis not specified, the locator will not be parented.",
    "HebCup": "In case the {@code parent} Injection Manager is not specified, the locator will not be parented."
}
{
    "Origin": "This method sets the value of the database column m_prj_risk.probalitity",
    "Reference": "This method sets the value of the database column m_prj_risk.probability",
    "HebCup": "This method sets the value of the database column m_prj_risk.Probability"
}
{
    "Origin": "However, since we\ninject the ConstantAnnotationMarker the Annotation proxy types for ahead-of-time allocated\nannotations implement two interfaces.",
    "Reference": "However, since we\ninject the constant-annotation-marker interface the Annotation proxy types for ahead-of-time\nallocated annotations implement two interfaces.",
    "HebCup": "However, since we inject the constantAnnotationMarkerInterface the Annotation proxy types for ahead-of-time allocated annotations implement two interfaces."
}
{
    "Origin": "see {@link InstanceInfo#getDefaultAddress()} for explanation on why the hostname is used as the default address",
    "Reference": "see {@link InstanceInfo#getHostName()} for explanation on why the hostname is used as the default address",
    "HebCup": "see {@link InstanceInfo#getHostName ()} for explanation on why the hostname is used as the default address"
}
{
    "Origin": "The {@link KeyCreateOptions#isEnabled() enabled} field\nis set to true by Azure Key Vault, if not specified.",
    "Reference": "The {@link CreateKeyOptions#isEnabled() enabled} field\nis set to true by Azure Key Vault, if not specified.",
    "HebCup": "The {@link CreateKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Converts a BucketOptions to a DBObject for use by the Java driver.",
    "Reference": "Converts a BucketOptions to a Document for use by the Java driver.",
    "HebCup": "Converts a BucketOptions to a Document for use by the Java driver."
}
{
    "Origin": "Returns the global {@link MeterRegistry} to which components are registered.",
    "Reference": "Returns the global {@link MetricRegistry} to which components are registered.",
    "HebCup": "Returns the global {@link MetricRegistry} to which components are registered."
}
{
    "Origin": "Send request to the server with early blockwise negociation through block2 option.",
    "Reference": "Send request to the server with early blockwise negotiation through block2 option.",
    "HebCup": "Send request to the server with early blockwise Negotiation through block2 option."
}
{
    "Origin": "Create a QuickConnection object from a GuacamoleConfiguration\nand get an ID and place it on the tree, returning the new\nconnection identifier value.",
    "Reference": "Create a SimpleConnection object from a GuacamoleConfiguration\nand get an ID and place it on the tree, returning the new\nconnection identifier value.",
    "HebCup": "Create a SimpleConnection object from a GuacamoleConfiguration and get an ID and place it on the tree, returning the new connection identifier value."
}
{
    "Origin": "{@code EPOCH_MONTH} -",
    "Reference": "{@code PROLEPTIC_MONTH} -",
    "HebCup": "{@code PROLEPTIC_MONTH} -"
}
{
    "Origin": "Sets the value of the 'InMemory' field.",
    "Reference": "Sets the value of the 'inMemory' field.",
    "HebCup": "Sets the value of the 'inMemory' field."
}
{
    "Origin": "Returns an immutable set containing six elements.",
    "Reference": "Returns an unmodifiable set containing six elements.",
    "HebCup": "Returns an Unmodifiable set containing six elements."
}
{
    "Origin": "Send request to the server with early blockwise negociation through block2 option.",
    "Reference": "Send request to the server with early blockwise negotiation through block2 option.",
    "HebCup": "Send request to the server with early blockwise Negotiation through block2 option."
}
{
    "Origin": "Tries to receive up to max_num_msgs_to_receive messages in one go",
    "Reference": "Tries to receive up to max_msgs_to_receive messages in one go",
    "HebCup": "Tries to receive up to max_msgs_to_receive messages in one go"
}
{
    "Origin": "Adds a new tag for the specified {@link NamespacedEntityId}.",
    "Reference": "Adds a new tag for the specified {@link MetadataEntity}.",
    "HebCup": "Adds a new tag for the specified {@link MetadataEntity}."
}
{
    "Origin": "Fetch the given user's list of starred artists",
    "Reference": "Fetch the given user's list of loved artists",
    "HebCup": "Fetch the given user's list of Loved Artists"
}
{
    "Origin": "Receives a PendingEvent and add it as a RecordedEvent in the EventStorage if it is an event type that should be\nrecorded.",
    "Reference": "Receives a PendingEvent and add it as a RecordedEvent in the RecordedEventStore if it is an event type that should be\nrecorded.",
    "HebCup": "Receives a PendingEvent and add it as a RecordedEvent in the RecordedEventStore if it is an event type that should be recorded."
}
{
    "Origin": "For each array in the intersection, get the offsets for this and other.",
    "Reference": "For each sequence in the intersection, get the offsets for this and other.",
    "HebCup": "For each sequence in the intersection, get the offsets for this and other."
}
{
    "Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSettingWithResponse#ConfigurationSetting-boolean}",
    "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSettingWithResponse#ConfigurationSetting-boolean}",
    "HebCup": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSettingWithResponse#ConfigurationSetting-boolean}"
}
{
    "Origin": "Find RAS_Node for specified node id.",
    "Reference": "Find RASNode for specified node id.",
    "HebCup": "Find RasNode for specified node id."
}
{
    "Origin": "Get the names of any classes referenced in the type descriptors of annotation parameters.",
    "Reference": "Find the names of any classes referenced in the type descriptors of annotation parameters.",
    "HebCup": "find the names of any classes referenced in the type descriptors of annotation parameters."
}
{
    "Origin": "Setter for {@link #exposeHeaders}",
    "Reference": "Setter for {@link #exposedHeaders}",
    "HebCup": "Setter for {@link#exposedHeaders}"
}
{
    "Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSetting#string-string-string}",
    "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSetting#string-string-string}",
    "HebCup": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSetting#string-string-string}"
}
{
    "Origin": "Setter for {@link #allowOrigins}",
    "Reference": "Setter for {@link #allowedOrigins}",
    "HebCup": "Setter for {@link#allowedOrigins}"
}
{
    "Origin": "Submits a notification for drawing.",
    "Reference": "Submits a bubble notification for drawing.",
    "HebCup": "Submits a BubbleNotification for drawing."
}
{
    "Origin": "Check if CertConstraintParameters has a trusted match, if it does\ncall next() for any following constraints.",
    "Reference": "Check if ConstraintsParameters has a trusted match, if it does\ncall next() for any following constraints.",
    "HebCup": "Check if ConstraintsParameters has a trusted match, if it does call next () for any following constraints."
}
{
    "Origin": "Returns an instance of a GLSL data type for the given {@link DataType}.",
    "Reference": "Returns an instance of a GLSL data type for the given {@link ShaderVariable}.",
    "HebCup": "Returns an instance of a GLSL data type for the given {@link ShaderVariable}."
}
{
    "Origin": "Handles: DELETE /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}",
    "Reference": "Handles: DELETE /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}",
    "HebCup": "Handles: DELETE /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}"
}
{
    "Origin": "The {@link EcKeyCreateOptions} parameter is required.",
    "Reference": "The {@link CreateEcKeyOptions} parameter is required.",
    "HebCup": "The {@link CreateEcKeyOptions} parameter is required."
}
{
    "Origin": "The list of arrays may not\nbe empty.",
    "Reference": "The list of sequences\nmay not be empty.",
    "HebCup": "The list of sequences may not be empty."
}
{
    "Origin": "Get the Biome for a specified id.",
    "Reference": "Get the GlowBiome for a specified id.",
    "HebCup": "Get the GlowBiome for a specified id."
}
{
    "Origin": "Make sure all resolved targets are instances of {@link NativeLinkable}.",
    "Reference": "Make sure all resolved targets are instances of {@link NativeLinkableGroup}.",
    "HebCup": "Make sure all resolved targets are instances of {@link NativeLinkableGroup}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "when its\nposition becomes known.",
    "Reference": "when its bytecode offset becomes known.",
    "HebCup": "when its bytecodeOffset becomes known."
}
{
    "Origin": "Executes the console script.",
    "Reference": "Executes the webserver script.",
    "HebCup": "Executes the WEBSERVER script."
}
{
    "Origin": "The {@link RsaKeyCreateOptions} is required.",
    "Reference": "The {@link CreateRsaKeyOptions} is required.",
    "HebCup": "The {@link CreateRsaKeyOptions} is required."
}
{
    "Origin": "Initialized adjacency list for graph with n nodes.",
    "Reference": "Initialized adjacency list for graph with numberOfNodes nodes.",
    "HebCup": "Initialized adjacency list for graph with numberOfNodes nodes."
}
{
    "Origin": "Checks whether this option has deprecated keys.",
    "Reference": "Checks whether this option has fallback keys.",
    "HebCup": "Checks whether this option has Fallback Keys."
}
{
    "Origin": "Checks the dirty status of the 'reprUrl' field.",
    "Reference": "Checks the dirty status of the 'headers' field.",
    "HebCup": "Checks the dirty status of the 'Headers' field."
}
{
    "Origin": "Record an {@link ExecutionEvent} for a dynamically registered container\nor test.",
    "Reference": "Record an {@link Event} for a dynamically registered container\nor test.",
    "HebCup": "Record an {@link Event} for a dynamically registered container or test."
}
{
    "Origin": "If {@code keys = \"*\"}, settings with any key are returned.",
    "Reference": "If {@code keyFilter = \"*\"}, settings with any key are returned.",
    "HebCup": "If {@code KeyFilter = ``*``}, settings with any key are returned."
}
{
    "Origin": "Returns the next {@link Query} but does not update the internal {@link Query} iterator.",
    "Reference": "Returns the next {@link PlaylistEntry} but does not update the internal {@link PlaylistEntry}\niterator.",
    "HebCup": "Returns the next {@link PlaylistEntry} but does not update the internal {@link PlaylistEntry} iterator."
}
{
    "Origin": "Returns an immutable list containing an arbitrary number of elements.",
    "Reference": "Returns an unmodifiable list containing an arbitrary number of elements.",
    "HebCup": "Returns an Unmodifiable list containing an arbitrary number of elements."
}
{
    "Origin": "Return a {@link InetSocketAddress} for the remote socket.",
    "Reference": "Return a {@link SocketAddress} for the remote socket.",
    "HebCup": "Return a {@link SocketAddress} for the remote socket."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "See {@link Args#getBlockingExecutor}.",
    "Reference": "See {@link Args#getOffloadExecutor}.",
    "HebCup": "See {@link Args#getOffloadExecutor}."
}
{
    "Origin": "Issue a request with the given {@link Method} to the provided resource URI.",
    "Reference": "Issue a request with the given {@link HttpMethod} to the provided resource URI.",
    "HebCup": "Issue a request with the given {@link HttpMethod} to the provided resource URI."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Go through the list of available clients\nin the queue and call {@link HThriftClient#close()} on each.",
    "Reference": "Go through the list of available clients\nin the queue and call {@link HClient#close()} on each.",
    "HebCup": "Go through the list of available clients in the queue and call {@link HClient#close ()} on each."
}
{
    "Origin": "Warn the events stream that there was a GCM status update.",
    "Reference": "Warn the events stream that there was a push status update.",
    "HebCup": "Warn the events stream that there was a Push status update."
}
{
    "Origin": "Assigns a native mirror object to the given RObject object.",
    "Reference": "Assigns a native mirror object to the given RBaseObject object.",
    "HebCup": "Assigns a native mirror object to the given RBaseObject object."
}
{
    "Origin": "{@link Keys#SKIN_MOISTURE}",
    "Reference": "{@link Keys#DOLPHIN_SKIN_MOISTURE}",
    "HebCup": "{@link Keys#DOLPHIN_SKIN_MOISTURE}"
}
{
    "Origin": "Builds a {@link DiffList} based on the differences appended to this\nbuilder.",
    "Reference": "Builds a {@link DiffResult} based on the differences appended to this\nbuilder.",
    "HebCup": "Builds a {@link DiffResult} based on the differences appended to this builder."
}
{
    "Origin": "Get cache affinity awareness group which is compatible with the mapping.",
    "Reference": "Get cache Partition Awareness group which is compatible with the mapping.",
    "HebCup": "Get Cache Partition Awareness Group which is compatible with the mapping."
}
{
    "Origin": "Test of npara method, of class FDistribution.",
    "Reference": "Test of length method, of class FDistribution.",
    "HebCup": "Test of Length method, of class FDistribution."
}
{
    "Origin": "Getter for {@link #exposeHeaders}",
    "Reference": "Getter for {@link #exposedHeaders}",
    "HebCup": "Getter for {@link#exposedHeaders}"
}
{
    "Origin": "The max idle time is applied to a HTTP request for IO operations and\ndelayed dispatch.",
    "Reference": "The max idle time is applied to an HTTP request for IO operations and\ndelayed dispatch.",
    "HebCup": "The max idle time is applied to an HTTP request for IO operations and delayed dispatch."
}
{
    "Origin": "If {@code labels = null}, settings without any label are returned.",
    "Reference": "If {@code labelFilter = null}, settings without any label are returned.",
    "HebCup": "If {@code LabelFilter = null}, settings without any label are returned."
}
{
    "Origin": "Decode an action profile member to PI action group member.",
    "Reference": "Decode an action profile member to PI action profile member.",
    "HebCup": "Decode an action profile member to Pi Action Profile Member."
}
{
    "Origin": "Creates a {@link PropertyMatcher} to match against a\nslot position.",
    "Reference": "Creates a {@link KeyValueMatcher} to match against a\nslot position.",
    "HebCup": "Creates a {@link KeyValueMatcher} to match against a slot position."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Sets useIndex parameter and returns trainer instance.",
    "Reference": "Sets usingIdx parameter and returns trainer instance.",
    "HebCup": "Sets usingIdx parameter and returns trainer instance."
}
{
    "Origin": "Sets the {@link DrmProvider} to use when handling DRM for media.",
    "Reference": "Sets the {@link MediaDrmCallback} to use when handling DRM for media.",
    "HebCup": "Sets the {@link MediaDrmCallback} to use when handling DRM for media."
}
{
    "Origin": "The generated HotStream is not pausable, for a pausable HotStream @see {@link ReactiveSeq#pausableHotStream(Executor)}.",
    "Reference": "The generated Connectable is not pausable, for a pausable Connectable @see {@link ReactiveSeq#pausableHotStream(Executor)}.",
    "HebCup": "The generated Connectable is not pausable, for a pausable Connectable @see {@link ReactiveSeq#pausableHotStream (Executor)}."
}
{
    "Origin": "If {@code labels = \"*abc*\"}, settings with a label containing \"abc\" are returned.",
    "Reference": "If {@code labelFilter = \"*abc*\"}, settings with a label containing \"abc\" are returned.",
    "HebCup": "If {@code LabelFilter = ``*abc*``}, settings with a label containing ``abc`` are returned."
}
{
    "Origin": "This method returns the value of the database column m_prj_risk.probalitity",
    "Reference": "This method returns the value of the database column m_prj_risk.probability",
    "HebCup": "This method returns the value of the database column m_prj_risk.Probability"
}
{
    "Origin": "Add {@link PathAlterationDetector}s for the given\nroot directory and any nested subdirectories under the root directory to the given\n{@link PathAlterationDetector}.",
    "Reference": "Add {@link PathAlterationObserverScheduler}s for the given\nroot directory and any nested subdirectories under the root directory to the given\n{@link PathAlterationObserverScheduler}.",
    "HebCup": "Add {@link PathAlterationObserverScheduler}s for the given root directory and any nested subdirectories under the root directory to the given {@link PathAlterationObserverScheduler}."
}
{
    "Origin": "The {@link EcKeyCreateOptions#isEnabled()} enabled} field is set to true by Azure Key Vault, if\nnot specified.",
    "Reference": "The {@link CreateEcKeyOptions#isEnabled()} enabled} field is set to true by Azure Key Vault, if\nnot specified.",
    "HebCup": "The {@link CreateEcKeyOptions#isEnabled ()} enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "The prefix includes the first slash in the full filename where applicable.",
    "Reference": "The prefix includes the first slash in the full fileName where applicable.",
    "HebCup": "The prefix includes the first slash in the full fileName where applicable."
}
{
    "Origin": "Getter for {@link #allowOrigins}",
    "Reference": "Getter for {@link #allowedOrigins}",
    "HebCup": "Getter for {@link#allowedOrigins}"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Code snippets for {@link BlobClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,",
    "Reference": "Code snippets for {@link BlobClient#setHttpHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,",
    "HebCup": "Code snippets for {@link BlobClient#setHttpHeadersWithResponse (BlobHttpHeaders, BlobAccessConditions, Duration,"
}
{
    "Origin": "Convert this MapX to a PersistentSetX via the provided transformation function",
    "Reference": "Convert this MapX to a LazySeq via the provided transformation function",
    "HebCup": "Convert this MapX to a LazySeq via the provided transformation function"
}
{
    "Origin": "Sets the ratings entry persistence.",
    "Reference": "Sets the asset entry set like persistence.",
    "HebCup": "Sets the Asset Entry Set Like Persistence."
}
{
    "Origin": "By constrast with {@link Optionals#sequence(CollectionX)} Optional#zero types are\ntolerated and ignored.",
    "Reference": "By constrast with {@link Optionals#sequence(IterableX)} Optional#zero types are\ntolerated and ignored.",
    "HebCup": "By constrast with {@link Optionals#sequence(IterableX)} Optional#zero types are tolerated and ignored."
}
{
    "Origin": "The returned era will be a singleton capable of being compared with the constants\nin {@link ISOChronology} using the {@code ==} operator.",
    "Reference": "The returned era will be a singleton capable of being compared with the constants\nin {@link ISOChrono} using the {@code ==} operator.",
    "HebCup": "The returned era will be a singleton capable of being compared with the constants in {@link ISOChrono} using the {@code ==} operator."
}
{
    "Origin": "Returns the unmodifieable List of configured {@link CmsSearchFieldConfiguration} entries.",
    "Reference": "Returns the unmodifieable List of configured {@link I_CmsSearchFieldConfiguration} entries.",
    "HebCup": "Returns the unmodifieable List of configured {@link I_CmsSearchFieldConfiguration} entries."
}
{
    "Origin": "Set the maximum initialization depth for objects tree.",
    "Reference": "Set the maximum randomization depth for objects tree.",
    "HebCup": "Set the maximum Randomization Depth for objects tree."
}
{
    "Origin": "Converts a DBObject back to a type-safe java object (POJO)",
    "Reference": "Converts a Document back to a type-safe java object (POJO)",
    "HebCup": "Converts a Document back to a type-safe java object (POJO)"
}
{
    "Origin": "Sets the value of the source property.",
    "Reference": "Sets the value of the parameter property.",
    "HebCup": "Sets the value of the Parameter property."
}
{
    "Origin": "Removes a {@link SurfaceConfiguration} from the combination.",
    "Reference": "Removes a {@link SurfaceConfig} from the combination.",
    "HebCup": "Removes a {@link SurfaceConfig} from the combination."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be\noptionally specified.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be\noptionally specified.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeySize () keySize} can be optionally specified."
}
{
    "Origin": "Returns the verb for the access token endpoint (defaults to GET)",
    "Reference": "Returns the verb for the access token endpoint (defaults to POST)",
    "HebCup": "Returns the verb for the access token endpoint (defaults to POST)"
}
{
    "Origin": "Gets connection ID length.",
    "Reference": "Gets connection ID generator.",
    "HebCup": "Gets connection Id Generator."
}
{
    "Origin": "Code snippets for {@link BlobClient#downloadWithResponse(OutputStream, BlobRange, ReliableDownloadOptions,",
    "Reference": "Code snippets for {@link BlobClient#downloadWithResponse(OutputStream, BlobRange, DownloadRetryOptions,",
    "HebCup": "Code snippets for {@link BlobClient#downloadWithResponse (OutputStream, BlobRange, DownloadRetryOptions,"
}
{
    "Origin": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link NamespacedEntityId}.",
    "Reference": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link MetadataEntity}.",
    "HebCup": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link MetadataEntity}."
}
{
    "Origin": "If present this schedule is part of the catalog but not executed",
    "Reference": "If present this task is part of the catalog but not executed",
    "HebCup": "If present this Task is part of the catalog but not executed"
}
{
    "Origin": "This uses {@link ISODateTimeFormat#dateParser()}.",
    "Reference": "This uses {@link ISODateTimeFormat#dateTimeParser()}.",
    "HebCup": "This uses {@link ISODateTimeFormat#dateTimeParser ()}."
}
{
    "Origin": "Returned {@link BrowserResult} will only tell whether the attemp to search was successful.",
    "Reference": "Returned {@link LibraryResult} will only tell whether the attemp to search was successful.",
    "HebCup": "Returned {@link LibraryResult} will only tell whether the attemp to search was successful."
}
{
    "Origin": "The meta-property for the {@code upFrontFee} property.",
    "Reference": "The meta-property for the {@code upfrontFee} property.",
    "HebCup": "The meta-property for the {@code upfrontFee} property."
}
{
    "Origin": "Returns an {@link Operator} that flattens a sequence of\n{@link Observable} into a flat sequence of the items from the",
    "Reference": "Returns an {@link Transformer} that flattens a sequence of\n{@link Observable} into a flat sequence of the items from the",
    "HebCup": "Returns an {@link Transformer} that flattens a sequence of {@link Observable} into a flat sequence of the items from the"
}
{
    "Origin": "Clears the given persisted files stored in {@link #mPersistedFilesInfo}.",
    "Reference": "Clears the given persisted files stored in {@link #mPersistedUfsFingerprints}.",
    "HebCup": "Clears the given persisted files stored in {@link#mPersistedUfsFingerprints}."
}
{
    "Origin": "Creates a {@link NonNullList} of {@link ItemStack}'s with the elements given in the order that they are given.",
    "Reference": "Creates a {@link List} of {@link ItemStack}'s with the elements given in the order that they are given.",
    "HebCup": "Creates a {@link List} of {@link ItemStack}'s with the elements given in the order that they are given."
}
{
    "Origin": "Decorates {@link Service}s under the specified directory.",
    "Reference": "Decorates {@link HttpService}s under the specified directory.",
    "HebCup": "Decorates {@link HttpService}s under the specified directory."
}
{
    "Origin": "Set maximum number of deferred processed application data messages.",
    "Reference": "Set maximum number of deferred processed outgoing application data\nmessages.",
    "HebCup": "Set maximum number of Deferred Processed Outgoing Application Data Messages."
}
{
    "Origin": "Produce the {@link ScriptLoadBalancer} instance to use for this Genie node if it was configured by the user.",
    "Reference": "Produce the {@link ScriptClusterSelector} instance to use for this Genie node if it was configured by the user.",
    "HebCup": "Produce the {@link ScriptClusterSelector} instance to use for this Genie node if it was configured by the user."
}
{
    "Origin": "The {@link EcKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if\nnot specified.",
    "Reference": "The {@link CreateEcKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if\nnot specified.",
    "HebCup": "The {@link CreateEcKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Get the set of default providers registered for the given service provider contract\nin the underlying {@link InstanceManager instance manager} container.",
    "Reference": "Get the set of default providers registered for the given service provider contract\nin the underlying {@link InjectionManager injection manager} container.",
    "HebCup": "Get the set of default providers registered for the given service provider contract in the underlying {@link InjectionManager Injection Manager} container."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Clears the value of the 'publicPort' field",
    "Reference": "Clears the value of the 'publicPorts' field",
    "HebCup": "Clears the value of the 'PublicPorts' field"
}
{
    "Origin": "Create introspection invalid response.",
    "Reference": "Build unauthorized response entity.",
    "HebCup": "build Unauthorized Response Entity."
}
{
    "Origin": "Staff key signature is dynamically computed using the keyShape and the count of\nalteration slices.",
    "Reference": "Staff key signature is dynamically computed using the keyShape and the count of\nalteration roi.",
    "HebCup": "Staff key signature is dynamically computed using the keyShape and the count of alteration roi."
}
{
    "Origin": "Returns the {@link Type} corresponding to the given protocol and number of hosts, if any.",
    "Reference": "Returns the {@link Type} corresponding to the given scheme and number of hosts, if any.",
    "HebCup": "Returns the {@link Type} corresponding to the given scheme and number of hosts, if any."
}
{
    "Origin": "Returns a copy of this CacheSpan with a new file and last access timestamp.",
    "Reference": "Returns a copy of this CacheSpan with a new file and last touch timestamp.",
    "HebCup": "Returns a copy of this CacheSpan with a new File And Last Touch Timestamp."
}
{
    "Origin": "Returns the input stream of this message content.",
    "Reference": "Returns the CachedOutputStream of this message content.",
    "HebCup": "Returns the Cached Output Stream of this message content."
}
{
    "Origin": "Return the data center for which an endpoint resides in",
    "Reference": "Return the data center for which an node resides in",
    "HebCup": "Return the data center for which an Node resides in"
}
{
    "Origin": "Gets the valueText.",
    "Reference": "Gets the value.",
    "HebCup": "Gets the value."
}
{
    "Origin": "Sets the value of the 'InMemory' field",
    "Reference": "Sets the value of the 'inMemory' field.",
    "HebCup": "Sets the value of the 'inMemory' field"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Returns the base section paint.",
    "Reference": "Returns the default section paint.",
    "HebCup": "Returns the Default Section Paint."
}
{
    "Origin": "Waits during {@code timeout} until master pod has a specified {@code expectedRevision}.",
    "Reference": "Waits during {@code timeoutInSec} until master pod has a specified {@code expectedRevision}.",
    "HebCup": "Waits during {@code timeoutInSec} until master pod has a specified {@code expectedRevision}."
}
{
    "Origin": "Runtime.NONE with default values.",
    "Reference": "Starlark.NONE with default values.",
    "HebCup": "Starlark.NONE with default values."
}
{
    "Origin": "Calls {@link Plugin#willDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)}\non all the bundled plugins",
    "Reference": "Calls {@link Plugin#beforeDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)}\non all the bundled plugins",
    "HebCup": "Calls {@link Plugin#beforeDeclareGetter (TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} on all the bundled plugins"
}
{
    "Origin": "You will need to {@link #unregisterScreenOffReceiver() unregister} it\nlater.",
    "Reference": "You will need to\n{@link #unregisterScreenEventsReceiver() unregister} it later.",
    "HebCup": "You will need to {@link #unregisterScreenEventsReceiver() unregister} it later."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubDirectory#String}",
    "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory#String}",
    "HebCup": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory#String}"
}
{
    "Origin": "Traverse all nodes of a PrefsTab and return a\nmapping from PrefsTab to all its Labeled type nodes.",
    "Reference": "Traverse all nodes of a PreferencesTab and return a\nmapping from PreferencesTab to all its Labeled type nodes.",
    "HebCup": "Traverse all nodes of a PreferencesTab and return a mapping from PreferencesTab to all its Labeled type nodes."
}
{
    "Origin": "Set a global \"subscription\" hook to intercept signals produced by the passed\nterminal {@link Subscriber}.",
    "Reference": "Set a global \"subscription\" hook to intercept signals produced by the passed\nterminal {@link CoreSubscriber}.",
    "HebCup": "Set a global ``subscription`` hook to intercept signals produced by the passed terminal {@link CoreSubscriber}."
}
{
    "Origin": "Provides a {@link GoogleCredential} from the service account's JSON key file.",
    "Reference": "Provides a {@link GoogleCredentialsBundle} from the service account's JSON key file.",
    "HebCup": "Provides a {@link GoogleCredentialsBundle} from the service account's JSON key file."
}
{
    "Origin": "Deserializes the previously serialized TokenStream using the provided AttributeSerializer(s).",
    "Reference": "Deserializes the previously serialized TwitterTokenStream using the provided AttributeSerializer(s).",
    "HebCup": "Deserializes the previously serialized TwitterTokenStream using the provided AttributeSerializer (s)."
}
{
    "Origin": "Helper that allows to create {@link LikeNode} without having to instantiate new objects.",
    "Reference": "Helper that allows to create {@link StartsWith} without having to instantiate new objects.",
    "HebCup": "Helper that allows to create {@link StartsWith} without having to instantiate new objects."
}
{
    "Origin": "Sets the value of the securityDescriptor property.",
    "Reference": "Sets the value of the securityDescriptorAttr property.",
    "HebCup": "Sets the value of the SecurityDescriptorAttr property."
}
{
    "Origin": "Returns the ratings entry persistence.",
    "Reference": "Returns the asset entry set like persistence.",
    "HebCup": "Returns the Asset Entry Set Like Persistence."
}
{
    "Origin": "ResolutionException} for exactly the same reasons specified in\n{@code resolveRequires}.",
    "Reference": "ResolutionException} for exactly the same reasons specified in\n{@code resolve}.",
    "HebCup": "ResolutionException} for exactly the same reasons specified in {@code resolve}."
}
{
    "Origin": "Gets the value of the any property.",
    "Reference": "Gets the value of the schemaLanguage property.",
    "HebCup": "Gets the value of the SchemaLanguage property."
}
{
    "Origin": "ID of the OAuth client",
    "Reference": "ID of the OpenID client",
    "HebCup": "ID of the OpenID client"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "To create a {@link DatabaseId} from known name and UUID.",
    "Reference": "To create a {@link NamedDatabaseId} from known name and UUID.",
    "HebCup": "To create a {@link NamedDatabaseId} from known name and UUID."
}
{
    "Origin": "Sets the event index.",
    "Reference": "Sets the event indexes.",
    "HebCup": "Sets the event Indexes."
}
{
    "Origin": "Returns the result of interpreting the object as an instance of 'Plugin Bundle Update Information'.",
    "Reference": "Returns the result of interpreting the object as an instance of 'Plugin Bundle'.",
    "HebCup": "Returns the result of interpreting the object as an instance of 'Plugin Bundle'."
}
{
    "Origin": "Return a scalar {@code Codec} for the given range.",
    "Reference": "Return a scalar {@code Encodec} for the given range.",
    "HebCup": "Return a scalar {@code Encodec} for the given range."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be\noptionally specified.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be\noptionally specified.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeySize () keySize} can be optionally specified."
}
{
    "Origin": "Returns the list of IDs of all the {@link CpuProfiler.TraceInfo} created in the current session, ordered by \"from\" timestamp.",
    "Reference": "Returns the list of IDs of all the {@link Cpu.CpuTraceInfo} created in the current session, ordered by \"from\" timestamp.",
    "HebCup": "Returns the list of IDs of all the {@link Cpu.CpuTraceInfo} created in the current session, ordered by ``from`` timestamp."
}
{
    "Origin": "If there is no separate publisher ID property defined, this group name\nwill also be used as a WAN publisher ID.",
    "Reference": "If there is no separate publisher ID property defined, this cluster name\nwill also be used as a WAN publisher ID.",
    "HebCup": "If there is no separate publisher ID property defined, this cluster Name will also be used as a WAN publisher ID."
}
{
    "Origin": "Returns the selected remote file",
    "Reference": "Returns the selected remote resource",
    "HebCup": "Returns the Selected Remote Resource"
}
{
    "Origin": "Returns the {@link CaptureRequestConfig} for the {@link CaptureStage} object.",
    "Reference": "Returns the {@link CaptureConfig} for the {@link CaptureStage} object.",
    "HebCup": "Returns the {@link CaptureConfig} for the {@link CaptureStage} object."
}
{
    "Origin": "Set the values for some metadata keys on a collection alias.",
    "Reference": "Set the values for some properties keys on a collection alias.",
    "HebCup": "Set the values for some Properties keys on a collection alias."
}
{
    "Origin": "It is a wrapper of readNative to handle InterruptedException.",
    "Reference": "It is a wrapper of readInner to handle InterruptedException.",
    "HebCup": "It is a wrapper of readInner to handle InterruptedException."
}
{
    "Origin": "The writes are done across 2 different instantiations of the same SMRMap.",
    "Reference": "The writes are done across 2 different instantiations of the same CorfuTable.",
    "HebCup": "The writes are done across 2 different instantiations of the same CorfuTable."
}
{
    "Origin": "Creates an audit entry for the 'service published' event.",
    "Reference": "Creates an audit entry for the 'API published' event.",
    "HebCup": "Creates an audit entry for the 'api Published' event."
}
{
    "Origin": "Returns the base section stroke.",
    "Reference": "Returns the default section stroke.",
    "HebCup": "Returns the Default Section stroke."
}
{
    "Origin": "If propogate is true, the wrapped\nstream will also be flushed.",
    "Reference": "If propagate is true, the wrapped\nstream will also be flushed.",
    "HebCup": "If propagate is true, the wrapped stream will also be flushed."
}
{
    "Origin": "Checks if the given name is a legal binary name.",
    "Reference": "Checks if the given name is a legal type name.",
    "HebCup": "Checks if the given name is a legal Type Name."
}
{
    "Origin": "Report all the flocks in the repository.",
    "Reference": "Report all the tribes in the repository.",
    "HebCup": "Report all the Tribes in the repository."
}
{
    "Origin": "Called when there's change in the search result requested by the previous\n{@link MediaBrowser2#search(String, Bundle)}.",
    "Reference": "Called when there's change in the search result requested by the previous\n{@link MediaBrowser2#search(String, LibraryParams)}.",
    "HebCup": "Called when there's change in the search result requested by the previous {@link MediaBrowser2#search (String, LibraryParams)}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Delegates to {@link ServerHttpRequest#getContextPath()}.",
    "Reference": "Delegates to {@link ServerHttpRequest#getPath()}.",
    "HebCup": "Delegates to {@link ServerHttpRequest#getPath ()}."
}
{
    "Origin": "Returns an {@link Operator} that performs commit or rollback of a\ntransaction.",
    "Reference": "Returns an {@link Transformer} that performs commit or rollback of a\ntransaction.",
    "HebCup": "Returns an {@link Transformer} that performs commit or rollback of a transaction."
}
{
    "Origin": "Sets a custom ValueFormatter for all DataSets this data object contains.",
    "Reference": "Sets a custom IValueFormatter for all DataSets this data object contains.",
    "HebCup": "Sets a custom IValueFormatter for all DataSets this data object contains."
}
{
    "Origin": "Gets the units of this drug order",
    "Reference": "Gets the dose units of this drug order",
    "HebCup": "Gets the doseUnits of this drug order"
}
{
    "Origin": "Create store lock checker with lock on a provided path if it exists and writable",
    "Reference": "Create store lock checker with lock on a provided store layout if it exists and writable",
    "HebCup": "Create store lock checker with lock on a provided StoreLayout if it exists and writable"
}
{
    "Origin": "The negative of {@code absent} is {@link #contains}.",
    "Reference": "The negative of {@code absent} is {@link #containing}.",
    "HebCup": "The negative of {@code absent} is {@link#containing}."
}
{
    "Origin": "Saves the muCommander configuration.",
    "Reference": "Saves the muCommander CONFIGURATION.",
    "HebCup": "Saves the muCommander CONFIGURATION."
}
{
    "Origin": "Setter for bookModified property",
    "Reference": "Setter for bookModifiedOrUpgraded property",
    "HebCup": "Setter for bookModifiedOrUpgraded property"
}
{
    "Origin": "An {@link ResolvedSwapLeg} represents the same data as this leg, but with\na complete schedule of dates defined using {@link KnownAmountPaymentPeriod}.",
    "Reference": "An {@link ResolvedSwapLeg} represents the same data as this leg, but with\na complete schedule of dates defined using {@link KnownAmountSwapPaymentPeriod}.",
    "HebCup": "An {@link ResolvedSwapLeg} represents the same data as this leg, but with a complete schedule of dates defined using {@link KnownAmountSwapPaymentPeriod}."
}
{
    "Origin": "Adds an unqualified \"exports dynamic private\" directive to the declaration.",
    "Reference": "Adds an unqualified \"opens\" directive to the declaration.",
    "HebCup": "Adds an unqualified ``opens`` directive to the declaration."
}
{
    "Origin": "Create and display the picture view.",
    "Reference": "Create and display the initial view.",
    "HebCup": "Create and display the Initial View."
}
{
    "Origin": "Set the barline that starts the part.",
    "Reference": "Set the PartBarline that starts the part.",
    "HebCup": "Set the PartBarline that starts the part."
}
{
    "Origin": "Write the property name and values into a StringBuffer",
    "Reference": "Write the property name and values into a StringBuilder",
    "HebCup": "Write the property name and values into a StringBuilder"
}
{
    "Origin": "Gets the contractType.",
    "Reference": "Gets the contractTypes.",
    "HebCup": "Gets the ContractTypes."
}
{
    "Origin": "First construct a map whose key is the endpoint in the GossipDigest and the value is the",
    "Reference": "First construct a map whose key is the node in the GossipDigest and the value is the",
    "HebCup": "First construct a map whose key is the Node in the GossipDigest and the value is the"
}
{
    "Origin": "Returns {@code TokenStream} to tokenize a text.",
    "Reference": "Returns {@code TwitterTokenStream} to tokenize a text.",
    "HebCup": "Returns {@code TwitterTokenStream} to tokenize a text."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Sets the class name remote service.",
    "Reference": "Sets the journal article remote service.",
    "HebCup": "Sets the journal Article remote service."
}
{
    "Origin": "Gets the base name, minus the full path and extension, from a full filename.",
    "Reference": "Gets the base name, minus the full path and extension, from a full fileName.",
    "HebCup": "Gets the base name, minus the full path and extension, from a full filename."
}
{
    "Origin": "If any offset in other is a less than or equal to an offset\nin this, then that offset is an offset for the array in lub.",
    "Reference": "If any offset in other is a less than or equal to an\noffset in this, then that offset is an offset for the sequence in lub.",
    "HebCup": "If any offset in other is a less than or equal to an offset in this, then that offset is an offset for the sequence in lub."
}
{
    "Origin": "Sets the base section stroke.",
    "Reference": "Sets the default section stroke.",
    "HebCup": "Sets the Default Section stroke."
}
{
    "Origin": "- Mutual trust exists between gateway and service\n  - We must use the `gateway2` cert NOT `gateway`.",
    "Reference": "- Mutual trust exists between gateway and API\n  - We must use the `gateway2` cert NOT `gateway`.",
    "HebCup": "- Mutual trust exists between gateway and Api - We must use the `gateway2` cert NOT `gateway`."
}
{
    "Origin": "Create a new {@link MergedAnnotation} instance from the specified\nannotation type.",
    "Reference": "Create a new {@link MergedAnnotation} instance of the specified\nannotation type.",
    "HebCup": "Create a new {@link MergedAnnotation} instance of the specified annotation type."
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Scheduler.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Executor.",
    "HebCup": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor."
}
{
    "Origin": "Also @see {@link Future#accumulate(CollectionX, Reducer)} if you would like a failure to result in a Future\nwith an error",
    "Reference": "Also @see {@link Future#accumulate(IterableX, Reducer)} if you would like a failure to result in a Future\nwith an error",
    "HebCup": "Also @see {@link Future#accumulate(IterableX, Reducer)} if you would like a failure to result in a Future with an error"
}
{
    "Origin": "Adds a new tag for the specified {@link NamespacedEntityId}.",
    "Reference": "Adds a new tag for the specified {@link MetadataEntity}.",
    "HebCup": "Adds a new tag for the specified {@link MetadataEntity}."
}
{
    "Origin": "Sets a new ShapeRenderer responsible for drawing this DataSet.",
    "Reference": "Sets a new IShapeRenderer responsible for drawing this DataSet.",
    "HebCup": "Sets a new IShapeRenderer responsible for drawing this DataSet."
}
{
    "Origin": "Receives a {@link ViewIdInfo} and returns the name of the View class that is implied by it.",
    "Reference": "Receives a {@link ViewIdData} and returns the name of the View class that is implied by it.",
    "HebCup": "Receives a {@link ViewIdData} and returns the name of the View class that is implied by it."
}
{
    "Origin": "Removes all metadata (including properties and tags) for the specified {@link NamespacedEntityId}.",
    "Reference": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}.",
    "HebCup": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}."
}
{
    "Origin": "Sets the value of the cryptAlgorithmSid property.",
    "Reference": "Sets the value of the hashValue property.",
    "HebCup": "Sets the value of the HashValue property."
}
{
    "Origin": "Returns {@link InstanceManager} relevant to current application.",
    "Reference": "Returns {@link InjectionManager} relevant to current application.",
    "HebCup": "Returns {@link InjectionManager} relevant to current application."
}
{
    "Origin": "Gets the value of the sid attribute of the\nconference-info element.",
    "Reference": "Gets the value of the entity attribute of the\nconference-info element.",
    "HebCup": "Gets the value of the Entity attribute of the conference-info element."
}
{
    "Origin": "retrieve / build the crawlspecification for the given arguments.",
    "Reference": "retrieve / build the CrawljaxConfiguration for the given arguments.",
    "HebCup": "retrieve / build the CrawljaxConfiguration for the given arguments."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHTTPHeaders#BlobHttpHeaders}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders#BlobHttpHeaders}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders#BlobHttpHeaders}"
}
{
    "Origin": "Send request to the server with early blockwise negociation through block2 option.",
    "Reference": "Send request to the server with early blockwise negotiation through block2 option.",
    "HebCup": "Send request to the server with early blockwise Negotiation through block2 option."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSetting#String-String-String}",
    "Reference": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting#String-String-String}",
    "HebCup": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting#String-String-String}"
}
{
    "Origin": "KeyCreateOptions#getNotBefore() notBefore} values are optional.",
    "Reference": "CreateKeyOptions#getNotBefore() notBefore} values are optional.",
    "HebCup": "CreateKeyOptions#getNotBefore () notBefore} values are optional."
}
{
    "Origin": "Returns a new TokenStream which provides the same\noutput as the original TokenStream.",
    "Reference": "Returns a new TwitterTokenStream which provides the same\noutput as the original TwitterTokenStream.",
    "HebCup": "Returns a new TwitterTokenStream which provides the same output as the original TwitterTokenStream."
}
{
    "Origin": "Query this inventory for inventories matching the supplied {@link PropertyMatcher}.",
    "Reference": "Query this inventory for inventories matching\nthe supplied {@link KeyValueMatcher}.",
    "HebCup": "Query this inventory for inventories matching the supplied {@link KeyValueMatcher}."
}
{
    "Origin": "Construct a {@link AggregationExceptions#TYPE_KEEP_SEPARATE} ContentProviderOperation.",
    "Reference": "Construct a {@link AggregationExceptions#TYPE_AUTOMATIC} ContentProviderOperation.",
    "HebCup": "Construct a {@link AggregationExceptions#TYPE_AUTOMATIC} ContentProviderOperation."
}
{
    "Origin": "{@link Keys#ARMOR_STAND_MARKER}",
    "Reference": "{@link Keys#ARMOR_STAND_HAS_MARKER}",
    "HebCup": "{@link Keys#ARMOR_STAND_HAS_MARKER}"
}
{
    "Origin": "This helps live testing against specific zones only.",
    "Reference": "This helps live testing against specific regions only.",
    "HebCup": "This helps live testing against specific Regions only."
}
{
    "Origin": "Decode an action profile group with members information to a PI action\ngroup.",
    "Reference": "Decode an action profile group with members information to a PI action\nprofile group.",
    "HebCup": "Decode an action profile group with members information to a Pi Action Profile Group."
}
{
    "Origin": "Generates an instance of {@link OpenedObject} for which the underlying stream may be re-opened and retried\nbased on the exception and retry condition.",
    "Reference": "Generates an instance of {@link OpenObject} for which the underlying stream may be re-opened and retried\nbased on the exception and retry condition.",
    "HebCup": "Generates an instance of {@link OpenObject} for which the underlying stream may be re-opened and retried based on the exception and retry condition."
}
{
    "Origin": "See {@link MetricType}.",
    "Reference": "See {@link MetricAttribute}.",
    "HebCup": "See {@link MetricAttribute}."
}
{
    "Origin": "Get the scrService Object associated with this instance of",
    "Reference": "Get the ServiceComponentRuntime Object associated with this instance of",
    "HebCup": "Get the ServiceComponentRuntime Object associated with this instance of"
}
{
    "Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.",
    "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.",
    "HebCup": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS."
}
{
    "Origin": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathOptions)}\nmethod for creating a file.",
    "Reference": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathContext)}\nmethod for creating a file.",
    "HebCup": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathContext)} method for creating a file."
}
{
    "Origin": "Gets the modelId.",
    "Reference": "Gets the model.",
    "HebCup": "Gets the model."
}
{
    "Origin": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubDirectory(String)}",
    "Reference": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectory(String)}",
    "HebCup": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectory (String)}"
}
{
    "Origin": "Converts an {@link IntIntOpenHashMap} into a flat int [] array.",
    "Reference": "Converts an {@link IntIntHashMap} into a flat int [] array.",
    "HebCup": "Converts an {@link IntIntHashMap} into a flat int [] array."
}
{
    "Origin": "Return a Protobuf OpenIETriple from a RelationTriple.",
    "Reference": "Return a Protobuf RelationTriple from a RelationTriple.",
    "HebCup": "Return a Protobuf RelationTriple from a RelationTriple."
}
{
    "Origin": "decode the {@link com.mongodb.DBObject} and provide the corresponding java (type-safe) object",
    "Reference": "decode the {@link com.mongodb.Document} and provide the corresponding java (type-safe) object",
    "HebCup": "decode the {@link com.mongodb.Document} and provide the corresponding java (type-safe) object"
}
{
    "Origin": "Returns an immutable copy of {@code graph}.",
    "Reference": "Returns an immutable copy of {@code network}.",
    "HebCup": "Returns an immutable copy of {@code network}."
}
{
    "Origin": "Return the current starting address.",
    "Reference": "Return the current head segment.",
    "HebCup": "Return the current head Segment."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Returns the value of the node as a string, or the specified undefined value if the node is undefined.",
    "Reference": "Returns the value of the node as a string, or the specified default value if the node is undefined.",
    "HebCup": "Returns the value of the node as a string, or the specified default Value if the node is undefined."
}
{
    "Origin": "Edits existing configuration schema.",
    "Reference": "Edits existing notification schema.",
    "HebCup": "Edits existing Notification Schema."
}
{
    "Origin": "Creates a {@code For}-comprehension of one Iterable.",
    "Reference": "Creates a {@code For}-comprehension of one Option.",
    "HebCup": "Creates a {@code For}-comprehension of one Option."
}
{
    "Origin": "Returns a number that encodes how contents of the arrangement are aligned horizontally.",
    "Reference": "Returns a number that encodes how contents of the %type% are aligned horizontally.",
    "HebCup": "Returns a number that encodes how contents of the %type% are aligned horizontally."
}
{
    "Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.",
    "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.",
    "HebCup": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS."
}
{
    "Origin": "Initialized from {@link Command#synopsisSubcommands()}, {@code \"[COMMANDS]\"} by default.",
    "Reference": "Initialized from {@link Command#synopsisSubcommandLabel()}, {@code \"[COMMANDS]\"} by default.",
    "HebCup": "Initialized from {@link Command#synopsisSubcommandLabel()}, {@code ``[COMMANDS]``} by default."
}
{
    "Origin": "Create client response filtering stage using the service locator.",
    "Reference": "Create client response filtering stage using the instance manager.",
    "HebCup": "Create client response filtering stage using the Instance Manager."
}
{
    "Origin": "This sets up a PoolingDataSource.",
    "Reference": "This sets up a PoolingDataSourceWrapper.",
    "HebCup": "This sets up a PoolingDataSourceWrapper."
}
{
    "Origin": "Sets the connection state listener decorator.",
    "Reference": "Sets the connection state listener manager factory.",
    "HebCup": "Sets the connection State Listener Manager Factory."
}
{
    "Origin": "This method behaves like {@code createObjectFromNewClassLoader(ClassLoader.getSystemClassLoader())}.",
    "Reference": "This method behaves like {@code createSerializableObjectFromNewClassLoader(ClassLoader.getSystemClassLoader())}.",
    "HebCup": "This method behaves like {@code createSerializableObjectFromNewClassLoader (ClassLoader.getSystemClassLoader ())}."
}
{
    "Origin": "Once the prefetch is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "Reference": "Once the prepare is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "HebCup": "Once the prepare is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."
}
{
    "Origin": "Default: true",
    "Reference": "Default: false",
    "HebCup": "Default: false"
}
{
    "Origin": "Return a HotStream that will skip emitting data when the first connecting Stream connects.",
    "Reference": "Return a Connectable that will skip emitting data when the first connecting Stream connects.",
    "HebCup": "Return a Connectable that will skip emitting data when the first connecting Stream connects."
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Gets the service synchronously.",
    "Reference": "Gets the api synchronously.",
    "HebCup": "Gets the Api synchronously."
}
{
    "Origin": "Sets the connection ID length.",
    "Reference": "Sets the connection id generator.",
    "HebCup": "Sets the connection Id Generator."
}
{
    "Origin": "Overload of {@link #connect(String, ServerStateListener, ServerConnectionFailListener)} with only one listener.",
    "Reference": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with only one listener.",
    "HebCup": "Overload of {@link#connect (String, ServerStateListener, ServerReconnectFilter)} with only one listener."
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix.",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix.",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix."
}
{
    "Origin": "Extracts the underlying quotes from the {@link CurveInputs} instances and returns them in a map.",
    "Reference": "Extracts the underlying quotes from the {@link RatesCurveInputs} instances and returns them in a map.",
    "HebCup": "Extracts the underlying quotes from the {@link RatesCurveInputs} instances and returns them in a map."
}
{
    "Origin": "Configure binders in the instance manager and enable JAX-RS features.",
    "Reference": "Configure binders in the injection manager and enable JAX-RS features.",
    "HebCup": "Configure binders in the Injection Manager and enable JAX-RS features."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Determines whether the given user can read the permissions currently\ngranted to the given target user.",
    "Reference": "Determines whether the given user can read the permissions currently\ngranted to the given target entity.",
    "HebCup": "Determines whether the given user can read the permissions currently granted to the given target Entity."
}
{
    "Origin": "This indicator says if --interface parameter is visible.",
    "Reference": "This indicator says if --entity parameter is visible.",
    "HebCup": "This indicator says if --entity parameter is visible."
}
{
    "Origin": "Standard setter for the leftwardlabel String in this Relationship",
    "Reference": "Standard setter for the leftwardValue String in this Relationship",
    "HebCup": "Standard setter for the leftwardValue String in this Relationship"
}
{
    "Origin": "In order to set the matrix to a rotation transformation without pre-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without pre-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Tests if this string ends with any specified suffixes.",
    "Reference": "Tests if this CharSequence ends with any specified suffixes.",
    "HebCup": "Tests if this CharSequence ends with any specified suffixes."
}
{
    "Origin": "Creates an audit entry for the 'service retired' event.",
    "Reference": "Creates an audit entry for the 'API retired' event.",
    "HebCup": "Creates an audit entry for the 'api Retired' event."
}
{
    "Origin": "Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}.",
    "Reference": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}.",
    "HebCup": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}."
}
{
    "Origin": "Gets the value of the 'BloomFilter' field.",
    "Reference": "Gets the value of the 'bloomFilter' field.",
    "HebCup": "Gets the value of the 'bloomFilter' field."
}
{
    "Origin": "This method is just a wrapper around {@link InternalUtils#symbol(Tree)}, but this class\nmight be the first place someone looks for this functionality.",
    "Reference": "This method is just a wrapper around {@link TreeUtils#symbol(Tree)}, but this class might\nbe the first place someone looks for this functionality.",
    "HebCup": "This method is just a wrapper around {@link TreeUtils#symbol (Tree)}, but this class might be the first place someone looks for this functionality."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Build one {@link CharacterRunAutomaton} matching any term the query might match.",
    "Reference": "Build one {@link CharArrayMatcher} matching any term the query might match.",
    "HebCup": "Build one {@link CharArrayMatcher} matching any term the query might match."
}
{
    "Origin": "Creates an exception from an service id.",
    "Reference": "Creates an exception from an API id.",
    "HebCup": "Creates an exception from an api Id."
}
{
    "Origin": "Tests the specifying heap memory with config default value for job manager and task manager.",
    "Reference": "Tests the specifying job manager heap memory with config default value for job manager and task manager.",
    "HebCup": "Tests the specifying Job Manager Heap Memory with config default value for job manager and task manager."
}
{
    "Origin": "ServerBuilder.service(ServiceWithRoutes)} to mount all service paths\nwithout interfering with other services.",
    "Reference": "ServerBuilder.service(HttpServiceWithRoutes)} to mount all service paths\nwithout interfering with other services.",
    "HebCup": "ServerBuilder.service(HttpServiceWithRoutes)} to mount all service paths without interfering with other services."
}
{
    "Origin": "The default implementation delegates to {@link #process(BaseEvent)} and will:",
    "Reference": "The default implementation delegates to {@link #process(CoreEvent)} and will:",
    "HebCup": "The default implementation delegates to {@link #process(CoreEvent)} and will:"
}
{
    "Origin": "The {@link EcKeyCreateOptions} parameter is required.",
    "Reference": "The {@link CreateEcKeyOptions} parameter is required.",
    "HebCup": "The {@link CreateEcKeyOptions} parameter is required."
}
{
    "Origin": "Shortcut for {@link #create(String, String, ModelType, String, Boolean)}",
    "Reference": "Shortcut for {@link #create(String, String, ModelType, String, boolean)}",
    "HebCup": "Shortcut for {@link#create (String, String, ModelType, String, boolean)}"
}
{
    "Origin": "Calls {@link Plugin#willDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)}\non all the bundled plugins",
    "Reference": "Calls {@link Plugin#beforeDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)}\non all the bundled plugins",
    "HebCup": "Calls {@link Plugin#beforeDeclareSetter (TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} on all the bundled plugins"
}
{
    "Origin": "Gets the current data source from this DataCommunicator.",
    "Reference": "Gets the current data provider from this DataCommunicator.",
    "HebCup": "Gets the current Data Provider from this DataCommunicator."
}
{
    "Origin": "For data\npolicies not supported by management rest api (for example, NORMAL and PRELOADED)\nit will show as UNSUPPORTED",
    "Reference": "For data\npolicies not supported by management rest api (for example, NORMAL and PRELOADED)\nit will show as LEGACY",
    "HebCup": "For data policies not supported by management rest api (for example, NORMAL and PRELOADED) it will show as LEGACY"
}
{
    "Origin": "Returns the quorum name for lock operations.",
    "Reference": "Returns the split brain protection name for lock operations.",
    "HebCup": "Returns the split Brain Protection Name for lock operations."
}
{
    "Origin": "Clear updates not committed in the session",
    "Reference": "Rollback updates not committed in the session",
    "HebCup": "rollback updates not committed in the session"
}
{
    "Origin": "Use {@link #makeNaiveMatrix()} if\nyou want to perform further updates.",
    "Reference": "Use {@link #makePopulationMatrix()} if\nyou want to perform further updates.",
    "HebCup": "Use {@link #makePopulationMatrix()} if you want to perform further updates."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Tests the functionality of copyTo.",
    "Reference": "Tests the functionality of copyTo(array).",
    "HebCup": "Tests the functionality of CopyToArray."
}
{
    "Origin": "Returns an immutable map containing five mappings.",
    "Reference": "Returns an unmodifiable map containing five mappings.",
    "HebCup": "Returns an Unmodifiable map containing five mappings."
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSettingWithResponse#ConfigurationSetting-boolean-Context}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteConfigurationSettingWithResponse#ConfigurationSetting-boolean-Context}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteConfigurationSettingWithResponse#ConfigurationSetting-boolean-Context}"
}
{
    "Origin": "Also includes db:output() and fn:put().",
    "Reference": "Also includes update:output() and fn:put().",
    "HebCup": "Also includes update:output() and fn:put()."
}
{
    "Origin": "Set the Date that this Token expires",
    "Reference": "Set the ZonedDateTime that this Token expires",
    "HebCup": "Set the ZonedDateTime that this Token expires"
}
{
    "Origin": "Adds the specified column which will not be serialized.",
    "Reference": "Adds the specified columns which will not be serialized.",
    "HebCup": "Adds the specified Columns which will not be serialized."
}
{
    "Origin": "Gets on tier percentage.",
    "Reference": "Gets on-tier percentages.",
    "HebCup": "Gets On Tier Percentages."
}
{
    "Origin": "Generic setter for the virtualMetadataPopularConfiguration property of this class",
    "Reference": "Generic setter for the virtualMetadataConfiguration property of this class",
    "HebCup": "Generic setter for the VirtualMetadataConfiguration property of this class"
}
{
    "Origin": "Sets the servers resolved by name resolution.",
    "Reference": "Sets the addresses resolved by name resolution.",
    "HebCup": "Sets the Addresses resolved by name resolution."
}
{
    "Origin": "Set isManualImport.",
    "Reference": "Set IsManualImport.",
    "HebCup": "Set IsManualImport."
}
{
    "Origin": "Returns the object with the settings used for calls to labelAudio.",
    "Reference": "Returns the object with the settings used for calls to listEvaluationJobs.",
    "HebCup": "Returns the object with the settings used for calls to ListEvaluationJobs."
}
{
    "Origin": "Creates and returns a new {@link TitanVertexProperty} for the given key on this vertex with the specified\nobject being the value.",
    "Reference": "Creates and returns a new {@link JanusGraphVertexProperty} for the given key on this vertex with the specified\nobject being the value.",
    "HebCup": "Creates and returns a new {@link JanusGraphVertexProperty} for the given key on this vertex with the specified object being the value."
}
{
    "Origin": "Converts an entity to a DBObject",
    "Reference": "Converts an entity to a Document",
    "HebCup": "Converts an entity to a Document"
}
{
    "Origin": "If not explicitly configured, this is the default value of\n{@link CheckpointingOptions#FS_BUFFER_SIZE}.",
    "Reference": "If not explicitly configured, this is the default value of\n{@link CheckpointingOptions#FS_WRITE_BUFFER_SIZE}.",
    "HebCup": "If not explicitly configured, this is the default value of {@link CheckpointingOptions#FS_WRITE_BUFFER_SIZE}."
}
{
    "Origin": "Getter of publicationDateMax.",
    "Reference": "Getter of publicationDateMin.",
    "HebCup": "Getter of publicationDateMin."
}
{
    "Origin": "Check if CertConstraintParameters has a trusted match, if it does\ncall next() for any following constraints.",
    "Reference": "Check if ConstraintsParameters has a trusted match, if it does\ncall next() for any following constraints.",
    "HebCup": "Check if ConstraintsParameters has a trusted match, if it does call next () for any following constraints."
}
{
    "Origin": "If the prefetch is not needed, {@link #playFromMediaId} can be directly called\nwithout this method.",
    "Reference": "If the prepare is not needed, {@link #playFromMediaId} can be directly called\nwithout this method.",
    "HebCup": "If the prepare is not needed, {@link#playFromMediaId} can be directly called without this method."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Waits during {@code timeout} until specified {@code element} does not contain the specified\n{@code expectedText}.",
    "Reference": "Waits during {@code timeout} until specified {@code element} does not contain the specified\n{@code absentText}.",
    "HebCup": "Waits during {@code timeout} until specified {@code element} does not contain the specified {@code absentText}."
}
{
    "Origin": "Returns {@code true} if the given name is a legal binary name.",
    "Reference": "Returns {@code true} if the given name is a legal type name.",
    "HebCup": "Returns {@code true} if the given name is a legal Type Name."
}
{
    "Origin": "Set the Date that this Token was Created",
    "Reference": "Set the ZonedDateTime that this Token was Created",
    "HebCup": "Set the ZonedDateTime that this Token was Created"
}
{
    "Origin": "Publish Config mapped to the given key under the {@link #DEFAULT_GROUP default group}",
    "Reference": "Publish Config mapped to the given key under the {@link #getDefaultGroup() default group}",
    "HebCup": "Publish Config mapped to the given key under the {@link #getDefaultGroup default group}"
}
{
    "Origin": "During the prefetch, a session should not hold audio focus in order to allow\nother sessions play seamlessly.",
    "Reference": "During the prepare, a session should not hold audio focus in order to allow\nother sessions play seamlessly.",
    "HebCup": "During the Prepare, a session should not hold audio focus in order to allow other sessions play seamlessly."
}
{
    "Origin": "Create optimized insert value.",
    "Reference": "Create insert value.",
    "HebCup": "create Insert Value."
}
{
    "Origin": "Process double drops & XP gain for Mining.",
    "Reference": "Process double drops & XP gain for miningBehaviour.",
    "HebCup": "Process double drops & XP gain for Mining."
}
{
    "Origin": "Returns true if field sessionKey is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field sessionId is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field SessionId is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "Assigns the actorType.",
    "Reference": "Assigns the factory.",
    "HebCup": "Assigns the factory."
}
{
    "Origin": "Returns all pending tasks that are still not completed.",
    "Reference": "Returns all continuous tasks that are still not completed.",
    "HebCup": "Returns all continuous Tasks that are still not completed."
}
{
    "Origin": "Gets the exampleText.",
    "Reference": "Gets the text.",
    "HebCup": "Gets the text."
}
{
    "Origin": "Run all tests with given executor.",
    "Reference": "Run all tests with given runner.",
    "HebCup": "Run all tests with given runner."
}
{
    "Origin": "Accumulate lefts into a LinkedListX (extended Persistent List) and Right with the supplied combiner function",
    "Reference": "Accumulate lefts into a LazySeq (extended Persistent List) and Right with the supplied combiner function",
    "HebCup": "Accumulate lefts into a LazySeq (extended Persistent List) and Right with the supplied combiner function"
}
{
    "Origin": "For example, if the entire chart area is visible, this\nis simply the current size of {@link #contentRectMinusAllMargins}.",
    "Reference": "For example, if the entire chart area is visible, this\nis simply the current size of {@link #contentRect}.",
    "HebCup": "For example, if the entire chart area is visible, this is simply the current size of {@link#contentRect}."
}
{
    "Origin": "Adds the given Certificate to the certificateStore, if not yet containing.",
    "Reference": "Adds the given Certificate to the certificatesMap, if not yet containing.",
    "HebCup": "Adds the given Certificate to the certificatesMap, if not yet containing."
}
{
    "Origin": "Removes the specified tags from the {@link NamespacedEntityId}",
    "Reference": "Removes the specified tags from the {@link MetadataEntity}",
    "HebCup": "Removes the specified tags from the {@link MetadataEntity}"
}
{
    "Origin": "Returns the annotation mirror as specified by the \"qualifier\" element in {@code\nqualifierAnno}.",
    "Reference": "Returns the annotation mirror as specified by the \"qualifier\" element in {@code\ncontractAnno}.",
    "HebCup": "Returns the annotation mirror as specified by the ``qualifier`` element in {@code contractAnno}."
}
{
    "Origin": "Set the value of statusAfter, used in parameter comment.",
    "Reference": "Set the value of clusterstatus, used in parameter comment.",
    "HebCup": "Set the value of clusterstatus, used in parameter comment."
}
{
    "Origin": "Load a {@link JobDirectoryManifest} from a {@link AgentManifestMessage}.",
    "Reference": "Load a {@link DirectoryManifest} from a {@link AgentManifestMessage}.",
    "HebCup": "Load a {@link DirectoryManifest} from a {@link AgentManifestMessage}."
}
{
    "Origin": "A failure to parse will return {@link NoopDnsServerAddressStreamProvider}.",
    "Reference": "A failure to parse will return {@link DefaultDnsServerAddressStreamProvider}.",
    "HebCup": "A failure to parse will return {@link DefaultDnsServerAddressStreamProvider}."
}
{
    "Origin": "The classpath.",
    "Reference": "The build classpath.",
    "HebCup": "The classpath."
}
{
    "Origin": "Map treatment to set_vlan action.",
    "Reference": "Map treatment to permit action.",
    "HebCup": "Map treatment to PERMIT action."
}
{
    "Origin": "Finds all constraint annotations defined for the given class and returns them in a list of\nconstraint descriptors.",
    "Reference": "Finds all constraint annotations defined for the given constrainable and returns them in a list of constraint\ndescriptors.",
    "HebCup": "Finds all constraint annotations defined for the given Constrainable and returns them in a list of constraint descriptors."
}
{
    "Origin": "Sets the scrService Object for this ScrActionSupport instance.",
    "Reference": "Sets the ServiceComponentRuntime Object for this ScrActionSupport instance.",
    "HebCup": "Sets the ServiceComponentRuntime Object for this ScrActionSupport instance."
}
{
    "Origin": "Returns the value of the {@code bitfield} field.",
    "Reference": "Returns the value of the {@code baselineUsesContext} field.",
    "HebCup": "Returns the value of the {@code baselineUsesContext} field."
}
{
    "Origin": "Sends the specified sequence number to the channel.",
    "Reference": "Sends the specified sequence to the channel.",
    "HebCup": "Sends the specified Sequence to the channel."
}
{
    "Origin": "This is why there is not a set method for the category property.",
    "Reference": "This is why there is not a set method for the item property.",
    "HebCup": "This is why there is not a set method for the Item property."
}
{
    "Origin": "Code snippets for {@link BlobClient#setHTTPHeadersWithResponse(BlobHTTPHeaders, BlobAccessConditions, Duration,",
    "Reference": "Code snippets for {@link BlobClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,",
    "HebCup": "Code snippets for {@link BlobClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,"
}
{
    "Origin": "Note this method creates a HotStream that starts emitting data\nimmediately.",
    "Reference": "Note this method creates a Connectable that starts emitting data\nimmediately.",
    "HebCup": "Note this method creates a Connectable that starts emitting data immediately."
}
{
    "Origin": "Test affinity awareness partition distributions cache size property.",
    "Reference": "Test Partition Awareness partition distributions cache size property.",
    "HebCup": "test Partition Awareness Partition Distributions Cache Size Property."
}
{
    "Origin": "Test of var method, of class Beta.",
    "Reference": "Test of variance method, of class Beta.",
    "HebCup": "Test of Variance method, of class Beta."
}
{
    "Origin": "The {@link KeyCreateOptions} is required.",
    "Reference": "The {@link CreateKeyOptions} is required.",
    "HebCup": "The {@link CreateKeyOptions} is required."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Create a list of {@link FileMediaItem2} for testing purpose.",
    "Reference": "Create a list of {@link FileMediaItem} for testing purpose.",
    "HebCup": "Create a list of {@link FileMediaItem} for testing purpose."
}
{
    "Origin": "This method ADDS additional IterationListener to existing listeners",
    "Reference": "This method ADDS additional TrainingListener to existing listeners",
    "HebCup": "This method ADDS additional TrainingListener to existing listeners"
}
{
    "Origin": "Test of var method, of class TDistribution.",
    "Reference": "Test of variance method, of class TDistribution.",
    "HebCup": "Test of Variance method, of class TDistribution."
}
{
    "Origin": "Creates and caches a test {@link BaseEvent} instance for the scope of the current test method.",
    "Reference": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method.",
    "HebCup": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method."
}
{
    "Origin": "Cancels the task of loading and displaying image for incoming imageView.",
    "Reference": "Cancels the task of loading and displaying image for incoming imageAware.",
    "HebCup": "Cancels the task of loading and displaying image for incoming ImageAware."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "This method will return true if the version stored in the file\nmatches the supplied String version.",
    "Reference": "This method will return true if the version stored in the file\nmatches the supplied float version.",
    "HebCup": "This method will return true if the version stored in the file matches the supplied float version."
}
{
    "Origin": "For each network interface, create a listening thread using {@link #_executorService}",
    "Reference": "For each network interface, create a listening thread using {@link #executorService}",
    "HebCup": "For each network interface, create a listening thread using {@link#executorService}"
}
{
    "Origin": "Completes {@code cs} with any additional changes from its topics",
    "Reference": "Completes {@code changeSet} with any additional changes from its topics",
    "HebCup": "Completes {@code changeSet} with any additional changes from its topics"
}
{
    "Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for\na directory.",
    "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for\na directory.",
    "HebCup": "Tests the {@link FileSystemMaster#delete (AlluxioURI, DeleteContext)} method for a directory."
}
{
    "Origin": "Use {@link #onSubmitAfterForm(AjaxRequestTarget, Form)} instead.",
    "Reference": "Use {@link #onAfterSubmit(AjaxRequestTarget, Form)} instead.",
    "HebCup": "Use {@link#onAfterSubmit (AjaxRequestTarget, Form)} instead."
}
{
    "Origin": "The item is removed from the collection mapped to the specified key.",
    "Reference": "The value is removed from the collection mapped to the specified key.",
    "HebCup": "The value is removed from the collection mapped to the specified key."
}
{
    "Origin": "The fetcher should something as it falls back to Chimbori",
    "Reference": "The fetcher should something as it falls back to OttoBib",
    "HebCup": "The fetcher should something as it falls back to OttoBib"
}
{
    "Origin": "Paints split button.",
    "Reference": "Paints menu button.",
    "HebCup": "Paints Menu Button."
}
{
    "Origin": "This method may be called after {@link #startServer()} to (re-)set the script evaluation timeout in\nthe running server.",
    "Reference": "This method may be called after {@link #startServer()} to (re-)set the evaluation timeout in\nthe running server.",
    "HebCup": "This method may be called after {@link #startServer()} to (re-)set the Evaluation Timeout in the running server."
}
{
    "Origin": "Test of npara method, of class Exponential.",
    "Reference": "Test of length method, of class Exponential.",
    "HebCup": "Test of Length method, of class Exponential."
}
{
    "Origin": "Set the fileContentLanguage property: Specifies the natural languages\nused by this resource.",
    "Reference": "Set the contentLanguage property: Specifies the natural languages\nused by this resource.",
    "HebCup": "Set the contentLanguage property: Specifies the natural languages used by this resource."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Setter Parameter Value for File Name",
    "Reference": "Setter Parameter Value for File Path or Name",
    "HebCup": "Setter Parameter Value for file Path Or Name"
}
{
    "Origin": "Returns true if field targetThreadNameList is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field threadNameList is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field ThreadNameList is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "It creates a topic using KafkaProducer.",
    "Reference": "It creates a topic using Producer.",
    "HebCup": "It creates a topic using Producer."
}
{
    "Origin": "Returns a wrapped instance of {@link ClientConnectionRequest}\nto capture the necessary performance metrics.",
    "Reference": "Returns a wrapped instance of {@link ConnectionRequest}\nto capture the necessary performance metrics.",
    "HebCup": "Returns a wrapped instance of {@link ConnectionRequest} to capture the necessary performance metrics."
}
{
    "Origin": "Removes the specified object from the list of registered configuration listeners.",
    "Reference": "Removes the specified object from the list of registered configuration LISTENERS.",
    "HebCup": "Removes the specified object from the list of registered configuration LISTENERS."
}
{
    "Origin": "Sets the {@link #username}.",
    "Reference": "Sets the {@link #userName}.",
    "HebCup": "Sets the {@link#userName}."
}
{
    "Origin": "Make sure to keep {@link #database} field and map synchronized.",
    "Reference": "Make sure to keep {@link #wikiId} field and map synchronized.",
    "HebCup": "Make sure to keep {@link#WikiId} field and map synchronized."
}
{
    "Origin": "Throws {@link ConfigurationException} if given group property is defined within Hazelcast properties.",
    "Reference": "Throws {@link InvalidConfigurationException} if given group property is defined within Hazelcast properties.",
    "HebCup": "Throws {@link InvalidConfigurationException} if given group property is defined within Hazelcast properties."
}
{
    "Origin": "If two ranges overlap, this range or the other range strictlyContains the begin or the end of the other range.",
    "Reference": "If two ranges overlap, this range or the other range contains the begin or the end of the other range.",
    "HebCup": "If two ranges overlap, this range or the other range contains the begin or the end of the other range."
}
{
    "Origin": "Run {@link SearchResult#parallelCombineActive(Collection, Func1)} if there is at least one active connector\nin connectors, and throw NoConnectorException otherwise.",
    "Reference": "Run {@link SearchResult#parallelCombineActive(Collection, Function)} if there is at least one active connector\nin connectors, and throw NoConnectorException otherwise.",
    "HebCup": "Run {@link SearchResult#parallelCombineActive (Collection, Function)} if there is at least one active connector in connectors, and throw NoConnectorException otherwise."
}
{
    "Origin": "For further\ninformation please read the javadoc on {@link Component#canCallListenerInterface()},\nthis method has the same semantics.",
    "Reference": "For further\ninformation please read the javadoc on {@link Component#canCallListener()},\nthis method has the same semantics.",
    "HebCup": "For further information please read the javadoc on {@link Component#canCallListener ()}, this method has the same semantics."
}
{
    "Origin": "Gets the value of the 'zk_Quorum' field.",
    "Reference": "Gets the value of the 'zkQuorum' field.",
    "HebCup": "Gets the value of the 'zkQuorum' field."
}
{
    "Origin": "Returns the event index.",
    "Reference": "Returns the event indexes.",
    "HebCup": "Returns the event Indexes."
}
{
    "Origin": "Generate a new LdapConnection object for following a referral\nwith the given LdapUrl, and copy the username and password\nfrom the original connection.",
    "Reference": "Generate a new LdapNetworkConnection object for following a referral\nwith the given LdapUrl, and copy the username and password\nfrom the original connection.",
    "HebCup": "Generate a new LdapNetworkConnection object for following a referral with the given LdapUrl, and copy the username and password from the original connection."
}
{
    "Origin": "Test affinity awareness partition distributions cache size property with semicolon.",
    "Reference": "Test Partition Awareness partition distributions cache size property with semicolon.",
    "HebCup": "test Partition Awareness Partition Distributions Cache Size Property with semicolon."
}
{
    "Origin": "Replaces the {@link Request} associated with this context with the specified one without any validation.",
    "Reference": "Replaces the {@link HttpRequest} associated with this context with the specified one\nwithout any validation.",
    "HebCup": "Replaces the {@link HttpRequest} associated with this context with the specified one without any validation."
}
{
    "Origin": "AdditionalAction, this method returns false and updates the error list when the additonalActionAuth parameter is\nset to false.",
    "Reference": "AdditionalAction, this method returns false and updates the error list when the additionalActionAuth parameter is\nset to false.",
    "HebCup": "AdditionalAction, this method returns false and updates the error list when the additionalActionAuth parameter is set to false."
}
{
    "Origin": "Close the current packet reader.",
    "Reference": "Close the current data reader.",
    "HebCup": "Close the current Data Reader."
}
{
    "Origin": "Gets ports.",
    "Reference": "Gets endpoints.",
    "HebCup": "Gets endpoints."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Turns this ReactiveSeq into a HotStream, a connectable Stream, being\nexecuted on a thread on the supplied executor, that is producing data",
    "Reference": "Turns this ReactiveSeq into a Connectable, a connectable Stream, being\nexecuted on a thread on the supplied executor, that is producing data",
    "HebCup": "Turns this ReactiveSeq into a Connectable, a connectable Stream, being executed on a thread on the supplied executor, that is producing data"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Resets any management pack installation states from\n{@link RepositoryVersionState#INSTALLING} to\n{@link RepositoryVersionState#INSTALL_FAILED}.",
    "Reference": "Resets any management pack installation states from\n{@link MpackInstallState#INSTALLING} to\n{@link MpackInstallState#INSTALL_FAILED}.",
    "HebCup": "Resets any management pack installation states from {@link MpackInstallState#INSTALLING} to {@link MpackInstallState#INSTALL_FAILED}."
}
{
    "Origin": "Binds the specified {@link Service} at the specified path pattern of the default {@link VirtualHost}.",
    "Reference": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}.",
    "HebCup": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}."
}
{
    "Origin": "Merge given void publishers into a new {@literal Mono} that will be fulfilled when\nall of the given {@literal sources} have been fulfilled.",
    "Reference": "Merge given publishers into a new {@literal Mono} that will be fulfilled when\nall of the given {@literal sources} have been fulfilled.",
    "HebCup": "Merge given ? publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled."
}
{
    "Origin": "Name of schedule",
    "Reference": "Name of task",
    "HebCup": "Name of Task"
}
{
    "Origin": "1) Check that there are OBJECT_NUM number of objects in the SMRMap.",
    "Reference": "1) Check that there are OBJECT_NUM number of objects in the CorfuTable.",
    "HebCup": "1) Check that there are OBJECT_NUM number of objects in the CorfuTable."
}
{
    "Origin": "Configure a sslConfig for the jmx using the legacy configuration",
    "Reference": "Configure a SSLConfig.Builder for the jmx using the legacy configuration",
    "HebCup": "Configure a SSLConfig.Builder for the jmx using the legacy configuration"
}
{
    "Origin": "Also, puts the new names->nodes map in the TsurgeonPattern that called copy.",
    "Reference": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy.",
    "HebCup": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy."
}
{
    "Origin": "Get the fileContentDisposition property: Sets the file's",
    "Reference": "Get the contentDisposition property: Sets the file's",
    "HebCup": "Get the ContentDisposition property: Sets the file's"
}
{
    "Origin": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.",
    "Reference": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}.",
    "HebCup": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}."
}
{
    "Origin": "Sets the {@link SortOrder}s to use with backend sorting.",
    "Reference": "Sets the {@link QuerySortOrder}s to use with backend sorting.",
    "HebCup": "Sets the {@link QuerySortOrder}s to use with backend sorting."
}
{
    "Origin": "Generates an in-memory key for an service, used to index the app for later quick\nretrieval.",
    "Reference": "Generates an in-memory key for an api, used to index the app for later quick\nretrieval.",
    "HebCup": "Generates an in-memory key for an Api, used to index the app for later quick retrieval."
}
{
    "Origin": "Converts this template into an {@link ArgumentTypeValidator}.",
    "Reference": "Converts this template into an {@link ArgumentTypeStrategy}.",
    "HebCup": "Converts this template into an {@link ArgumentTypeStrategy}."
}
{
    "Origin": "Get the Extern Item object associated with this package name.",
    "Reference": "Get the Extern Item object associated with this element name.",
    "HebCup": "Get the Extern Item object associated with this Element name."
}
{
    "Origin": "Test of setParams method, of class PerfMonAgentConnector.",
    "Reference": "Test of addMetric method, of class PerfMonAgentConnector.",
    "HebCup": "Test of addMetric method, of class PerfMonAgentConnector."
}
{
    "Origin": "Returns the {@link WriteResult} that caused the exception.",
    "Reference": "Returns the {@link WriteConcernResult} that caused the exception.",
    "HebCup": "Returns the {@link WriteConcernResult} that caused the exception."
}
{
    "Origin": "{@link Keys#GOT_FISH}",
    "Reference": "{@link Keys#DOLPHIN_DOES_GOT_FISH}",
    "HebCup": "{@link Keys#DOLPHIN_DOES_GOT_FISH}"
}
{
    "Origin": "Return the buffer that apply history DDL is written to.",
    "Reference": "Return the buffer that apply history-view DDL is written to.",
    "HebCup": "Return the buffer that apply History View DDL is written to."
}
{
    "Origin": "remove select events, do so via {@link #removeEvent(BaseEvent)}.",
    "Reference": "remove select events, do so via {@link #removeEvent(CoreEvent)}.",
    "HebCup": "remove select events, do so via {@link #removeEvent(CoreEvent)}."
}
{
    "Origin": "Converts this POJO to a {@link WorkStatus}.",
    "Reference": "Converts this POJO to a {@link WorkInfo}.",
    "HebCup": "Converts this POJO to a {@link WorkInfo}."
}
{
    "Origin": "Generates view from tiles with {@link RenderLayer#TOP}.",
    "Reference": "Generates view from tiles with {@link RenderLayer#DEFAULT}.",
    "HebCup": "Generates view from tiles with {@link RenderLayer#DEFAULT}."
}
{
    "Origin": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyWithResponse#byte-Context}",
    "Reference": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyBackupWithResponse#byte-Context}",
    "HebCup": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyBackupWithResponse#byte-Context}"
}
{
    "Origin": "Test of setMetricType method, of class NewAgentConnector.",
    "Reference": "Test of setTransport method, of class NewAgentConnector.",
    "HebCup": "Test of setTransport method, of class NewAgentConnector."
}
{
    "Origin": "Removes the extension from a filename.",
    "Reference": "Removes the extension from a fileName.",
    "HebCup": "Removes the extension from a filename."
}
{
    "Origin": "Code snippets for {@link BlobClientBase#downloadWithResponse(OutputStream, BlobRange, ReliableDownloadOptions,",
    "Reference": "Code snippets for {@link BlobClientBase#downloadWithResponse(OutputStream, BlobRange, DownloadRetryOptions,",
    "HebCup": "Code snippets for {@link BlobClientBase#downloadWithResponse (OutputStream, BlobRange, DownloadRetryOptions,"
}
{
    "Origin": "Method return current instance of browser mob proxy",
    "Reference": "Method return current instance of browser up proxy",
    "HebCup": "Method return current instance of Browser Up Proxy"
}
{
    "Origin": "Returns a {@link TrackedDevicePose} view of the {@code standingTrackedDevicePose} field.",
    "Reference": "Returns a {@link TrackedDevicePose} view of the {@code trackedDevicePose} field.",
    "HebCup": "Returns a {@link TrackedDevicePose} view of the {@code trackedDevicePose} field."
}
{
    "Origin": "Checks the dirty status of the 'prevSignature' field.",
    "Reference": "Checks the dirty status of the 'signature' field.",
    "HebCup": "Checks the dirty status of the 'Signature' field."
}
{
    "Origin": "Creates an {@code FxSwap} using forward points.",
    "Reference": "Creates an {@code FxSwap} using decimal forward points.",
    "HebCup": "Creates an {@code FxSwap} using decimal Forward Points."
}
{
    "Origin": "Sets the value of the 'ValueType' field",
    "Reference": "Sets the value of the 'valueType' field.",
    "HebCup": "Sets the value of the 'valueType' field"
}
{
    "Origin": "Gets the value of the 'cf_name' field.",
    "Reference": "Gets the value of the 'cfName' field.",
    "HebCup": "Gets the value of the 'cfName' field."
}
{
    "Origin": "Sets the default SSLHostConfig name.",
    "Reference": "Sets the default SslHostConfig name.",
    "HebCup": "Sets the default SslHostConfig name."
}
{
    "Origin": "Get certain partition-level histograms based on given arguments.",
    "Reference": "Get certain resource-level histograms based on given arguments.",
    "HebCup": "Get certain resource-level histograms based on given arguments."
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "Decode an action profile member to PI action group member.",
    "Reference": "Decode an action profile member to PI action profile member.",
    "HebCup": "Decode an action profile member to Pi Action Profile Member."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Standard getter for the rightwardLabel String for this RelationshipType",
    "Reference": "Standard getter for the rightwardType String for this RelationshipType",
    "HebCup": "Standard getter for the rightwardType String for this RelationshipType"
}
{
    "Origin": "Deletes the running state from the {@link RemoteRuntimeDataset}.",
    "Reference": "Deletes the running state from the {@link RemoteRuntimeTable}.",
    "HebCup": "Deletes the running state from the {@link RemoteRuntimeTable}."
}
{
    "Origin": "Get instance manager.",
    "Reference": "Get injection manager.",
    "HebCup": "Get Injection Manager."
}
{
    "Origin": "Attaches an application created from a WADL description document\navailable at a given URI reference.",
    "Reference": "Attaches an application created from a Swagger description document\navailable at a given URI reference.",
    "HebCup": "Attaches an application created from a swagger description document available at a given URI reference."
}
{
    "Origin": "Get the service locator.",
    "Reference": "Get the instance manager.",
    "HebCup": "Get the Instance Manager."
}
{
    "Origin": "Create and display the picture view.",
    "Reference": "Create and display the initial view.",
    "HebCup": "Create and display the Initial View."
}
{
    "Origin": "Sets the value of the 'publicPort' field.",
    "Reference": "Sets the value of the 'publicPorts' field.",
    "HebCup": "Sets the value of the 'PublicPorts' field."
}
{
    "Origin": "Gets the exampleText.",
    "Reference": "Gets the text.",
    "HebCup": "Gets the text."
}
{
    "Origin": "Each adapter will try to send blocks until have got special {@link Packet} with type {@link PacketTypes#ACK},\nthat means receiver have got block.",
    "Reference": "Each adapter will try to send blocks until have got special {@link Block} with type {@link PacketTypes#ACK},\nthat means receiver have got block.",
    "HebCup": "Each adapter will try to send blocks until have got special {@link block} with type {@link PacketTypes#ACK}, that means receiver have got block."
}
{
    "Origin": "Sets the {@code eventListeners} this {@link EventHandlerInvoker} will forward all its events to.",
    "Reference": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to.",
    "HebCup": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to."
}
{
    "Origin": "Uninstalls split button mouseover listener.",
    "Reference": "Uninstalls menu button mouseover listener.",
    "HebCup": "Uninstalls menu Button mouseover listener."
}
{
    "Origin": "The returned cursor will also be managed through the means of {@link #managedCursor(Cursor, CursorContext)}",
    "Reference": "The returned cursor will also be managed through the means of {@link #managedCursor(Cursor)}",
    "HebCup": "The returned cursor will also be managed through the means of {@link #managedCursor(Cursor, ;)}"
}
{
    "Origin": "Adds {@link WordCountApp} as system artifact which can be used as parent artifact for testing purpose",
    "Reference": "Adds {@link AllProgramsApp} as system artifact which can be used as parent artifact for testing purpose",
    "HebCup": "Adds {@link AllProgramsApp} as system artifact which can be used as parent artifact for testing purpose"
}
{
    "Origin": "Tests the creation of a file via the\n{@link BaseFileSystem#createFile(AlluxioURI, CreateFileOptions)} method.",
    "Reference": "Tests the creation of a file via the\n{@link BaseFileSystem#createFile(AlluxioURI, CreateFilePOptions)} method.",
    "HebCup": "Tests the creation of a file via the {@link BaseFileSystem#createFile (AlluxioURI, CreateFilePOptions)} method."
}
{
    "Origin": "RsaKeyCreateOptions#getNotBefore() notBefore} values are optional.",
    "Reference": "CreateRsaKeyOptions#getNotBefore() notBefore} values are optional.",
    "HebCup": "CreateRsaKeyOptions#getNotBefore () notBefore} values are optional."
}
{
    "Origin": "Gets the nodeType.",
    "Reference": "Gets the type.",
    "HebCup": "Gets the type."
}
{
    "Origin": "Returns an immutable list containing two elements.",
    "Reference": "Returns an unmodifiable list containing two elements.",
    "HebCup": "Returns an Unmodifiable list containing two elements."
}
{
    "Origin": "If we didn't write any Indexers and there is a RootGlideModule, write the",
    "Reference": "If we didn't write any Indexers and there is a AppGlideModule, write the",
    "HebCup": "If we didn't write any Indexers and there is a AppGlideModule, write the"
}
{
    "Origin": "Gets the value of the 'zk_Quorum' field",
    "Reference": "Gets the value of the 'zkQuorum' field.",
    "HebCup": "Gets the value of the 'zkQuorum' field"
}
{
    "Origin": "User / Group may look up files / folders in the Recycle Bin.",
    "Reference": "User / Group may look up files / folders in the recycle bin.",
    "HebCup": "User / Group may look up files / folders in the Recycle bin."
}
{
    "Origin": "Draws the value of the given entry by using the provided ValueFormatter.",
    "Reference": "Draws the value of the given entry by using the provided IValueFormatter.",
    "HebCup": "Draws the value of the given entry by using the provided IValueFormatter."
}
{
    "Origin": "Conditionally update the {@link #serviceTable} iff it does not exist or\nis empty.",
    "Reference": "Conditionally update the {@link #serviceTableRef} iff it does not exist or\nis empty.",
    "HebCup": "Conditionally update the {@link#serviceTableRef} iff it does not exist or is empty."
}
{
    "Origin": "Checks a filename to see if it matches the specified wildcard matcher,\nalways testing case-sensitive.",
    "Reference": "Checks a fileName to see if it matches the specified wildcard matcher,\nalways testing case-sensitive.",
    "HebCup": "Checks a fileName to see if it matches the specified wildcard matcher, always testing case-sensitive."
}
{
    "Origin": "Calls {@link Plugin#willDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} on\nall the bundled plugins",
    "Reference": "Calls {@link Plugin#beforeDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} on\nall the bundled plugins",
    "HebCup": "Calls {@link Plugin#beforeDeclareProperty (TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} on all the bundled plugins"
}
{
    "Origin": "Sets the value of the 'zk_Quorum' field",
    "Reference": "Sets the value of the 'zkQuorum' field.",
    "HebCup": "Sets the value of the 'zkQuorum' field"
}
{
    "Origin": "Sets a metadata property for the specified {@link NamespacedEntityId}.",
    "Reference": "Sets a metadata property for the specified {@link MetadataEntity}.",
    "HebCup": "Sets a metadata property for the specified {@link MetadataEntity}."
}
{
    "Origin": "Validate that the key is not reserved {@link MetadataDataset#TAGS_KEY}.",
    "Reference": "Validate that the key is not reserved {@link MetadataConstants#TAGS_KEY}.",
    "HebCup": "Validate that the key is not reserved {@link MetadataConstants#TAGS_KEY}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Returns the SpecialDirectory object corresponding to the given file, creating\nit and its parents as needed.",
    "Reference": "Returns the SpecialDirectory object corresponding to the given directory, creating\nit and its parents as needed.",
    "HebCup": "Returns the SpecialDirectory object corresponding to the given directory, creating it and its parents as needed."
}
{
    "Origin": "Returns an immutable map containing keys and values extracted from the given entries.",
    "Reference": "Returns an unmodifiable map containing keys and values extracted from the given entries.",
    "HebCup": "Returns an Unmodifiable map containing keys and values extracted from the given entries."
}
{
    "Origin": "Create a LazyPersistentQueueX from a Stream",
    "Reference": "Create a LazyPQueueX from a Stream",
    "HebCup": "Create a LazyPQueueX from a Stream"
}
{
    "Origin": "Waits until {@link WebElement} which defined by {@code element} does not contain the specified\n{@code expectedText}.",
    "Reference": "Waits until {@link WebElement} which defined by {@code element} does not contain the specified\n{@code absentText}.",
    "HebCup": "Waits until {@link WebElement} which defined by {@code element} does not contain the specified {@code absentText}."
}
{
    "Origin": "Returns the annotation mirror as specified by the \"qualifier\" element in {@code metaAnno},\nwith arguments taken from {@code argumentAnno}.",
    "Reference": "Returns the annotation mirror as specified by the \"qualifier\" element in {@code\ncontractAnno}, with arguments taken from {@code argumentAnno}.",
    "HebCup": "Returns the annotation mirror as specified by the ``qualifier`` element in {@code contractAnno}, with arguments taken from {@code argumentAnno}."
}
{
    "Origin": "Creates a list of {@link ComponentBuildingDefinition} built on copies of {@link #baseDefinitionBuilder}.",
    "Reference": "Creates a list of {@link ComponentBuildingDefinition} built on copies of {@link #definitionBuilder}.",
    "HebCup": "Creates a list of {@link ComponentBuildingDefinition} built on copies of {@link#definitionBuilder}."
}
{
    "Origin": "This method extracts a registered {@link BaseRelayForwarderRPC} from the\n{@link Dispatcher}.",
    "Reference": "This method extracts a registered {@link BaseRelayServer} from the\n{@link Dispatcher}.",
    "HebCup": "This method extracts a registered {@link BaseRelayServer} from the {@link Dispatcher}."
}
{
    "Origin": "Removes the specified properties of the {@link NamespacedEntityId}.",
    "Reference": "Removes the specified properties of the {@link MetadataEntity}.",
    "HebCup": "Removes the specified properties of the {@link MetadataEntity}."
}
{
    "Origin": "Adds an unqualified \"exports dynamic private\" directive to the declaration.",
    "Reference": "Adds an unqualified \"opens\" directive to the declaration.",
    "HebCup": "Adds an unqualified ``opens`` directive to the declaration."
}
{
    "Origin": "Returns current {@link ISeedingStrategy}.",
    "Reference": "Returns current {@link SeedingStrategy}.",
    "HebCup": "Returns current {@link SeedingStrategy}."
}
{
    "Origin": "Trust all certificates and add them to the {@link #CLIENT_CERTS_LIST}.",
    "Reference": "Trust all certificates and add them to the {@link #clientCertsList}.",
    "HebCup": "Trust all certificates and add them to the {@link#clientCertsList}."
}
{
    "Origin": "Binds the specified {@link Service} at the specified path pattern of the default {@link VirtualHost}.",
    "Reference": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}.",
    "HebCup": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}."
}
{
    "Origin": "Searches for a {@link SharedKeyCredential} in the passed {@link HttpPipeline}.",
    "Reference": "Searches for a {@link StorageSharedKeyCredential} in the passed {@link HttpPipeline}.",
    "HebCup": "Searches for a {@link StorageSharedKeyCredential} in the passed {@link HttpPipeline}."
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions#settingSelector-context}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listRevisions#settingSelector-context}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listRevisions#settingSelector-context}"
}
{
    "Origin": "Removes all properties for the specified {@link NamespacedEntityId}.",
    "Reference": "Removes all properties for the specified {@link MetadataEntity}.",
    "HebCup": "Removes all properties for the specified {@link MetadataEntity}."
}
{
    "Origin": "Creates a valid {@link Aggregate} operation.",
    "Reference": "Creates a valid {@link AggregateTableOperation} operation.",
    "HebCup": "Creates a valid {@link AggregateTableOperation} operation."
}
{
    "Origin": "The returned language supplier\nis intended to be cached in the currently adopted AST.",
    "Reference": "The returned language\nreference is intended to be cached in the currently adopted AST.",
    "HebCup": "The returned Language Reference is intended to be cached in the currently adopted AST."
}
{
    "Origin": "Amalgamate all post-construct callbacks and return a read only list",
    "Reference": "Amalgamate all post-construct callbacks and return a read only set",
    "HebCup": "Amalgamate all post-construct callbacks and return a read only Set"
}
{
    "Origin": "Returns the last asset entry set in the ordered set where createTime = ?",
    "Reference": "Returns the first asset entry set in the ordered set where createTime > ?",
    "HebCup": "Returns the First asset entry set in the ordered set where createTime = ?"
}
{
    "Origin": "Sets the configuration resolver for the SAML filter chain.",
    "Reference": "Sets the registration resolver for the SAML filter chain.",
    "HebCup": "Sets the registration Resolver for the SAML filter chain."
}
{
    "Origin": "Created a new {@link RxInstrumenter}.",
    "Reference": "Created a new {@link InvocationInstrumenter}.",
    "HebCup": "Created a new {@link InvocationInstrumenter}."
}
{
    "Origin": "Sets the current end icon to be VISIBLE or INVISIBLE.",
    "Reference": "Sets the current end icon to be VISIBLE or GONE.",
    "HebCup": "Sets the current end icon to be VISIBLE or GONE."
}
{
    "Origin": "Generates a code sample for using {@link ShareDirectoryClient#createSubDirectory(String)}",
    "Reference": "Generates a code sample for using {@link ShareDirectoryClient#createSubdirectory(String)}",
    "HebCup": "Generates a code sample for using {@link ShareDirectoryClient#createSubdirectory (String)}"
}
{
    "Origin": "Deletes the specified variable from the configuration.",
    "Reference": "Deletes the specified variable from the CONFIGURATION.",
    "HebCup": "Deletes the specified variable from the CONFIGURATION."
}
{
    "Origin": "During the prefetch, a session should not hold audio focus in order to allow\nother sessions play seamlessly.",
    "Reference": "During the prepare, a session should not hold audio focus in order to allow\nother sessions play seamlessly.",
    "HebCup": "During the Prepare, a session should not hold audio focus in order to allow other sessions play seamlessly."
}
{
    "Origin": "Code snippets for {@link BlobClientBase#setHTTPHeaders(BlobHttpHeaders)}",
    "Reference": "Code snippets for {@link BlobClientBase#setHttpHeaders(BlobHttpHeaders)}",
    "HebCup": "Code snippets for {@link BlobClientBase#setHttpHeaders (BlobHttpHeaders)}"
}
{
    "Origin": "This merges the two objects - {@code this} and the specified time -\nto form an instance of {@code OffsetDateTime}.",
    "Reference": "This merges the two objects - {@code this} and the specified time -\nto form an instance of {@code ZonedDateTime}.",
    "HebCup": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code ZonedDateTime}."
}
{
    "Origin": "Code snippets for {@link BlobClient#setHTTPHeaders(BlobHttpHeaders)}",
    "Reference": "Code snippets for {@link BlobClient#setHttpHeaders(BlobHttpHeaders)}",
    "HebCup": "Code snippets for {@link BlobClient#setHttpHeaders (BlobHttpHeaders)}"
}
{
    "Origin": "Returns the class name local service.",
    "Reference": "Returns the journal article local service.",
    "HebCup": "Returns the journal Article Local Service."
}
{
    "Origin": "Check that we boot successfully when the Elasticsearch dialect is configured explicitly,\nand that the Elasticsearch client starts in the second phase of bootstrap in that case.",
    "Reference": "Check that we boot successfully when the Elasticsearch version is configured explicitly,\nand that the Elasticsearch client starts in the second phase of bootstrap in that case.",
    "HebCup": "Check that we boot successfully when the Elasticsearch VERSION is configured explicitly, and that the Elasticsearch client starts in the second phase of bootstrap in that case."
}
{
    "Origin": "Test of var method, of class NegativeBinomialDistribution.",
    "Reference": "Test of variance method, of class NegativeBinomialDistribution.",
    "HebCup": "Test of Variance method, of class NegativeBinomialDistribution."
}
{
    "Origin": "Test of npara method, of class WeibullDistribution.",
    "Reference": "Test of length method, of class WeibullDistribution.",
    "HebCup": "Test of Length method, of class WeibullDistribution."
}
{
    "Origin": "Test affinity awareness partition distributions cache size property with semicolon.",
    "Reference": "Test Partition Awareness partition distributions cache size property with semicolon.",
    "HebCup": "test Partition Awareness Partition Distributions Cache Size Property with semicolon."
}
{
    "Origin": "If {@link #IGNORE_OVERFLOW} is true and one of the bounds is outside the Integer range,\nthen that bound is set to the bound of the Integer range.",
    "Reference": "If {@link #ignoreOverflow} is true and one of the bounds is outside the Integer range,\nthen that bound is set to the bound of the Integer range.",
    "HebCup": "If {@link#ignoreOverflow} is true and one of the bounds is outside the Integer range, then that bound is set to the bound of the Integer range."
}
{
    "Origin": "Returns true if field execTime is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field limit is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field Limit is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "Gets dockerfile file name of this github url",
    "Reference": "Gets devfile file name of this github url",
    "HebCup": "Gets Devfile file name of this github url"
}
{
    "Origin": "Overrides the state changed to determine if the state is new or changed and then\nto call the {@link #_wrappedCallback} if it has",
    "Reference": "Overrides the state changed to determine if the state is new or changed and then\nto call the {@link #wrappedCallback} if it has",
    "HebCup": "Overrides the state changed to determine if the state is new or changed and then to call the {@link#wrappedCallback} if it has"
}
{
    "Origin": "If any\noffset in this is a less than or equal to an offset in other, then that offset is an\noffset for the array in lub.",
    "Reference": "If any\noffset in this is a less than or equal to an offset in other, then that offset is an\noffset for the sequence in lub.",
    "HebCup": "If any offset in this is a less than or equal to an offset in other, then that offset is an offset for the sequence in lub."
}
{
    "Origin": "Scenario:\n  - CA inherited trust\n  - gateway trusts service via CA\n  - service trusts gateway via CA",
    "Reference": "Scenario:\n  - CA inherited trust\n  - gateway trusts API via CA\n  - API trusts gateway via CA",
    "HebCup": "Scenario: - CA inherited trust - gateway trusts Api via CA - Api trusts gateway via CA"
}
{
    "Origin": "This method generates the set of error parameters from an {@link BaseEvent} to use on the error response function.",
    "Reference": "This method generates the set of error parameters from an {@link CoreEvent} to use on the error response function.",
    "HebCup": "This method generates the set of error parameters from an {@link CoreEvent} to use on the error response function."
}
{
    "Origin": "Time (in ms) of last received appendPosition.",
    "Reference": "Time (in ns) of last received appendPosition.",
    "HebCup": "Time (in Ns) of last received appendPosition."
}
{
    "Origin": "Create a {@link InstanceManager}.",
    "Reference": "Create a {@link InjectionManager}.",
    "HebCup": "Create a {@link InjectionManager}."
}
{
    "Origin": "Creates a new {@link FileIOChannel.ID} in one of the temp directories.",
    "Reference": "Creates a new {@link ID} in one of the temp directories.",
    "HebCup": "Creates a new {@link ID} in one of the temp directories."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Encode a PI action group to a action profile group.",
    "Reference": "Encode a PI action profile group to a action profile group.",
    "HebCup": "Encode a Pi Action Profile Group to a action profile group."
}
{
    "Origin": "Get the fileCacheControl property: Sets the file's cache control.",
    "Reference": "Get the cacheControl property: Sets the file's cache control.",
    "HebCup": "Get the CacheControl property: Sets the file's cache control."
}
{
    "Origin": "Gets an {@link BaseBiome} from a {@link ArgumentStack}.",
    "Reference": "Gets an {@link BiomeType} from a {@link ArgumentStack}.",
    "HebCup": "Gets an {@link BiomeType} from a {@link ArgumentStack}."
}
{
    "Origin": "Delegates to {@link #getAttributeTypedNames()} and extracts the names.",
    "Reference": "Delegates to {@link #getTypedAttributeNames()} and extracts the names.",
    "HebCup": "Delegates to {@link#getTypedAttributeNames ()} and extracts the names."
}
{
    "Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method\nwhen running on a file that is inconsistent.",
    "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method\nwhen running on a file that is inconsistent.",
    "HebCup": "Tests the {@link FileSystemMaster#checkConsistency (AlluxioURI, CheckConsistencyContext)} method when running on a file that is inconsistent."
}
{
    "Origin": "Sets the event index.",
    "Reference": "Sets the event indexes.",
    "HebCup": "Sets the event Indexes."
}
{
    "Origin": "Returns the class name persistence.",
    "Reference": "Returns the journal article persistence.",
    "HebCup": "Returns the Journal Article Persistence."
}
{
    "Origin": "Record an {@link ExecutionEvent} for a container or test that was skipped.",
    "Reference": "Record an {@link Event} for a container or test that was skipped.",
    "HebCup": "Record an {@link Event} for a container or test that was skipped."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Gets the list of {@link IssuerProperties issuers} on this page.",
    "Reference": "Gets the iterable stream of {@link IssuerProperties issuers} on this page.",
    "HebCup": "Gets the IterableStream of {@link IssuerProperties issuers} on this page."
}
{
    "Origin": "See {@link Upsertable#rowidHasPriority()} for more information.",
    "Reference": "See {@link Upsertable#rowidSupersedesLogicalKey()} for more information.",
    "HebCup": "See {@link Upsertable#rowidSupersedesLogicalKey ()} for more information."
}
{
    "Origin": "Create introspection invalid response.",
    "Reference": "Build unauthorized response entity.",
    "HebCup": "build Unauthorized Response Entity."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.copyFromURL#URL}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.copyFromURL#String}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.copyFromURL#String}"
}
{
    "Origin": "Generates a valid document ID for a service, used to index the service in ES.",
    "Reference": "Generates a valid document ID for a API, used to index the API in ES.",
    "HebCup": "Generates a valid document ID for a Api, used to index the Api in ES."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental#URL-String}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental#String-String}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental#String-String}"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTIntProperty }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTFontFamily }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTFontFamily} {@code >}}"
}
{
    "Origin": "Register one or more annotated classes to be processed.",
    "Reference": "Register one or more component classes to be processed.",
    "HebCup": "Register one or more component Classes to be processed."
}
{
    "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "HebCup": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners."
}
{
    "Origin": "Associates this cache configuration to a quorum.",
    "Reference": "Associates this cache configuration to a split brain protection.",
    "HebCup": "Associates this cache configuration to a quorum."
}
{
    "Origin": "Test of process method, of class ABITracer.",
    "Reference": "Test of local method, of class ABITracer.",
    "HebCup": "Test of Local method, of class ABITracer."
}
{
    "Origin": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link CurveId} as the identifier.",
    "Reference": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link RatesCurveId} as the identifier.",
    "HebCup": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier."
}
{
    "Origin": "Load enOrganizationModel",
    "Reference": "Load Organization Model",
    "HebCup": "Load OrganizationModel"
}
{
    "Origin": "Sets the path to the configuration file.",
    "Reference": "Sets the path to the CONFIGURATION file.",
    "HebCup": "Sets the path to the CONFIGURATION file."
}
{
    "Origin": "The meta-property for the {@code productType} property.",
    "Reference": "The meta-property for the {@code type} property.",
    "HebCup": "The meta-property for the {@code type} property."
}
{
    "Origin": "Sets the {@link ISeedingStrategyFactory} to be used by this factory.",
    "Reference": "Sets the {@link SeedingStrategyFactory} to be used by this factory.",
    "HebCup": "Sets the {@link SeedingStrategyFactory} to be used by this factory."
}
{
    "Origin": "This method is a shortcut to {@linkplain #prefix(String, boolean) prefix(prefix, true)}.",
    "Reference": "This method is a shortcut to {@linkplain #pathPrefix(String, boolean) pathPrefix(prefix, true)}.",
    "HebCup": "This method is a shortcut to {@linkplain#pathPrefix (String, boolean) pathPrefix (prefix, true)}."
}
{
    "Origin": "Generates a code sample for using {@link DirectoryClient#createFileWithResponse(String, long, FileHTTPHeaders,",
    "Reference": "Generates a code sample for using {@link DirectoryClient#createFileWithResponse(String, long, FileHttpHeaders,",
    "HebCup": "Generates a code sample for using {@link DirectoryClient#createFileWithResponse (String, long, FileHttpHeaders,"
}
{
    "Origin": "See {@link #newDatabase(File, Config, GraphDatabaseFacadeFactory.Dependencies)} instead.",
    "Reference": "See {@link #newDatabase(File, Config, ExternalDependencies)} instead.",
    "HebCup": "See {@link#newDatabase (File, Config, ExternalDependencies)} instead."
}
{
    "Origin": "Sets the value of the spinCount property.",
    "Reference": "Sets the value of the saltValue property.",
    "HebCup": "Sets the value of the SaltValue property."
}
{
    "Origin": "Gets the value of the 'publicPort' field.",
    "Reference": "Gets the value of the 'publicPorts' field.",
    "HebCup": "Gets the value of the 'publicPorts' field."
}
{
    "Origin": "Computes a mapping from the {@link SystemStreamPartition} to {@link TaskName} using the provided {@param grouperContext}",
    "Reference": "Computes a mapping from the {@link SystemStreamPartition} to {@link TaskName} using the provided {@param grouperMetadata}",
    "HebCup": "Computes a mapping from the {@link SystemStreamPartition} to {@link TaskName} using the provided {@param GrouperMetadata}"
}
{
    "Origin": "For details see also {@link #getFieldOrAlias(String)}",
    "Reference": "For details see also {@link #getFieldOrAlias(Field)}",
    "HebCup": "For details see also {@link #getFieldOrAlias(Field)}"
}
{
    "Origin": "Gets the destination associated with this appender.",
    "Reference": "Gets the connection associated with this appender.",
    "HebCup": "Gets the Connection associated with this appender."
}
{
    "Origin": "Returns an {@link Operator} to allow the query to be run once per\nparameter list in the source.",
    "Reference": "Returns an {@link Transformer} to allow the query to be run once per\nparameter list in the source.",
    "HebCup": "Returns an {@link Transformer} to allow the query to be run once per parameter list in the source."
}
{
    "Origin": "Returns the number of sync d l objects where companyId = ?",
    "Reference": "Returns the number of sync d l objects where repositoryId = ?",
    "HebCup": "Returns the number of sync d l objects where repositoryId = ?"
}
{
    "Origin": "Bugsnag.onBreadcrumb(new OnBreadcrumb() {\npublic boolean run(Breadcrumb breadcrumb) {\nreturn false;  ignore the breadcrumb\n}\n})",
    "Reference": "Bugsnag.onBreadcrumb(new OnBreadcrumbCallback() {\npublic boolean run(Breadcrumb breadcrumb) {\nreturn false;  ignore the breadcrumb\n}\n})",
    "HebCup": "Bugsnag.onBreadcrumb (new OnBreadcrumbCallback () {public boolean run (Breadcrumb breadcrumb) {return false; ignore the breadcrumb}})"
}
{
    "Origin": "Gets a path to an artifact with given version and groupId=org.apache.ignite and artifactId={@code artifactName}.",
    "Reference": "Gets a path to an artifact with given version and groupId=org.apache.ignite and artifactId={@code artifactId}.",
    "HebCup": "Gets a path to an artifact with given version and groupId=org.apache.ignite and artifactId= {@code artifactId}."
}
{
    "Origin": "Reset starting address.",
    "Reference": "Reset head segment.",
    "HebCup": "reset Head Segment."
}
{
    "Origin": "The same as {@link #indexReference(IndexDescriptor2)}, except no schema lock is taken.",
    "Reference": "The same as {@link #indexReference(IndexDescriptor)}, except no schema lock is taken.",
    "HebCup": "The same as {@link #indexReference(IndexDescriptor)}, except no schema lock is taken."
}
{
    "Origin": "Returns a {@link StartAtlasDbTransactionResponseV4} which has a single immutable ts, and a range of timestamps to\nbe used as start timestamps.",
    "Reference": "Returns a {@link StartTransactionResponseV4} which has a single immutable ts, and a range of timestamps to\nbe used as start timestamps.",
    "HebCup": "Returns a {@link StartTransactionResponseV4} which has a single immutable ts, and a range of timestamps to be used as start timestamps."
}
{
    "Origin": "Stores the {@link FCPPluginConnection} so in the future it can be obtained by its ID with\n{@link #getConnection(UUID)}.",
    "Reference": "Stores the {@link FCPPluginConnectionImpl} so in the future it can be obtained by its ID with\n{@link #getConnection(UUID)}.",
    "HebCup": "Stores the {@link FCPPluginConnectionImpl} so in the future it can be obtained by its ID with {@link#getConnection (UUID)}."
}
{
    "Origin": "The array length access has been removed\nfrom the offset.",
    "Reference": "The sequence length\naccess has been removed from the offset.",
    "HebCup": "The Sequence Length Access has been removed from the offset."
}
{
    "Origin": "Adds next request to {@link RequestType#BUNDLE_TRANSPORT_UPDATE} query.",
    "Reference": "Adds next request to {@link RequestType#CHANNEL_INFO_UPDATE} query.",
    "HebCup": "Adds next request to {@link RequestType#CHANNEL_INFO_UPDATE} query."
}
{
    "Origin": "Returns an immutable map containing zero mappings.",
    "Reference": "Returns an unmodifiable map containing zero mappings.",
    "HebCup": "Returns an Unmodifiable map containing zero mappings."
}
{
    "Origin": "Otherwise an empty {@link CachedResponse} will be added to the context, this will be used to cache the response once it has been\nreceived from the back-end service",
    "Reference": "Otherwise an empty {@link CachedResponse} will be added to the context, this will be used to cache the response once it has been\nreceived from the back-end API",
    "HebCup": "Otherwise an empty {@link CachedResponse} will be added to the context, this will be used to cache the response once it has been received from the back-end Api"
}
{
    "Origin": "Scheduler:\n {@code combineLatest} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Gets the deprecated keys, in the order to be checked.",
    "Reference": "Gets the fallback keys, in the order to be checked.",
    "HebCup": "Gets the fallback Keys, in the order to be checked."
}
{
    "Origin": "Sets the class name local service.",
    "Reference": "Sets the journal article local service.",
    "HebCup": "Sets the journal Article Local Service."
}
{
    "Origin": "This only applies to classes configured by\n{@link #withVerboseClasses(String...) verboseClasses}.",
    "Reference": "This only applies to classes configured by\n{@link #setVerboseClasses(String...) verboseClasses}.",
    "HebCup": "This only applies to classes configured by {@link #setVerboseClasses(String...) verboseClasses}."
}
{
    "Origin": "Adds next payload type information update request to\n{@link RequestType#RTP_DESCRIPTION_UPDATE} query currently being built.",
    "Reference": "Adds next payload type information update request to\n{@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.",
    "HebCup": "Adds next payload type information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built."
}
{
    "Origin": "Returns an immutable list containing nine elements.",
    "Reference": "Returns an unmodifiable list containing nine elements.",
    "HebCup": "Returns an Unmodifiable list containing nine elements."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Called to invalidate the cache - clearing it so that subsequent calls to getService()\nor getContract() will trigger a new fetch from the ES store.",
    "Reference": "Called to invalidate the cache - clearing it so that subsequent calls to getApi()\nor getContract() will trigger a new fetch from the ES store.",
    "HebCup": "Called to invalidate the cache - clearing it so that subsequent calls to getapi() or getContract() will trigger a new fetch from the ES store."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be\noptionally specified.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be\noptionally specified.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeySize () keySize} can be optionally specified."
}
{
    "Origin": "The {@link Secret} is required.",
    "Reference": "The {@link KeyVaultSecret} is required.",
    "HebCup": "The {@link KeyVaultSecret} is required."
}
{
    "Origin": "Conditions can be imported statically from {@link ExecutionEventConditions}\nand {@link TestExecutionResultConditions}.",
    "Reference": "Conditions can be imported statically from {@link EventConditions}\nand {@link TestExecutionResultConditions}.",
    "HebCup": "Conditions can be imported statically from {@link EventConditions} and {@link TestExecutionResultConditions}."
}
{
    "Origin": "Basic test of \"requires public\":\n    m1 requires m2, m2 requires public m3",
    "Reference": "Basic test of \"requires transitive\":\n    m1 requires m2, m2 requires transitive m3",
    "HebCup": "Basic test of ``requires TRANSITIVE``: m1 requires m2, m2 requires TRANSITIVE m3"
}
{
    "Origin": "Returns an immutable list containing six elements.",
    "Reference": "Returns an unmodifiable list containing six elements.",
    "HebCup": "Returns an Unmodifiable list containing six elements."
}
{
    "Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHttpHeaders)}",
    "Reference": "Code snippets for {@link BlobAsyncClient#setHttpHeaders(BlobHttpHeaders)}",
    "HebCup": "Code snippets for {@link BlobAsyncClient#setHttpHeaders (BlobHttpHeaders)}"
}
{
    "Origin": "Returns the formatted date and time of the signing date in UTC zone.",
    "Reference": "Returns the formatted date and time of the request signing date in UTC\nzone.",
    "HebCup": "Returns the formatted date and time of the Request Signing Date in UTC zone."
}
{
    "Origin": "Converts an entity to a DBObject.",
    "Reference": "Converts an entity to a Document.",
    "HebCup": "Converts an entity to a Document."
}
{
    "Origin": "RelationshipType for the left or right label as indicated by the second parameter.",
    "Reference": "RelationshipType for the left or right type as indicated by the second parameter.",
    "HebCup": "RelationshipType for the left or right Type as indicated by the second parameter."
}
{
    "Origin": "This is an overload of {@link #getUsers(int)} with {@code 100}.",
    "Reference": "This is an overload of {@link #retrieveUsers(int)} with {@code 100}.",
    "HebCup": "This is an overload of {@link#retrieveUsers (int)} with {@code 100}."
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "Then build a list of version differences i.e difference between the\nversion in the GossipDigest and the version in the local state for a given NetEndpoint.",
    "Reference": "Then build a list of version differences i.e difference between the\nversion in the GossipDigest and the version in the local state for a given NetNode.",
    "HebCup": "Then build a list of version differences i.e difference between the version in the GossipDigest and the version in the local state for a given NetNode."
}
{
    "Origin": "Load balancing decision are based on this\nnormalized {@link #getScore() score} (work is assigned to hosts in\ninverse proportion to the normalized load of the host).",
    "Reference": "Load balancing decision\nare based on this normalized {@link #getAvailability() score} (work is\nassigned to hosts in inverse proportion to the normalized load of the\nhost).",
    "HebCup": "Load balancing decision are based on this normalized {@link#getAvailability () score} (work is assigned to hosts in inverse proportion to the normalized load of the host)."
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting#string-string-OffsetDateTime}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string-OffsetDateTime}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string-OffsetDateTime}"
}
{
    "Origin": "Returns a collection of model objects which are based on the given\npermissions and target user.",
    "Reference": "Returns a collection of model objects which are based on the given\npermissions and target entity.",
    "HebCup": "Returns a collection of model objects which are based on the given permissions and target Entity."
}
{
    "Origin": "Gets the valueType.",
    "Reference": "Gets the type.",
    "HebCup": "Gets the type."
}
{
    "Origin": "Sets {@link View.OnClickListener} of the {@code CarMenuItem}.",
    "Reference": "Sets {@link OnClickListener} of the {@code CarMenuItem}.",
    "HebCup": "Sets {@link OnClickListener} of the {@code CarMenuItem}."
}
{
    "Origin": "Getting RawUpdatesHandler provider if set",
    "Reference": "Getting RawUpdatesHandler if set",
    "HebCup": "Getting RawUpdatesHandler if set"
}
{
    "Origin": "Checks whether the 'publicPort' field has been set",
    "Reference": "Checks whether the 'publicPorts' field has been set",
    "HebCup": "Checks whether the 'PublicPorts' field has been set"
}
{
    "Origin": "Set the Date that this Token was Created",
    "Reference": "Set the ZonedDateTime that this Token was Created",
    "HebCup": "Set the ZonedDateTime that this Token was Created"
}
{
    "Origin": "Returns a basic {@link ValueSupplier} that serves the value passed in",
    "Reference": "Returns a basic {@link org.ehcache.ValueSupplier} that serves the value passed in",
    "HebCup": "Returns a basic {@link org.ehcache.ValueSupplier} that serves the value passed in"
}
{
    "Origin": "Reads a {@link ServiceRequest} from information found in the inbound\nportion of the http request.",
    "Reference": "Reads a {@link ApiRequest} from information found in the inbound\nportion of the http request.",
    "HebCup": "Reads a {@link ApiRequest} from information found in the inbound portion of the http request."
}
{
    "Origin": "Helper to parse the imported file into an {@link ImportedGradeWrapper} depending on its type",
    "Reference": "Helper to parse the imported file into an {@link ImportedSpreadsheetWrapper} depending on its type",
    "HebCup": "Helper to parse the imported file into an {@link ImportedSpreadsheetWrapper} depending on its type"
}
{
    "Origin": "Find all RootGlideModules and save them to an instance variable (throw if > 1).",
    "Reference": "Find all AppGlideModules and save them to an instance variable (throw if > 1).",
    "HebCup": "Find all AppGlideModules and save them to an instance variable (throw if > 1)."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Setter for {@link #allowOnlyRequestedHeaders}",
    "Reference": "Setter for {@link #exposedHeaders}",
    "HebCup": "Setter for {@link#exposedHeaders}"
}
{
    "Origin": "Returns true if field ttlAction is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field ttlActionNotUsed is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field TtlActionNotUsed is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "{@link Publication#isOriginal()} is true,  then an {@link AeronException}\nwill be thrown and the recording not initiated.",
    "Reference": "{@link Publication#isOriginal()} is true,  then an {@link ArchiveException}\nwill be thrown and the recording not initiated.",
    "HebCup": "{@link Publication#isOriginal ()} is true, then an {@link ArchiveException} will be thrown and the recording not initiated."
}
{
    "Origin": "Start building a new factory class-based service binding.",
    "Reference": "Start building a new supplier class-based service binding.",
    "HebCup": "Start building a new Supplier Class-based service binding."
}
{
    "Origin": "See {@link #setPadding(int, int, int, int)}",
    "Reference": "See {@link #setPadding(float, float, float, float)}",
    "HebCup": "See {@link #setPadding(float, float, float, float)}"
}
{
    "Origin": "Creates a DBObject from this Point",
    "Reference": "Creates a Document from this Point",
    "HebCup": "Creates a Document from this Point"
}
{
    "Origin": "Encode a PiActionGroupMember to a ActionProfileMember.",
    "Reference": "Encode a PiActionProfileMember to a ActionProfileMember.",
    "HebCup": "Encode a PiActionProfileMember to a ActionProfileMember."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Create a {@link SNSNotificationsPublisher} unless one exists in the context already.",
    "Reference": "Create a {@link JobStateChangeSNSPublisher} unless one exists in the context already.",
    "HebCup": "Create a {@link JobStateChangeSNSPublisher} unless one exists in the context already."
}
{
    "Origin": "So, if the given {@link Quaterniond} is\nthe identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .",
    "Reference": "So, if the given {@link Quaterniondc} is\nthe identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .",
    "HebCup": "So, if the given {@link Quaterniondc} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given ."
}
{
    "Origin": "***** Property SXAPP *****",
    "Reference": "***** Property SXAPPSTORE *****",
    "HebCup": "***** Property SXAPPSTORE *****"
}
{
    "Origin": "Get attribute value.",
    "Reference": "Get property value.",
    "HebCup": "get Property value."
}
{
    "Origin": "Adds next ICE transport update request to\n{@link RequestType#TRANSPORT_UPDATE} query currently being built.",
    "Reference": "Adds next ICE transport update request to\n{@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.",
    "HebCup": "Adds next ICE transport update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built."
}
{
    "Origin": "Comma separated list of servers to start when starting tests",
    "Reference": "Comma separated list of servers to serverList when starting tests",
    "HebCup": "Comma separated list of servers to ServerList when starting tests"
}
{
    "Origin": "Datascience is always available as long as there is a valid license",
    "Reference": "Analytics is always available as long as there is a valid license",
    "HebCup": "Analytics is always available as long as there is a valid license"
}
{
    "Origin": "Provide a lazy {@link LaunchJobService} bean if one hasn't already been defined.",
    "Reference": "Provide a lazy {@link JobProcessManager} bean if one hasn't already been defined.",
    "HebCup": "Provide a lazy {@link JobProcessManager} bean if one hasn't already been defined."
}
{
    "Origin": "Reads {@link AnnotationData annotation data} on provided accessible object.",
    "Reference": "Reads {@link AnnotationData annotation data} on provided annotated element.",
    "HebCup": "Reads {@link AnnotationData annotation data} on provided Annotated Element."
}
{
    "Origin": "Sets the units of this drug order",
    "Reference": "Sets the dose units of this drug order",
    "HebCup": "Sets the doseUnits of this drug order"
}
{
    "Origin": "Generates a valid document ID for a service referenced by a contract, used to\nretrieve the service from ES.",
    "Reference": "Generates a valid document ID for a api referenced by a contract, used to\nretrieve the api from ES.",
    "HebCup": "Generates a valid document ID for a Api referenced by a contract, used to retrieve the Api from ES."
}
{
    "Origin": "The {@code onErrorResumeNext} method changes this\nbehavior.",
    "Reference": "The {@code onErrorResumeWith} method changes this\nbehavior.",
    "HebCup": "The {@code onErrorResumeWith} method changes this behavior."
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Adds a state (as a vertix) to the State-Flow Graph if not already present.",
    "Reference": "Adds a state (as a vertex) to the State-Flow Graph if not already present.",
    "HebCup": "Adds a state (as a Vertex) to the State-Flow Graph if not already present."
}
{
    "Origin": "Add validation for a particular signature",
    "Reference": "Add verification for a particular signature",
    "HebCup": "Add verification for a particular signature"
}
{
    "Origin": "Returns a number that encodes how contents of the arrangement are aligned vertically.",
    "Reference": "Returns a number that encodes how contents of the %type% are aligned vertically.",
    "HebCup": "Returns a number that encodes how contents of the %type% are aligned vertically."
}
{
    "Origin": "Get offset segment.",
    "Reference": "Get offset parameter index.",
    "HebCup": "get Offset Parameter Index."
}
{
    "Origin": "Creates external docs swagger definition.",
    "Reference": "Creates external docs openApi definition.",
    "HebCup": "Creates external docs openApi definition."
}
{
    "Origin": "If no filter is specified,\na default of \"(objectClass=*)\" is returned.",
    "Reference": "If no filter is specified,\na default of \"(objectClass=user)\" is returned.",
    "HebCup": "If no filter is specified, a default of ``(objectClass=user)`` is returned."
}
{
    "Origin": "Use this method if you don't have the source root but a LSDocument instance\nfor a document in the project.",
    "Reference": "Use this method if you don't have the source root but a LSDocument instance\nfor a lsDocument in the project.",
    "HebCup": "Use this method if you don't have the source root but a LSDocument instance for a lsDocument in the project."
}
{
    "Origin": "Returns a {@link TrackedDevicePose} view of the {@code standingTrackedDevicePose} field.",
    "Reference": "Returns a {@link TrackedDevicePose} view of the {@code trackedDevicePose} field.",
    "HebCup": "Returns a {@link TrackedDevicePose} view of the {@code trackedDevicePose} field."
}
{
    "Origin": "Encode a PiActionGroupMember to a ActionProfileMember.",
    "Reference": "Encode a PiActionProfileMember to a ActionProfileMember.",
    "HebCup": "Encode a PiActionProfileMember to a ActionProfileMember."
}
{
    "Origin": "Falls back on the attribute if the groups are the same size.",
    "Reference": "Falls back on the group key if the groups are the same size.",
    "HebCup": "Falls back on the GroupKey if the groups are the same size."
}
{
    "Origin": "Create an initial optimistic locking value according the {@link VersionType}\ncontract for the version property.",
    "Reference": "Create an initial optimistic locking value according the {@link VersionSupport}\ncontract for the version property.",
    "HebCup": "Create an initial optimistic locking value according the {@link VersionSupport} contract for the version property."
}
{
    "Origin": "Register one or more annotated classes to be processed.",
    "Reference": "Register one or more component classes to be processed.",
    "HebCup": "Register one or more component Classes to be processed."
}
{
    "Origin": "Get a {@link DirectExecutionContext} for the provided {@link PTransformNode} and key.",
    "Reference": "Get a {@link DirectStateAndTimers} for the provided {@link PTransformNode} and key.",
    "HebCup": "Get a {@link DirectStateAndTimers} for the provided {@link PTransformNode} and key."
}
{
    "Origin": "Is grand type supported service.",
    "Reference": "Is grant type supported service.",
    "HebCup": "is Grant Type Supported service."
}
{
    "Origin": "Removes the specified keys from the metadata of the specified {@link NamespacedEntityId}.",
    "Reference": "Removes the specified keys from the metadata of the specified {@link MetadataEntity}.",
    "HebCup": "Removes the specified keys from the metadata of the specified {@link MetadataEntity}."
}
{
    "Origin": "After the {@link InstanceManager} is created, we specifically do not call\nany more methods on it: the locator must instantiate the Immediate\nservice without any further prompting to the locator.",
    "Reference": "After the {@link InjectionManager} is created, we specifically do not call\nany more methods on it: the locator must instantiate the Immediate\nservice without any further prompting to the locator.",
    "HebCup": "After the {@link InjectionManager} is created, we specifically do not call any more methods on it: the locator must instantiate the Immediate service without any further prompting to the locator."
}
{
    "Origin": "Refreshes the JList with the log records contained by {@link DebugConsoleHandler}.",
    "Reference": "Refreshes the JList with the log records contained by {@link DebugConsoleAppender}.",
    "HebCup": "Refreshes the JList with the log records contained by {@link DebugConsoleAppender}."
}
{
    "Origin": "The calibration is defined using {@link CurveGroupDefinition}.",
    "Reference": "The calibration is defined using {@link RatesCurveGroupDefinition}.",
    "HebCup": "The calibration is defined using {@link RatesCurveGroupDefinition}."
}
{
    "Origin": "Returns the {@code AccountGroup} for the specified UUID if it exists.",
    "Reference": "Returns the {@code InternalGroup} for the specified UUID if it exists.",
    "HebCup": "Returns the {@code InternalGroup} for the specified UUID if it exists."
}
{
    "Origin": "Returns an unmodifiable Map of metadata for a given alias.",
    "Reference": "Returns an unmodifiable Map of properties for a given alias.",
    "HebCup": "Returns an unmodifiable Map of Properties for a given alias."
}
{
    "Origin": "Gets the request page number from the specified request URI and tag title.",
    "Reference": "Gets the request page number from the specified request URI and category URI.",
    "HebCup": "Gets the request page number from the specified request URI and category URI."
}
{
    "Origin": "Returns a literal for the {@link Reference} cardinality.",
    "Reference": "Returns a literal for the {@link ScrService.Reference} cardinality.",
    "HebCup": "Returns a literal for the {@link ScrService.Reference} cardinality."
}
{
    "Origin": "This function completes the input future when the channel is registered.",
    "Reference": "This function completes the input future when the channel is ready.",
    "HebCup": "This function completes the input future when the channel is Ready."
}
{
    "Origin": "Delegates to {@link AutowireUtils#resolveDependency}.",
    "Reference": "Delegates to {@link ParameterResolutionDelegate#resolveDependency}.",
    "HebCup": "Delegates to {@link ParameterResolutionDelegate#resolveDependency}."
}
{
    "Origin": "Parses the ballerina/http@config annotation and builds swagger definition.",
    "Reference": "Parses the ballerina/http@config annotation and builds openApi definition.",
    "HebCup": "Parses the ballerina/http @config annotation and builds openApi definition."
}
{
    "Origin": "Gets the synonymText.",
    "Reference": "Gets the synonym.",
    "HebCup": "Gets the synonym."
}
{
    "Origin": "Specifies if a visual feedback should be shown when a button with an assigned image\nis pressed.",
    "Reference": "Specifies if a visual feedback should be shown when a %type% with an assigned image\nis pressed.",
    "HebCup": "Specifies if a visual feedback should be shown when a %type% with an assigned image is pressed."
}
{
    "Origin": "Overload of {@link #connect(String, ServerStateListener, ServerConnectionFailListener)} with only one listener.",
    "Reference": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with only one listener.",
    "HebCup": "Overload of {@link#connect (String, ServerStateListener, ServerReconnectFilter)} with only one listener."
}
{
    "Origin": "Creates an instance of {@link RowFactory} using provided {@link RowTypeFactory}\nand {@link GeneratedGetterFactory}.",
    "Reference": "Creates an instance of {@link RowFactory} using provided {@link SchemaFactory}\nand {@link GeneratedGetterFactory}.",
    "HebCup": "Creates an instance of {@link RowFactory} using provided {@link SchemaFactory} and {@link GeneratedGetterFactory}."
}
{
    "Origin": "Special handling for NTFS ADS: Don't accept colon in the filename.",
    "Reference": "Special handling for NTFS ADS: Don't accept colon in the fileName.",
    "HebCup": "Special handling for NTFS ADS: Don't accept colon in the filename."
}
{
    "Origin": "Get the sorted iterable of all {@link RankedProvider providers} (custom and default) registered for the given service\nprovider contract in the underlying {@link InstanceManager instance manager} container.",
    "Reference": "Get the sorted iterable of all {@link RankedProvider providers} (custom and default) registered for the given service\nprovider contract in the underlying {@link InjectionManager injection manager} container.",
    "HebCup": "Get the sorted iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InjectionManager Injection Manager} container."
}
{
    "Origin": "This method returns the textual part of the filename before the last dot.",
    "Reference": "This method returns the textual part of the fileName before the last dot.",
    "HebCup": "This method returns the textual part of the fileName before the last dot."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Set the sentenceLocation.",
    "Reference": "Set the sentenceLocations.",
    "HebCup": "Set the sentenceLocations."
}
{
    "Origin": "Test if the paths are the same.",
    "Reference": "Test if the paths are the same name.",
    "HebCup": "Test if the paths are the same."
}
{
    "Origin": "The {@link MessageReceiver} will be selected in the following way\nfrom the {@link Cause} in {@link #getCause()}:",
    "Reference": "The {@link MessageChannel} will be selected in the following way\nfrom the {@link Cause} in {@link #getCause()}:",
    "HebCup": "The {@link MessageChannel} will be selected in the following way from the {@link Cause} in {@link#getCause ()}:"
}
{
    "Origin": "Associates memoryCacheKey with imageView.",
    "Reference": "Associates memoryCacheKey with imageAware.",
    "HebCup": "Associates memoryCacheKey with ImageAware."
}
{
    "Origin": "Sets the propagate flags for this event.",
    "Reference": "Sets the reserved flags for this event.",
    "HebCup": "Sets the Reserved flags for this event."
}
{
    "Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "HebCup": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."
}
{
    "Origin": "Create client request filtering stage using the instance manager.",
    "Reference": "Create client request filtering stage using the injection manager.",
    "HebCup": "Create client request filtering stage using the Injection Manager."
}
{
    "Origin": "Sets the value of the 'RowKey' field.",
    "Reference": "Sets the value of the 'rowKey' field.",
    "HebCup": "Sets the value of the 'rowKey' field."
}
{
    "Origin": "Gets the list of {@link SecretProperties SecretProperties} on this page.",
    "Reference": "Gets the iterable stream of {@link SecretProperties SecretProperties} on this page.",
    "HebCup": "Gets the IterableStream of {@link SecretProperties SecretProperties} on this page."
}
{
    "Origin": "The meta-property for the {@code referenceEntityIds} property.",
    "Reference": "The meta-property for the {@code legalEntityIds} property.",
    "HebCup": "The meta-property for the {@code legalEntityIds} property."
}
{
    "Origin": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaternionf, float)}\nusing their relative interpolation weights.",
    "Reference": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaternionfc, float)}\nusing their relative interpolation weights.",
    "HebCup": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaternionfc, float)} using their relative interpolation weights."
}
{
    "Origin": "Sets the value of the 'cf_name' field",
    "Reference": "Sets the value of the 'cfName' field.",
    "HebCup": "Sets the value of the 'cfName' field"
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Writes the service response to the HTTP servlet response object.",
    "Reference": "Writes the API response to the HTTP servlet response object.",
    "HebCup": "Writes the Api Response to the HTTP servlet response object."
}
{
    "Origin": "Get Repeated type.",
    "Reference": "Get Time Unit.",
    "HebCup": "get Time Unit."
}
{
    "Origin": "Gets the {@link MessageReceiver} that should be the target for any\nmessages sent by the command (by default).",
    "Reference": "Gets the {@link MessageChannel} that should be the target for any\nmessages sent by the command (by default).",
    "HebCup": "Gets the {@link MessageChannel} that should be the target for any messages sent by the command (by default)."
}
{
    "Origin": "Unregisters a content observer which was previously registered\nby calling registerContentObserver().",
    "Reference": "Unregisters a library observer which was previously registered\nby calling registerLibraryObserver().",
    "HebCup": "Unregisters a Library Observer which was previously registered by calling registerLibraryObserver()."
}
{
    "Origin": "Verifies that the given {@code csvContent} is the same as\nthe content given in the file at {@code filePathParam}.",
    "Reference": "Verifies that the given {@code csvContent} is the same as\nthe content given in the file at {@code fileName}.",
    "HebCup": "Verifies that the given {@code csvContent} is the same as the content given in the file at {@code fileName}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Adds next SSRC information update request to\n{@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.",
    "Reference": "Adds next source information update request to\n{@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.",
    "HebCup": "Adds next source information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built."
}
{
    "Origin": "Creates a MutableOptionsBundle from an existing immutable Configuration.",
    "Reference": "Creates a MutableOptionsBundle from an existing immutable Config.",
    "HebCup": "Creates a MutableOptionsBundle from an existing immutable Config."
}
{
    "Origin": "Create a new {@link BaseEvent} for each invocation.",
    "Reference": "Create a new {@link CoreEvent} for each invocation.",
    "HebCup": "Create a new {@link CoreEvent} for each invocation."
}
{
    "Origin": "Get the active candidate selector.",
    "Reference": "Get the active exclude selector.",
    "HebCup": "Get the active Exclude selector."
}
{
    "Origin": "The meta-property for the {@code upFrontFee} property.",
    "Reference": "The meta-property for the {@code upfrontFee} property.",
    "HebCup": "The meta-property for the {@code upfrontFee} property."
}
{
    "Origin": "Build the extern package list from given URL or the directory path.",
    "Reference": "Build the extern element list from given URL or the directory path.",
    "HebCup": "Build the extern Element List From given URL or the directory path."
}
{
    "Origin": "Determines whether the current user has permission to update the given\ntarget user, adding or removing the given permissions.",
    "Reference": "Determines whether the current user has permission to update the given\ntarget entity, adding or removing the given permissions.",
    "HebCup": "Determines whether the current user has permission to update the given target Entity, adding or removing the given permissions."
}
{
    "Origin": "The {@link EcKeyCreateOptions} parameter is required.",
    "Reference": "The {@link CreateEcKeyOptions} parameter is required.",
    "HebCup": "The {@link CreateEcKeyOptions} parameter is required."
}
{
    "Origin": "Set Allowed En Cashment?.",
    "Reference": "Set Allowed Encashment.",
    "HebCup": "Set Allowed Encashment?."
}
{
    "Origin": "Checks that a randomly generated {@link SkylarkSemanticsOptions} object can be converted to a\n{@link SkylarkSemantics} object with the same field values.",
    "Reference": "Checks that a randomly generated {@link SkylarkSemanticsOptions} object can be converted to a\n{@link StarlarkSemantics} object with the same field values.",
    "HebCup": "Checks that a randomly generated {@link SkylarkSemanticsOptions} object can be converted to a {@link StarlarkSemantics} object with the same field values."
}
{
    "Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.",
    "Reference": "If the given language code is {@code null}, uses\n{@link DisplaySettings#getShowsLanguageFallback(Context)}.",
    "HebCup": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguageFallback (Context)}."
}
{
    "Origin": "Inserts the given text at the position returned from\n{@code getAbsolutePosition(paragraphIndex, columnIndex)}.",
    "Reference": "Inserts the given text at the position returned from\n{@code getAbsolutePosition(paragraphIndex, columnPosition)}.",
    "HebCup": "Inserts the given text at the position returned from {@code getAbsolutePosition (paragraphIndex, columnPosition)}."
}
{
    "Origin": "If it's successfully completed, {@link BrowserResult#getMediaItem()} will return the library\nroot.",
    "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItem()} will return the library\nroot.",
    "HebCup": "If it's successfully completed, {@link LibraryResult#getMediaItem ()} will return the library root."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Returns the {@link DecisionTable} that is requested.",
    "Reference": "Returns the {@link DmnDecisionTable} that is requested.",
    "HebCup": "Returns the {@link DmnDecisionTable} that is requested."
}
{
    "Origin": "Register one or more annotated classes to be processed.",
    "Reference": "Register one or more component classes to be processed.",
    "HebCup": "Register one or more component Classes to be processed."
}
{
    "Origin": "This method returns the textual part of the filename after the last dot.",
    "Reference": "This method returns the textual part of the fileName after the last dot.",
    "HebCup": "This method returns the textual part of the fileName after the last dot."
}
{
    "Origin": "Add classpath elements, separated by the system path separator character.",
    "Reference": "Add classpath entries, separated by the system path separator character.",
    "HebCup": "add Classpath Entries, separated by the system path separator character."
}
{
    "Origin": "Creates an exception from an service id and version.",
    "Reference": "Creates an exception from an API id and version.",
    "HebCup": "Creates an exception from an api Id and version."
}
{
    "Origin": "Returns the member with the given name and type.",
    "Reference": "Returns the property with the given name and type.",
    "HebCup": "Returns the Property with the given name and type."
}
{
    "Origin": "Creates a mutable copy of {@code graph} with the same nodes and edges.",
    "Reference": "Creates a mutable copy of {@code network} with the same nodes and edges.",
    "HebCup": "Creates a mutable copy of {@code network} with the same nodes and edges."
}
{
    "Origin": "Note this method creates a HotStream that starts emitting data only when the first connecting Stream connects.",
    "Reference": "Note this method creates a Connectable that starts emitting data only when the first connecting Stream connects.",
    "HebCup": "Note this method creates a Connectable that starts emitting data only when the first connecting Stream connects."
}
{
    "Origin": "For example, the period in hours between two times can be calculated\nusing {@code startTime.periodUntil(endTime, HOURS)}.",
    "Reference": "For example, the period in hours between two times can be calculated\nusing {@code startTime.until(endTime, HOURS)}.",
    "HebCup": "For example, the period in hours between two times can be calculated using {@code startTime.until(endTime, HOURS)}."
}
{
    "Origin": "Once the prefetch is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "Reference": "Once the prepare is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "HebCup": "Once the prepare is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."
}
{
    "Origin": "Add an cache entry",
    "Reference": "Add an cache entries",
    "HebCup": "Add an cache entries"
}
{
    "Origin": "If {@code timeout} and {@code nanos}\nare both zero, then real time is not taken into consideration and the\nthread waits until awakened by one of the other causes.",
    "Reference": "If {@code timeoutMillis} and {@code nanos}\nare both zero, then real time is not taken into consideration and the\nthread waits until awakened by one of the other causes.",
    "HebCup": "If {@code timeoutMillis} and {@code nanos} are both zero, then real time is not taken into consideration and the thread waits until awakened by one of the other causes."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "testEstimationParametersMaterializedView",
    "Reference": "testSelectReplicated",
    "HebCup": "testSelectReplicated"
}
{
    "Origin": "The factory itself is bound in a per-lookup scope.",
    "Reference": "The supplier itself is bound in a per-lookup scope.",
    "HebCup": "The Supplier itself is bound in a per-lookup scope."
}
{
    "Origin": "Creates a {@link ModuleInfo} to reopen data at the given path.",
    "Reference": "Creates a {@link CommandInfo} to reopen data at the given path.",
    "HebCup": "Creates a {@link CommandInfo} to reopen data at the given path."
}
{
    "Origin": "Catches any exception thrown by provided {@link Supplier} and rethrows it as {@link",
    "Reference": "Catches any exception thrown by provided {@link ThrowingSupplier} and rethrows it as {@link",
    "HebCup": "Catches any exception thrown by provided {@link ThrowingSupplier} and rethrows it as {@link"
}
{
    "Origin": "***** Property JVERSIONint *****",
    "Reference": "***** Property JAVAVERSIONNUMBER *****",
    "HebCup": "***** Property JAVAVERSIONNUMBER *****"
}
{
    "Origin": "Sets the {@link DrmProvider} to use when handling DRM for media.",
    "Reference": "Sets the {@link MediaDrmCallback} to use when handling DRM for media.",
    "HebCup": "Sets the {@link MediaDrmCallback} to use when handling DRM for media."
}
{
    "Origin": "Code snippets for {@link BlobClientBase#setHTTPHeadersWithResponse(BlobHTTPHeaders, BlobAccessConditions, Duration,",
    "Reference": "Code snippets for {@link BlobClientBase#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,",
    "HebCup": "Code snippets for {@link BlobClientBase#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,"
}
{
    "Origin": "Create a {@link InstanceManager}.",
    "Reference": "Create a {@link InjectionManager}.",
    "HebCup": "Create a {@link InjectionManager}."
}
{
    "Origin": "Time (in ms) of last received appendPosition.",
    "Reference": "Time (in ns) of last received appendPosition.",
    "HebCup": "Time (in Ns) of last received appendPosition."
}
{
    "Origin": "If there are no\n{@link TradeOfferListMutator}s registered for the desired level\nand {@link Career}, the list remains unmodified.",
    "Reference": "If there are no\n{@link TradeOfferListMutator}s registered for the desired level\nand {@link Profession}, the list remains unmodified.",
    "HebCup": "If there are no {@link TradeOfferListMutator}s registered for the desired level and {@link Profession}, the list remains unmodified."
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient ()}."
}
{
    "Origin": "Set the fileCacheControl property: Sets the file's cache control.",
    "Reference": "Set the cacheControl property: Sets the file's cache control.",
    "HebCup": "Set the cacheControl property: Sets the file's cache control."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "If present then it is not an error if the schedule does not exist",
    "Reference": "If present then it is not an error if the task does not exist",
    "HebCup": "If present then it is not an error if the Task does not exist"
}
{
    "Origin": "Maven coordinates: org.apache.camel:camel-spark-rest",
    "Reference": "Maven coordinates: org.apache.camel:camel-spark",
    "HebCup": "Maven coordinates: org.apache.camel:camel-spark"
}
{
    "Origin": "Note, that an exception is thrown if the vertex id is not a valid Titan vertex id or if a vertex with the given\nid already exists.",
    "Reference": "Note, that an exception is thrown if the vertex id is not a valid JanusGraph vertex id or if a vertex with the given\nid already exists.",
    "HebCup": "Note, that an exception is thrown if the vertex id is not a valid Janus Graph Vertex id or if a vertex with the given id already exists."
}
{
    "Origin": "Converts a Titan vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}.",
    "Reference": "Converts a JanusGraph vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}.",
    "HebCup": "Converts a Janus Graph Vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}."
}
{
    "Origin": "and repositoryId = ?",
    "Reference": "and parentFolderId = ?",
    "HebCup": "and parentFolderId = ?"
}
{
    "Origin": "Get create Builtin Function Snippet Block.",
    "Reference": "Get convert Builtin Function Snippet Block.",
    "HebCup": "Get Convert Builtin Function Snippet Block."
}
{
    "Origin": "Returns the value of the {@code bitfield} field.",
    "Reference": "Returns the value of the {@code direction} field.",
    "HebCup": "Returns the value of the {@code direction} field."
}
{
    "Origin": "Reads the Hashes attribute",
    "Reference": "Reads the ModuleHashes attribute",
    "HebCup": "Reads the Module Hashes Attribute"
}
{
    "Origin": "Sets the value of the 'RowKey' field",
    "Reference": "Sets the value of the 'rowKey' field.",
    "HebCup": "Sets the value of the 'rowKey' field"
}
{
    "Origin": "Tests the {@link MasterWorkerInfo#generateClientWorkerInfo()} method.",
    "Reference": "Tests the {@link MasterWorkerInfo#generateWorkerInfo} method.",
    "HebCup": "Tests the {@link MasterWorkerInfo#generateWorkerInfo()} method."
}
{
    "Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method\nwhen all files are consistent.",
    "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method\nwhen all files are consistent.",
    "HebCup": "Tests the {@link FileSystemMaster#checkConsistency (AlluxioURI, CheckConsistencyContext)} method when all files are consistent."
}
{
    "Origin": "Get the active candidate selector.",
    "Reference": "Get the active exclude selector.",
    "HebCup": "Get the active Exclude selector."
}
{
    "Origin": "Returns a map of methods and corresponding SkylarkCallable annotations of the methods of the\nclassObj class reachable from Skylark.",
    "Reference": "Returns a map of methods and corresponding SkylarkCallable annotations of the methods of the\nobjClass class reachable from Skylark.",
    "HebCup": "Returns a map of methods and corresponding SkylarkCallable annotations of the methods of the objClass class reachable from Skylark."
}
{
    "Origin": "Converts the entries from this query result into actual {@link TitanRelation}.",
    "Reference": "Converts the entries from this query result into actual {@link JanusGraphRelation}.",
    "HebCup": "Converts the entries from this query result into actual {@link JanusGraphRelation}."
}
{
    "Origin": "RsaKeyCreateOptions#getNotBefore() notBefore} values are optional.",
    "Reference": "CreateRsaKeyOptions#getNotBefore() notBefore} values are optional.",
    "HebCup": "CreateRsaKeyOptions#getNotBefore () notBefore} values are optional."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromURL#URL}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromURL#String}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromURL#String}"
}
{
    "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates\n{@link TimedMetaData2}.",
    "Reference": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates\n{@link TimedMetaData}.",
    "HebCup": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData}."
}
{
    "Origin": "Gets the value of the 'BloomFilter' field",
    "Reference": "Gets the value of the 'bloomFilter' field.",
    "HebCup": "Gets the value of the 'bloomFilter' field"
}
{
    "Origin": "Static factory that immediately returns {@link #to() method picker}.",
    "Reference": "Static factory that immediately returns {@link #get() method picker}.",
    "HebCup": "Static factory that immediately returns {@link#get () method picker}."
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "If you have an EdgeIteratorState the other createTraversalKey is preferred!",
    "Reference": "If you have an EdgeIteratorState the other createTraversalId is preferred!",
    "HebCup": "If you have an EdgeIteratorState the other createTraversalId is preferred!"
}
{
    "Origin": "Throw a {@link RuntimeException} with a message for a send error.",
    "Reference": "Throw a {@link AeronException} with a message for a send error.",
    "HebCup": "Throw a {@link AeronException} with a message for a send error."
}
{
    "Origin": "Returns a literal for the {@link Component} state.",
    "Reference": "Returns a literal for the {@link ScrService.Component} state.",
    "HebCup": "Returns a literal for the {@link ScrService.Component} state."
}
{
    "Origin": "This method sets the value of the database column s_user.dateofbirth",
    "Reference": "This method sets the value of the database column s_user.birthday",
    "HebCup": "This method sets the value of the database column s_user.Birthday"
}
{
    "Origin": "This\ndeclaration is of the form \"Label lXXX = new Label();\".",
    "Reference": "This declaration is of the\nform \"Label labelXXX = new Label();\".",
    "HebCup": "This declaration is of the form ``Label labelXXX = new Label();``."
}
{
    "Origin": "Sets the current end icon to be VISIBLE or GONE.",
    "Reference": "Sets the current end icon to be VISIBLE or INVISIBLE.",
    "HebCup": "Sets the current end icon to be VISIBLE or INVISIBLE."
}
{
    "Origin": "Checks that a randomly generated {@link SkylarkSemantics} object can be serialized and\ndeserialized to an equivalent object.",
    "Reference": "Checks that a randomly generated {@link StarlarkSemantics} object can be serialized and\ndeserialized to an equivalent object.",
    "HebCup": "Checks that a randomly generated {@link StarlarkSemantics} object can be serialized and deserialized to an equivalent object."
}
{
    "Origin": "Gets the available {@link TradeOfferListMutator}s for the desired\n{@link Career} and {@code level}.",
    "Reference": "Gets the available {@link TradeOfferListMutator}s for the desired\n{@link Profession} and {@code level}.",
    "HebCup": "Gets the available {@link TradeOfferListMutator}s for the desired {@link Profession} and {@code level}."
}
{
    "Origin": "Set this {@link AxisAngle4d} to be equivalent to the given\n{@link Quaterniond}.",
    "Reference": "Set this {@link AxisAngle4d} to be equivalent to the given\n{@link Quaterniondc}.",
    "HebCup": "Set this {@link AxisAngle4d} to be equivalent to the given {@link Quaterniondc}."
}
{
    "Origin": "Adds pending task object.",
    "Reference": "Adds continuous task object.",
    "HebCup": "Adds Continuous task object."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubDirectory#String}",
    "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectory#String}",
    "HebCup": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectory#String}"
}
{
    "Origin": "Locks existing inodes on the path to the inode specified by an id, in the specified\n{@link LockMode}.",
    "Reference": "Locks existing inodes on the path to the inode specified by an id, in the specified\n{@link LockPattern}.",
    "HebCup": "Locks existing inodes on the path to the inode specified by an id, in the specified {@link LockPattern}."
}
{
    "Origin": "Persist the fallbackStorageProperties to the fallbackStorageFile.",
    "Reference": "Persist the fallbackStorage to the fallbackStorageFile.",
    "HebCup": "Persist the fallbackStorage to the fallbackStorageFile."
}
{
    "Origin": "If defaultSessionType is null,\n    TEAMEVALUATION is selected by default.",
    "Reference": "If defaultSessionTemplateType is null,\n    TEAMEVALUATION is selected by default.",
    "HebCup": "If defaultSessionTemplateType is null, TEAMEVALUATION is selected by default."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "A helper method to search for segments of a request path.",
    "Reference": "A helper method to search for pathSegments of a request path.",
    "HebCup": "A helper method to search for pathSegments of a request path."
}
{
    "Origin": "Validates and returns the underlying {@link LogicalType} of the given {@link Schema.Field}.",
    "Reference": "Validates and returns the underlying {@link LogicalType} Schema of the given {@link Schema.Field}.",
    "HebCup": "Validates and returns the underlying {@link LogicalTypeSchema} of the given {@link Schema.Field}."
}
{
    "Origin": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link CurveId} as the identifier.",
    "Reference": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link RatesCurveId} as the identifier.",
    "HebCup": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier."
}
{
    "Origin": "Prints a record with the specified fields.",
    "Reference": "Prints a record with the specified entries.",
    "HebCup": "Prints a record with the specified entries."
}
{
    "Origin": "The gossip digest is built based on randomization\nrather than just looping through the collection of live endpoints.",
    "Reference": "The gossip digest is built based on randomization\nrather than just looping through the collection of live nodes.",
    "HebCup": "The gossip digest is built based on randomization rather than just looping through the collection of live nodes."
}
{
    "Origin": "Code snippets for {@link BlobClientBase#setHTTPHeaders(BlobHTTPHeaders)}",
    "Reference": "Code snippets for {@link BlobClientBase#setHTTPHeaders(BlobHttpHeaders)}",
    "HebCup": "Code snippets for {@link BlobClientBase#setHTTPHeaders(BlobHttpHeaders)}"
}
{
    "Origin": "Returns the quorum name for operations.",
    "Reference": "Returns the split brain protection name for operations.",
    "HebCup": "Returns the split Brain Protection Name for operations."
}
{
    "Origin": "Sets the quorum name for queue operations.",
    "Reference": "Sets the split brain protection name for queue operations.",
    "HebCup": "Sets the split Brain Protection Name for queue operations."
}
{
    "Origin": "Walk through the jdk11 directory and create a mapping, {@link #jdk11StubFiles}, from file\nname to the class contained with in it.",
    "Reference": "Walk through the jdk directory and create a mapping, {@link #jdkStubFiles}, from file name to\nthe class contained with in it.",
    "HebCup": "Walk through the jdk directory and create a mapping, {@link #jdkStubFiles}, from file name to the class contained with in it."
}
{
    "Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix.",
    "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix.",
    "HebCup": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix."
}
{
    "Origin": "Register a record reader.",
    "Reference": "Register a record writer listener.",
    "HebCup": "Register a Record Writer Listener."
}
{
    "Origin": "Adds tags for the specified {@link NamespacedEntityId}.",
    "Reference": "Adds tags for the specified {@link MetadataEntity}.",
    "HebCup": "Adds tags for the specified {@link MetadataEntity}."
}
{
    "Origin": "Extracts GCM topic names out of a given Criteria object (e.g.",
    "Reference": "Extracts FCM topic names out of a given Criteria object (e.g.",
    "HebCup": "Extracts FCM topic names out of a given Criteria object (e.g."
}
{
    "Origin": "Sets the value of the 'KeepDeletedCells' field",
    "Reference": "Sets the value of the 'keepDeletedCells' field.",
    "HebCup": "Sets the value of the 'keepDeletedCells' field"
}
{
    "Origin": "Now loop through the sorted list and retrieve the GossipDigest corresponding\nto the endpoint from the map that was initially constructed.",
    "Reference": "Now loop through the sorted list and retrieve the GossipDigest corresponding\nto the node from the map that was initially constructed.",
    "HebCup": "Now loop through the sorted list and retrieve the GossipDigest corresponding to the Node from the map that was initially constructed."
}
{
    "Origin": "Note that time is adjusted backwards by a week to account for possible clock drift in the block headers.",
    "Reference": "Note that timeSecs is adjusted backwards by a week to account for possible clock drift in the block headers.",
    "HebCup": "Note that timeSecs is adjusted backwards by a week to account for possible clock drift in the block headers."
}
{
    "Origin": "Factory method that returns list of callable tasks for performing maxpooling operation",
    "Reference": "Factory method that returns list of callable tasks for performing pooling operation",
    "HebCup": "Factory method that returns list of callable tasks for performing Pooling operation"
}
{
    "Origin": "Such permission\ndepends on whether the current user is a system administrator, whether\nthey have explicit UPDATE permission on the target user, and whether\nthey have explicit ADMINISTER permission on all affected objects.",
    "Reference": "Such permission\ndepends on whether the current user is a system administrator, whether\nthey have explicit UPDATE permission on the target entity, and whether\nthey have explicit ADMINISTER permission on all affected objects.",
    "HebCup": "Such permission depends on whether the current user is a system administrator, whether they have explicit UPDATE permission on the target Entity, and whether they have explicit ADMINISTER permission on all affected objects."
}
{
    "Origin": "Standard getter for the rightwardlabel String in this Relationship",
    "Reference": "Standard getter for the rightwardValue String in this Relationship",
    "HebCup": "Standard getter for the rightwardValue String in this Relationship"
}
{
    "Origin": "Return the current starting address.",
    "Reference": "Return the current head segment.",
    "HebCup": "Return the current head Segment."
}
{
    "Origin": "Create a TransactionStatus instance for the given arguments.",
    "Reference": "Create a ReactiveTransaction instance for the given arguments.",
    "HebCup": "Create a ReactiveTransaction instance for the given arguments."
}
{
    "Origin": "Alias for {@link Future#successful(ExecutorService, Object)}",
    "Reference": "Alias for {@link Future#successful(Executor, Object)}",
    "HebCup": "Alias for {@link Future#successful(Executor, Object)}"
}
{
    "Origin": "Test of npara method, of class NegativeBinomialDistribution.",
    "Reference": "Test of length method, of class NegativeBinomialDistribution.",
    "HebCup": "Test of Length method, of class NegativeBinomialDistribution."
}
{
    "Origin": "Gets an integer from the given element.",
    "Reference": "Gets an integer from the given string.",
    "HebCup": "Gets an integer from the given String."
}
{
    "Origin": "Removes all the sync d l objects where companyId = ?",
    "Reference": "Removes all the sync d l objects where repositoryId = ?",
    "HebCup": "Removes all the sync d l objects where repositoryId = ?"
}
{
    "Origin": "Invokes parent.resolveRequires to resolve the given root modules.",
    "Reference": "Invokes parent.resolve to resolve the given root modules.",
    "HebCup": "Invokes parent.resolve to resolve the given root modules."
}
{
    "Origin": "Objects of the following type(s) are allowed in the list\n{@link Response.Fixed.Category }",
    "Reference": "Objects of the following type(s) are allowed in the list\n{@link Response.Fixed.Item }",
    "HebCup": "Objects of the following type (s) are allowed in the list {@link Response.Fixed.Item}"
}
{
    "Origin": "Scope of the schedule.",
    "Reference": "Scope of the task.",
    "HebCup": "Scope of the Task."
}
{
    "Origin": "Create and return a {@link UserDefinedFunctionInfo} object encapsulating information obtained\nfrom the given function and from its parsed docstring.",
    "Reference": "Create and return a {@link StarlarkFunctionInfo} object encapsulating information obtained from\nthe given function and from its parsed docstring.",
    "HebCup": "Create and return a {@link StarlarkFunctionInfo} object encapsulating information obtained from the given function and from its parsed docstring."
}
{
    "Origin": "Returns {@code true} if the given name is a legal binary name.",
    "Reference": "Returns {@code true} if the given name is a legal type name.",
    "HebCup": "Returns {@code true} if the given name is a legal Type Name."
}
{
    "Origin": "Code snippet for {@link DataLakeDirectoryClient#getSubDirectoryClient(String)}",
    "Reference": "Code snippet for {@link DataLakeDirectoryClient#getSubdirectoryClient(String)}",
    "HebCup": "Code snippet for {@link DataLakeDirectoryClient#getSubdirectoryClient (String)}"
}
{
    "Origin": "Slight performance increase over {@link #render(VertexBuffer)}.",
    "Reference": "Slight performance increase over {@link #render(BufferBuilder)}.",
    "HebCup": "Slight performance increase over {@link #render(BufferBuilder)}."
}
{
    "Origin": "Return a set of all extensions with the given element name and namespace.",
    "Reference": "Return a list of all extensions with the given element name and namespace.",
    "HebCup": "Return a List of all extensions with the given element name and namespace."
}
{
    "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "HebCup": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners."
}
{
    "Origin": "Adds a {@link SurfaceConfiguration} to the combination.",
    "Reference": "Adds a {@link SurfaceConfig} to the combination.",
    "HebCup": "Adds a {@link SurfaceConfig} to the combination."
}
{
    "Origin": "Multiply this duration with the given duration",
    "Reference": "Multiply this amount with the given amount",
    "HebCup": "Multiply this amount with the given amount"
}
{
    "Origin": "The given {@link MediaItem2} is\nset as the tag of the source.",
    "Reference": "The given {@link MediaItem} is\nset as the tag of the source.",
    "HebCup": "The given {@link MediaItem} is set as the tag of the source."
}
{
    "Origin": "Creates a {@code For}-comprehension of 8 Iterables.",
    "Reference": "Creates a {@code For}-comprehension of 8 Options.",
    "HebCup": "Creates a {@code For}-comprehension of 8 Iterables."
}
{
    "Origin": "CaloriesBurned} data point.",
    "Reference": "CaloriesBurned1} data point.",
    "HebCup": "CaloriesBurned1} data point."
}
{
    "Origin": "Add a Info EventLogItem and log.",
    "Reference": "Add a Info EventLogEntry and log.",
    "HebCup": "Add a Info EventLogEntry and log."
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Stub of {@link Plugin#willDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)}\nfor subclasses to override",
    "Reference": "Stub of {@link Plugin#beforeDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)}\nfor subclasses to override",
    "HebCup": "Stub of {@link Plugin#beforeDeclareProperty (TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} for subclasses to override"
}
{
    "Origin": "In other words, other\nsessions can continue to play during the prefetch of this session.",
    "Reference": "In other words, other\nsessions can continue to play during the prepare of this session.",
    "HebCup": "In other words, other sessions can continue to play during the prepare of this session."
}
{
    "Origin": "Clears the value of the 'publicPort' field",
    "Reference": "Clears the value of the 'publicPorts' field",
    "HebCup": "Clears the value of the 'PublicPorts' field"
}
{
    "Origin": "The negative of {@code contains} is {@link #absent}.",
    "Reference": "The negative of {@code contains} is {@link #notContaining}.",
    "HebCup": "The negative of {@code contains} is {@link#notContaining}."
}
{
    "Origin": "Returns the field value run through all converters and validators,\nbut doesn't pass the {@link ValidationStatus} to any status handler.",
    "Reference": "Returns the field value run through all converters and validators,\nbut doesn't pass the {@link BindingValidationStatus} to any status handler.",
    "HebCup": "Returns the field value run through all converters and validators, but doesn't pass the {@link BindingValidationStatus} to any status handler."
}
{
    "Origin": "Ensure that the service still exists.",
    "Reference": "Ensure that the api still exists.",
    "HebCup": "Ensure that the Api still exists."
}
{
    "Origin": "Connect to a single server with retry.",
    "Reference": "Connect to a single server.",
    "HebCup": "Connect to a single Server."
}
{
    "Origin": "Peeks from the beginning of the input to see if {@link #FLAC_SIGNATURE} is present.",
    "Reference": "Peeks from the beginning of the input to see if {@link #FLAC_STREAM_MARKER} is present.",
    "HebCup": "Peeks from the beginning of the input to see if {@link#FLAC_STREAM_MARKER} is present."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "{@link PathSourcePath}s utilize the\n{@link ProjectSourcePathResolver#pathSourcePathResolver} to resolve the path.",
    "Reference": "{@link PathSourcePath}s utilize the\n{@link ProjectSourcePathResolver#pathSourcePathResolverAdapter} to resolve the path.",
    "HebCup": "{@link PathSourcePath}s utilize the {@link ProjectSourcePathResolver#pathSourcePathResolverAdapter} to resolve the path."
}
{
    "Origin": "Returns an {@link Operator} that runs a select query for each list of\nparameter objects in the source observable.",
    "Reference": "Returns an {@link Transformer} that runs a select query for each list\nof parameter objects in the source observable.",
    "HebCup": "Returns an {@link Transformer} that runs a select query for each list of parameter objects in the source observable."
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this {@link #isAffine() affine} matrix and store\nthe result in .",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this {@link #isAffine() affine} matrix and store\nthe result in .",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this {@link#isAffine () affine} matrix and store the result in ."
}
{
    "Origin": "The default implementation wraps the class in a generic type and calls {@link\n#canEncode(GenericType)}, therefore it is invariant as well.",
    "Reference": "The default implementation wraps the class in a generic type and calls {@link\n#accepts(GenericType)}, therefore it is invariant as well.",
    "HebCup": "The default implementation wraps the class in a generic type and calls {@link#accepts (GenericType)}, therefore it is invariant as well."
}
{
    "Origin": "Sets the vector collection factory used to accelerate the nearest\nneighbor search.",
    "Reference": "Sets the vector collection  used to accelerate the nearest\nneighbor search.",
    "HebCup": "Sets the Vector Collection used to accelerate the nearest neighbor search."
}
{
    "Origin": "Returns true if field ttl is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field ttlNotUsed is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field TTLNOTUSED is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "SQL-Java type mapping, with specified Beam rules: \n1. redirect {@link ReadableInstant} to {@link Date} so Calcite can recognize it.",
    "Reference": "SQL-Java type mapping, with specified Beam rules: \n1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.",
    "HebCup": "SQL-Java type mapping, with specified Beam rules: 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it."
}
{
    "Origin": "Setter for {@link #exposeHeaders}",
    "Reference": "Setter for {@link #allowHeaders}",
    "HebCup": "Setter for {@link#allowHeaders}"
}
{
    "Origin": "Checks the {@link LoadMetadataType} to determine whether or not to proceed in loading\nmetadata.",
    "Reference": "Checks the {@link LoadMetadataPType} to determine whether or not to proceed in loading\nmetadata.",
    "HebCup": "Checks the {@link LoadMetadataPType} to determine whether or not to proceed in loading metadata."
}
{
    "Origin": "Get values.",
    "Reference": "Get value expressions.",
    "HebCup": "get Value Expressions."
}
{
    "Origin": "Tests resilency when egress device is down.",
    "Reference": "Tests resiliency when egress device is down.",
    "HebCup": "Tests resiliency when egress device is down."
}
{
    "Origin": "Constructs and returns a new instance of {@link Dimension}.",
    "Reference": "Constructs and returns a new instance of {@link DimensionColumn}.",
    "HebCup": "Constructs and returns a new instance of {@link DimensionColumn}."
}
{
    "Origin": "Test of parse method, of class CertificateVerifyMessageParser.",
    "Reference": "Test of parse method, of class CertificateVerifyParser.",
    "HebCup": "Test of parse method, of class CertificateVerifyParser."
}
{
    "Origin": "Generate the next increment in the optimistic locking value according\nthe {@link VersionType} contract for the version property.",
    "Reference": "Generate the next increment in the optimistic locking value according\nthe {@link VersionSupport} contract for the version property.",
    "HebCup": "Generate the next increment in the optimistic locking value according the {@link VersionSupport} contract for the version property."
}
{
    "Origin": "Optional.absent()} if the AST node doesn't correspond to a 'simple' lock expression.",
    "Reference": "Optional.empty()} if the AST node doesn't correspond to a 'simple' lock expression.",
    "HebCup": "Optional.empty ()} if the AST node doesn't correspond to a 'simple' lock expression."
}
{
    "Origin": "Returns the event index.",
    "Reference": "Returns the event indexes.",
    "HebCup": "Returns the event Indexes."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.startCopyFromURL#URL}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.startCopyFromURL#String}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.startCopyFromURL#String}"
}
{
    "Origin": "Returns a range of all the sync d l objects where companyId = ?",
    "Reference": "Returns a range of all the sync d l objects where repositoryId = ?",
    "HebCup": "Returns a range of all the sync d l objects where repositoryId = ?"
}
{
    "Origin": "Binds the specified {@link Service} at the specified {@link Route} of the default\n{@link VirtualHost}.",
    "Reference": "Binds the specified {@link HttpService} at the specified {@link Route} of the default\n{@link VirtualHost}.",
    "HebCup": "Binds the specified {@link HttpService} at the specified {@link Route} of the default {@link VirtualHost}."
}
{
    "Origin": "Check equality between two String objects, specifying (offset,len) pairs\n  for limiting the fragments to be checked.",
    "Reference": "Check equality between two CharSequence objects, specifying (offset,len) pairs\n  for limiting the fragments to be checked.",
    "HebCup": "Check equality between two CharSequence objects, specifying (offset,len) pairs for limiting the fragments to be checked."
}
{
    "Origin": "For example, the period in days between two dates can be calculated\nusing {@code startInstant.periodUntil(endInstant, SECONDS)}.",
    "Reference": "For example, the period in days between two dates can be calculated\nusing {@code startInstant.until(endInstant, SECONDS)}.",
    "HebCup": "For example, the period in days between two dates can be calculated using {@code startInstant.until(endInstant, SECONDS)}."
}
{
    "Origin": "If the prefetch is not needed, {@link #playFromSearch} can be directly called\nwithout this method.",
    "Reference": "If the prepare is not needed, {@link #playFromSearch} can be directly called\nwithout this method.",
    "HebCup": "If the prepare is not needed, {@link#playFromSearch} can be directly called without this method."
}
{
    "Origin": "The meta-property for the {@code convention} property.",
    "Reference": "The meta-property for the {@code volatilitiesName} property.",
    "HebCup": "The meta-property for the {@code volatilitiesName} property."
}
{
    "Origin": "Overload of {@link #connect(String, ServerStateListener, ServerConnectionFailListener)} with no listeners.",
    "Reference": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with no listeners.",
    "HebCup": "Overload of {@link#connect (String, ServerStateListener, ServerReconnectFilter)} with no listeners."
}
{
    "Origin": "Tests {@code globalRecommend(long, int)}.",
    "Reference": "Tests {@code recommendRelatedItems()(long, int)}.",
    "HebCup": "Tests {@code recommendRelatedItems(long, int)}."
}
{
    "Origin": "Match statement against pattern for drop schedule",
    "Reference": "Match statement against pattern for drop task",
    "HebCup": "Match statement against pattern for Drop Task"
}
{
    "Origin": "Test of var method, of class BernoulliDistribution.",
    "Reference": "Test of variance method, of class BernoulliDistribution.",
    "HebCup": "Test of Variance method, of class BernoulliDistribution."
}
{
    "Origin": "If the {@code null} is returned,\n{@link SessionResult#RESULT_CODE_UNKNOWN_ERROR} will be returned.",
    "Reference": "If the {@code null} is returned,\n{@link SessionResult#RESULT_ERROR_UNKNOWN_ERROR} will be returned.",
    "HebCup": "If the {@code null} is returned, {@link SessionResult#RESULT_ERROR_UNKNOWN_ERROR} will be returned."
}
{
    "Origin": "Returns the request's call sequence.",
    "Reference": "Returns the request's command sequence.",
    "HebCup": "Returns the request's Command Sequence."
}
{
    "Origin": "This is why there is not a set method for the paragraphContent property.",
    "Reference": "This is why there is not a set method for the content property.",
    "HebCup": "This is why there is not a set method for the content property."
}
{
    "Origin": "Sets the {@link DecoratingServiceFunction} and returns {@link ServerBuilder} that this\n{@link DecoratingServiceBindingBuilder} was created from.",
    "Reference": "Sets the {@link DecoratingHttpServiceFunction} and returns {@link ServerBuilder} that this\n{@link DecoratingServiceBindingBuilder} was created from.",
    "HebCup": "Sets the {@link DecoratingHttpServiceFunction} and returns {@link ServerBuilder} that this {@link DecoratingServiceBindingBuilder} was created from."
}
{
    "Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix.",
    "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix.",
    "HebCup": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix."
}
{
    "Origin": "Returns true if field traceId is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field sampled is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field Sampled is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "Add a Debug EventLogItem and log.",
    "Reference": "Add a Debug EventLogEntry and log.",
    "HebCup": "Add a Debug EventLogEntry and log."
}
{
    "Origin": "Standard getter for the leftwardLabel String in this Relationship",
    "Reference": "Standard getter for the leftwardValue String in this Relationship",
    "HebCup": "Standard getter for the leftwardValue String in this Relationship"
}
{
    "Origin": "Returns  if the given type has {@link ITokenType#TF_SEPARATOR_DOCUMENT} set.",
    "Reference": "Returns  if the given type has {@link ITokenTypeAttribute#TF_SEPARATOR_DOCUMENT} set.",
    "HebCup": "Returns if the given type has {@link ITokenTypeAttribute#TF_SEPARATOR_DOCUMENT} set."
}
{
    "Origin": "Returns the exporerFileEntryOptions.",
    "Reference": "Returns the explorerFileEntryOptions.",
    "HebCup": "Returns the ExplorerFileEntryOptions."
}
{
    "Origin": "Sets the specified value to the {@code bitfield} field.",
    "Reference": "Sets the specified value to the {@code baselineUsesContext} field.",
    "HebCup": "Sets the specified value to the {@code baselineUsesContext} field."
}
{
    "Origin": "Create a {@link MediaItem2} with the id.",
    "Reference": "Create a {@link MediaItem} with the id.",
    "HebCup": "Create a {@link MediaItem} with the id."
}
{
    "Origin": "have been added with {@link #activateIndex(StorageIndexReference)}.",
    "Reference": "have been added with {@link #activateIndex(IndexDescriptor2)}.",
    "HebCup": "have been added with {@link #activateIndex(IndexDescriptor2)}."
}
{
    "Origin": "Removes all of the service contracts from ES.",
    "Reference": "Removes all of the api contracts from ES.",
    "HebCup": "Removes all of the Api Contracts from ES."
}
{
    "Origin": "Creates a {@link BlockInStream} to read from a netty data server.",
    "Reference": "Creates a {@link BlockInStream} to read from a gRPC data server.",
    "HebCup": "Creates a {@link BlockInStream} to read from a Grpc data server."
}
{
    "Origin": "Encode a PI action group to a action profile group.",
    "Reference": "Encode a PI action profile group to a action profile group.",
    "HebCup": "Encode a Pi Action Profile Group to a action profile group."
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings#settingSelector-context}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listConfigurationSettings#settingSelector-context}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listConfigurationSettings#settingSelector-context}"
}
{
    "Origin": "Attempts to close the thread gracefully.",
    "Reference": "Attempts to shutdown the thread gracefully.",
    "HebCup": "Attempts to shutdown the thread gracefully."
}
{
    "Origin": "Restart if this particular result of the disablement of a plugin and its dependant plugins (depending on the\nstrategy used) has a plugin disablexd.",
    "Reference": "Restart if this particular result of the disablement of a plugin and its dependent plugins (depending on the\nstrategy used) has a plugin disablexd.",
    "HebCup": "Restart if this particular result of the disablement of a plugin and its Dependent plugins (depending on the strategy used) has a plugin disablexd."
}
{
    "Origin": "Fire {@link IStorageSegment} changed when an {@link I_M_AttributeInstance} is changed.",
    "Reference": "Fire {@link IShipmentScheduleSegment} changed when an {@link I_M_AttributeInstance} is changed.",
    "HebCup": "Fire {@link IShipmentScheduleSegment} changed when an {@link I_M_AttributeInstance} is changed."
}
{
    "Origin": "Get the Java Home property value for the given os_type.",
    "Reference": "Get the Java Home property value for the given osFamily.",
    "HebCup": "Get the Java Home property value for the given osFamily."
}
{
    "Origin": "Gets the packlet information for given mpack.",
    "Reference": "Gets the module information for given mpack.",
    "HebCup": "Gets the Module information for given mpack."
}
{
    "Origin": "Creates headers definitions for swagger response.",
    "Reference": "Creates headers definitions for openApi response.",
    "HebCup": "Creates headers definitions for OpenApi response."
}
{
    "Origin": "Removes all properties for the specified {@link NamespacedEntityId}.",
    "Reference": "Removes all properties for the specified {@link MetadataEntity}.",
    "HebCup": "Removes all properties for the specified {@link MetadataEntity}."
}
{
    "Origin": "Note this method creates a HotStream that starts emitting data only when the first connecting Stream connects.",
    "Reference": "Note this method creates a Connectable that starts emitting data only when the first connecting Stream connects.",
    "HebCup": "Note this method creates a Connectable that starts emitting data only when the first connecting Stream connects."
}
{
    "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "HebCup": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners."
}
{
    "Origin": "An override to the global {@code scriptEvaluationTimeout} setting on the script engine.",
    "Reference": "An override to the global {@code evaluationTimeout} setting on the script engine.",
    "HebCup": "An override to the global {@code evaluationTimeout} setting on the script engine."
}
{
    "Origin": "Getter for the output directory where the data files are stored.",
    "Reference": "Getter for the directory where the data files are stored.",
    "HebCup": "Getter for the directory where the data files are stored."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Return the {@link LiquibaseSerializable.SerializationType} to use when serializing this object.",
    "Reference": "Return the {@link liquibase.serializer.LiquibaseSerializable.SerializationType}\nto use when serializing this object.",
    "HebCup": "Return the {@link liquibase.serializer.LiquibaseSerializable.SerializationType} to use when serializing this object."
}
{
    "Origin": "Check to see if the local variable should be considered for replacement, i.e.",
    "Reference": "Check to see if the variable should be considered for replacement, i.e.",
    "HebCup": "Check to see if the variable should be considered for replacement, i.e."
}
{
    "Origin": "NativeLinkable}.",
    "Reference": "NativeLinkableGroup}.",
    "HebCup": "NativeLinkableGroup}."
}
{
    "Origin": "Convert a {@link MongoIterable} into an {@link Observable}.",
    "Reference": "Convert a {@link AsyncMongoIterable} into an {@link Observable}.",
    "HebCup": "Convert a {@link AsyncMongoIterable} into an {@link Observable}."
}
{
    "Origin": "Adds a new {@link StateDescription} for a channel that has multiple options to select from or a custom format\nstring.",
    "Reference": "Adds a new {@link StateDescriptionFragment} for a channel that has multiple options to select from or a custom\nformat string.",
    "HebCup": "Adds a new {@link StateDescriptionFragment} for a channel that has multiple options to select from or a custom format string."
}
{
    "Origin": "Sets the {@link VectorCollectionFactory} used to produce acceleration\nstructures for the OPTICS computation.",
    "Reference": "Sets the {@link VectorCollection} used to produce acceleration\nstructures for the OPTICS computation.",
    "HebCup": "Sets the {@link VectorCollection} used to produce acceleration structures for the OPTICS computation."
}
{
    "Origin": "Returns an Rx Observable that monitors changes to this RealmList.",
    "Reference": "Returns an Rx Flowable that monitors changes to this RealmList.",
    "HebCup": "Returns an Rx Flowable that monitors changes to this RealmList."
}
{
    "Origin": "Turns this FutureStream into a HotStream, a connectable Stream, being executed on a thread on the\nin it's current task executor, that is producing data",
    "Reference": "Turns this FutureStream into a Connectable, a connectable Stream, being executed on a thread on the\nin it's current task executor, that is producing data",
    "HebCup": "Turns this FutureStream into a Connectable, a connectable Stream, being executed on a thread on the in it's current task executor, that is producing data"
}
{
    "Origin": "This can also be used to set a custom ShapeRenderer aside from the default ones.",
    "Reference": "This can also be used to set a custom IShapeRenderer aside from the default ones.",
    "HebCup": "This can also be used to set a custom IShapeRenderer aside from the default ones."
}
{
    "Origin": "The tracking state affects the aggressiveness of the alpha/beta\ngain values in synchronizing with the signal carrier.",
    "Reference": "The PLLGain state affects the aggressiveness of the alpha/beta\ngain values in synchronizing with the signal carrier.",
    "HebCup": "The PLLGain state affects the aggressiveness of the alpha/beta gain values in synchronizing with the signal carrier."
}
{
    "Origin": "Returns the value of the {@code bitfield} field.",
    "Reference": "Returns the value of the {@code direction} field.",
    "HebCup": "Returns the value of the {@code direction} field."
}
{
    "Origin": "Scenario:\n  - CA inherited trust\n  - gateway trusts service via CA\n  - service does not evaluate trust",
    "Reference": "Scenario:\n  - CA inherited trust\n  - gateway trusts API via CA\n  - API does not evaluate trust",
    "HebCup": "Scenario: - CA inherited trust - gateway trusts Api via CA - Api does not evaluate trust"
}
{
    "Origin": "Ensure that the {@link #offsets} array has enough space to store {@code index}.",
    "Reference": "Ensure that the {@link #typeOffsets} array has enough space to store {@code index}.",
    "HebCup": "Ensure that the {@link#typeOffsets} array has enough space to store {@code index}."
}
{
    "Origin": "Get report type.",
    "Reference": "Get selected report option.",
    "HebCup": "get Selected Report Option."
}
{
    "Origin": "If the given element is {@code null} or does not have an integer, zero is returned.",
    "Reference": "If the given string is {@code null} or does not have an integer, zero is returned.",
    "HebCup": "If the given String is {@code null} or does not have an integer, zero is returned."
}
{
    "Origin": "Issues mCaptureRequestConfigurations to {@link CameraCaptureSession}.",
    "Reference": "Issues mCaptureRequestConfigs to {@link CameraCaptureSession}.",
    "HebCup": "Issues mCaptureRequestConfigs to {@link CameraCaptureSession}."
}
{
    "Origin": "Retires the service, removing it from the engine.",
    "Reference": "Retires the API, removing it from the engine.",
    "HebCup": "Retires the Api, removing it from the engine."
}
{
    "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "HebCup": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners."
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Get plain column.",
    "Reference": "Find plain column.",
    "HebCup": "find Plain Column."
}
{
    "Origin": "Opens a {@link TitanGraph} database configured according to the provided configuration.",
    "Reference": "Opens a {@link JanusGraph} database configured according to the provided configuration.",
    "HebCup": "Opens a {@link JanusGraph} database configured according to the provided configuration."
}
{
    "Origin": "If {@code labels = \"*\"}, settings with any label are returned.",
    "Reference": "If {@code labelFilter = \"*\"}, settings with any label are returned.",
    "HebCup": "If {@code LabelFilter = ``*``}, settings with any label are returned."
}
{
    "Origin": "If {@code keys = \"abc,def\"}, settings with a key equal to \"abc\" or \"def\" are returned.",
    "Reference": "If {@code keyFilter = \"abc,def\"}, settings with a key equal to \"abc\" or \"def\" are returned.",
    "HebCup": "If {@code KeyFilter = ``abc,def``}, settings with a key equal to ``abc`` or ``def`` are returned."
}
{
    "Origin": "Builds a stream cut, mapping the segments of a stream to their offsets from a position object.",
    "Reference": "Builds a stream cut, mapping the segments of a stream to their offsets from a writer position object.",
    "HebCup": "Builds a stream cut, mapping the segments of a stream to their offsets from a WriterPosition object."
}
{
    "Origin": "Returns an immutable list containing ten elements.",
    "Reference": "Returns an unmodifiable list containing ten elements.",
    "HebCup": "Returns an Unmodifiable list containing ten elements."
}
{
    "Origin": "testValueCount",
    "Reference": "testGetValueCount",
    "HebCup": "testGetValueCount"
}
{
    "Origin": "Converts an {@link IntIntOpenHashMap} into a flat int [] array.",
    "Reference": "Converts an {@link IntIntHashMap} into a flat int [] array.",
    "HebCup": "Converts an {@link IntIntHashMap} into a flat int [] array."
}
{
    "Origin": "Adds next SSRC group information update request to\n{@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.",
    "Reference": "Adds next source group information update request to\n{@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.",
    "HebCup": "Adds next source Group information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built."
}
{
    "Origin": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given\n{@link ResourceLoader}.",
    "Reference": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given\n{@link ClassLoader}.",
    "HebCup": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given {@link ClassLoader}."
}
{
    "Origin": "Returns an induced subgraph of {@code graph}.",
    "Reference": "Returns an induced subgraph of {@code network}.",
    "HebCup": "Returns an induced subgraph of {@code network}."
}
{
    "Origin": "Tries to resolve a table path to a {@link CatalogTableOperation}.",
    "Reference": "Tries to resolve a table path to a {@link ResolvedTable}.",
    "HebCup": "Tries to resolve a table path to a {@link ResolvedTable}."
}
{
    "Origin": "In particular, this method just computes\n{@code Math.exp(logGamma(x))} anyway.",
    "Reference": "In particular, this method just computes\n{@code FastMath.exp(logGamma(x))} anyway.",
    "HebCup": "In particular, this method just computes {@code FastMath.exp (logGamma (x))} anyway."
}
{
    "Origin": "Creates an {@link UBQualifier} from the given arrays and offsets.",
    "Reference": "Creates an {@link UBQualifier} from the given sequences and offsets.",
    "HebCup": "Creates an {@link UBQualifier} from the given sequences and offsets."
}
{
    "Origin": "Calls {@link Plugin#didDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)}\non all the bundled plugins",
    "Reference": "Calls {@link Plugin#afterDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)}\non all the bundled plugins",
    "HebCup": "Calls {@link Plugin#afterDeclareSetter (TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins"
}
{
    "Origin": "Attempts to get the underlying value backed by a {@link BaseValue}\nlinked to the provided {@link Key}.",
    "Reference": "Attempts to get the underlying value backed by a {@link Value}\nlinked to the provided {@link Key}.",
    "HebCup": "Attempts to get the underlying value backed by a {@link Value} linked to the provided {@link Key}."
}
{
    "Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.",
    "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.",
    "HebCup": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS."
}
{
    "Origin": "Enters the given tree (se {@link #scan(JCTree)}.",
    "Reference": "Enters the given tree (se {@link #scan(Tree)}.",
    "HebCup": "Enters the given tree (se {@link #scan(Tree)}."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#isEnabled() enabled}\nfield is set to true by Azure Key Vault, if not specified.",
    "Reference": "The {@link CreateRsaKeyOptions#isEnabled() enabled}\nfield is set to true by Azure Key Vault, if not specified.",
    "HebCup": "The {@link CreateRsaKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Serialize the given TokenStream into a byte array using the provided AttributeSerializer(s).",
    "Reference": "Serialize the given TwitterTokenStream into a byte array using the provided AttributeSerializer(s).",
    "HebCup": "Serialize the given TwitterTokenStream into a byte array using the provided AttributeSerializer (s)."
}
{
    "Origin": "Note that the writing process does not start until the returned {@code Mono} is subscribed\nto.",
    "Reference": "Note that the writing process does not start until the returned {@code Flux} is subscribed\nto.",
    "HebCup": "Note that the writing process does not start until the returned {@code Flux} is subscribed to."
}
{
    "Origin": "Getter for {@link #allowOnlyRequestedHeaders}",
    "Reference": "Getter for {@link #exposedHeaders}",
    "HebCup": "Getter for {@link#exposedHeaders}"
}
{
    "Origin": "Tells if the value can be used as the \"EL function\" parameter to\n{@link #combine(TemplateModel, TemplateMethodModelEx)}.",
    "Reference": "Tells if the value can be used as the \"EL function\" parameter to\n{@link #combine(TemplateModel, TemplateMethodModel)}.",
    "HebCup": "Tells if the value can be used as the ``EL function`` parameter to {@link#combine (TemplateModel, TemplateMethodModel)}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Sets the {@link SessionManager SessionManager} to which this DelegatingSession will\ndelegate its method calls.",
    "Reference": "Sets the {@link NativeSessionManager NativeSessionManager} to which this DelegatingSession will\ndelegate its method calls.",
    "HebCup": "Sets the {@link NativeSessionManager NativeSessionManager} to which this DelegatingSession will delegate its method calls."
}
{
    "Origin": "This test will create OBJECT_NUM of objects in an SMRMap.",
    "Reference": "This test will create OBJECT_NUM of objects in an CorfuTable.",
    "HebCup": "This test will create OBJECT_NUM of objects in an CorfuTable."
}
{
    "Origin": "Sets the filed name.",
    "Reference": "Sets the field name.",
    "HebCup": "Sets the field Name."
}
{
    "Origin": "remove select events, do so via {@link #removeEvent(BaseEvent)}.",
    "Reference": "remove select events, do so via {@link #removeEvent(CoreEvent)}.",
    "HebCup": "remove select events, do so via {@link #removeEvent(CoreEvent)}."
}
{
    "Origin": "Setter for {@link #exposeHeaders}",
    "Reference": "Setter for {@link #allowHeaders}",
    "HebCup": "Setter for {@link#allowHeaders}"
}
{
    "Origin": "Deletes all blob files associated with this coreName.",
    "Reference": "Deletes all blob files associated with this blobName.",
    "HebCup": "Deletes all blob files associated with this blobName."
}
{
    "Origin": "Setting the manifest is not allowed after a call to {@link\n#setMediaSources(MediaSource...)}.",
    "Reference": "Setting the manifest is not allowed after a call to {@link\n#setMediaSource(MediaSource)}.",
    "HebCup": "Setting the manifest is not allowed after a call to {@link #setmediaSource(MediaSource...)}."
}
{
    "Origin": "Returns a {@link ControllerResult} for\nsession to get notification back.",
    "Reference": "Returns a {@link SessionResult} for\nsession to get notification back.",
    "HebCup": "Returns a {@link SessionResult} for session to get notification back."
}
{
    "Origin": "Reads the TargetPlatform attribute",
    "Reference": "Reads the ModuleTarget attribute",
    "HebCup": "Reads the ModuleTarget attribute"
}
{
    "Origin": "Is a value with this type less than or equal to the length of array?",
    "Reference": "Is a value with this type less than or equal to the length of sequence?",
    "HebCup": "Is a value with this type less than or equal to the length of sequence?"
}
{
    "Origin": "Record an {@link ExecutionEvent} for a container or test that started.",
    "Reference": "Record an {@link Event} for a container or test that started.",
    "HebCup": "Record an {@link Event} for a container or test that started."
}
{
    "Origin": "Code snippet for {@link BlobAsyncClientBase#downloadWithResponse(BlobRange, ReliableDownloadOptions,",
    "Reference": "Code snippet for {@link BlobAsyncClientBase#downloadWithResponse(BlobRange, DownloadRetryOptions,",
    "HebCup": "Code snippet for {@link BlobAsyncClientBase#downloadWithResponse (BlobRange, DownloadRetryOptions,"
}
{
    "Origin": "Returns the available edit groups.",
    "Reference": "Returns the available element views.",
    "HebCup": "Returns the available Element Views."
}
{
    "Origin": "Note that even\n{@link PrefetchConfig#maxFetchCapacityBytes} is 0, at least 1 file is always fetched.",
    "Reference": "Note that even\n{@link FetchConfig#maxFetchCapacityBytes} is 0, at least 1 file is always fetched.",
    "HebCup": "Note that even {@link fetchConfig#maxFetchCapacityBytes} is 0, at least 1 file is always fetched."
}
{
    "Origin": "Returns a {@code YearMonth} with the specified epoch-month.",
    "Reference": "Returns a {@code YearMonth} with the specified proleptic-month.",
    "HebCup": "Returns a {@code YearMonth} with the specified PROLEPTIC-month."
}
{
    "Origin": "return ..svc.cluster.local",
    "Reference": "return ..svc",
    "HebCup": "return ..svc"
}
{
    "Origin": "Returns a {@link TakeReceivePort} that can provide at most {@code count} messages from {@code channel}.",
    "Reference": "Returns a {@link ReceivePort} that can provide at most {@code count} messages from {@code channel}.",
    "HebCup": "Returns a {@link ReceivePort} that can provide at most {@code count} messages from {@code channel}."
}
{
    "Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeadersWithResponse(BlobHTTPHeaders, BlobAccessConditions)}",
    "Reference": "Code snippets for {@link BlobAsyncClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions)}",
    "HebCup": "Code snippets for {@link BlobAsyncClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions)}"
}
{
    "Origin": "Is a value with this type less than the length of any of the arrays?",
    "Reference": "Is a value with this type less than the length of any of the sequences?",
    "HebCup": "Is a value with this type less than the length of any of the sequences?"
}
{
    "Origin": "BaseFunction} instances, calling {@link BaseFunction#configure(SkylarkSignature)}.",
    "Reference": "BuiltinFunction} instances, calling {@link BuiltinFunction#configure(SkylarkSignature)}.",
    "HebCup": "BuiltinFunction} instances, calling {@link BuiltinFunction#configure (SkylarkSignature)}."
}
{
    "Origin": "Adds an entry for the given {@code ASTNode} to the stack trace.",
    "Reference": "Adds an entry for the given {@code Node} to the stack trace.",
    "HebCup": "Adds an entry for the given {@code Node} to the stack trace."
}
{
    "Origin": "Tests the specifying heap memory with config default value for job manager and task manager.",
    "Reference": "Tests the specifying job manager heap memory with config default value for job manager and task manager.",
    "HebCup": "Tests the specifying Job Manager Heap Memory with config default value for job manager and task manager."
}
{
    "Origin": "Ensure that the service still exists.",
    "Reference": "Ensure that the api still exists.",
    "HebCup": "Ensure that the Api still exists."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Returns the list of {@link BufferEdge} - fragments on the bounds of the current fragment, which\nshould be potentially merged with fragments from the neighbor buffer fragments.",
    "Reference": "Returns the list of {@link ByteFragmentAtOffset} - fragments on the bounds of the current\nfragment, which should be potentially merged with fragments from the neighbor buffer fragments.",
    "HebCup": "Returns the list of {@link ByteFragmentAtOffset} - fragments on the bounds of the current fragment, which should be potentially merged with fragments from the neighbor buffer fragments."
}
{
    "Origin": "Get the fileContentLanguage property: Specifies the natural languages\nused by this resource.",
    "Reference": "Get the contentLanguage property: Specifies the natural languages\nused by this resource.",
    "HebCup": "Get the ContentLanguage property: Specifies the natural languages used by this resource."
}
{
    "Origin": "Returns the result of interpreting the object as an instance of 'List Of EInt'.",
    "Reference": "Returns the result of interpreting the object as an instance of 'List Of ELong'.",
    "HebCup": "Returns the result of interpreting the object as an instance of 'List Of ELong'."
}
{
    "Origin": "Writes this Coord4D's data to a ByteBuf for packet transfer.",
    "Reference": "Writes this Coord4D's data to a PacketBuffer for packet transfer.",
    "HebCup": "Writes this Coord4D's data to a PacketBuffer for packet transfer."
}
{
    "Origin": "create producer based on uri {@link Endpoint}",
    "Reference": "create producer based on uri {@link SoroushAction}",
    "HebCup": "create producer based on uri {@link SoroushAction}"
}
{
    "Origin": "An empty query indicates that the app may prefetch any music.",
    "Reference": "An empty query indicates that the app may prepare any music.",
    "HebCup": "An empty query indicates that the app may Prepare any music."
}
{
    "Origin": "Cleans the views in this schema.",
    "Reference": "Cleans the triggers in this schema.",
    "HebCup": "Cleans the Triggers in this schema."
}
{
    "Origin": "Adds a control metadata.",
    "Reference": "Adds a packet metadata.",
    "HebCup": "Adds a Packet Metadata."
}
{
    "Origin": "Tests resilency when D2 device is suspended.",
    "Reference": "Tests resiliency when D2 device is suspended.",
    "HebCup": "Tests resiliency when D2 device is suspended."
}
{
    "Origin": "Setter for {@link #exposeHeaders}",
    "Reference": "Setter for {@link #allowHeaders}",
    "HebCup": "Setter for {@link#allowHeaders}"
}
{
    "Origin": "Gets the extension of a filename.",
    "Reference": "Gets the extension of a fileName.",
    "HebCup": "Gets the extension of a filename."
}
{
    "Origin": "Generates code sample for using {@link ConfigurationClient#addSetting(String, String, String)}",
    "Reference": "Generates code sample for using {@link ConfigurationClient#addConfigurationSetting(String, String, String)}",
    "HebCup": "Generates code sample for using {@link ConfigurationClient#addConfigurationSetting (String, String, String)}"
}
{
    "Origin": "The label for the C API.",
    "Reference": "The slug for the C API.",
    "HebCup": "The Slug for the C API."
}
{
    "Origin": "FederatedAddGraphHandler didn't set the adding user.",
    "Reference": "FederatedAddStoreHandler didn't set the adding user.",
    "HebCup": "FederatedAddStoreHandler didn't set the adding user."
}
{
    "Origin": "This can be called before we get the full set of applications, we should merge the results\nonly in onAppsUpdated() which is idempotent.",
    "Reference": "This can be called before we get the full set of applications, we should merge the results\nonly in onPredictionsUpdated() which is idempotent.",
    "HebCup": "This can be called before we get the full set of applications, we should merge the results only in onPredictionsUpdated () which is idempotent."
}
{
    "Origin": "Returns a new {@link Partitioner.OnVirtualNodes} based on the partition key token.",
    "Reference": "Returns a new {@link Partitioner.OnVirtualNode} based on the partition key token.",
    "HebCup": "Returns a new {@link Partitioner.OnVirtualNode} based on the partition key token."
}
{
    "Origin": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathOptions)}\nmethod for creating directories.",
    "Reference": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathContext)}\nmethod for creating directories.",
    "HebCup": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathContext)} method for creating directories."
}
{
    "Origin": "Attaches an application created from a WADL description document\navailable at a given URI.",
    "Reference": "Attaches an application created from a Swagger description document\navailable at a given URI.",
    "HebCup": "Attaches an application created from a swagger description document available at a given URI."
}
{
    "Origin": "Set the serverBindings",
    "Reference": "Set the theServerBindings",
    "HebCup": "Set the theServerBindings"
}
{
    "Origin": "Aggregate given void publishers into a new {@literal Mono} that will be\nfulfilled when all of the given {@literal sources} have been fulfilled.",
    "Reference": "Aggregate given publishers into a new {@literal Mono} that will be\nfulfilled when all of the given {@literal sources} have been fulfilled.",
    "HebCup": "Aggregate given ? publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "This will only consider it a match if the\na new segment (following slash) or the end of the path immediately follows {@code segments}.",
    "Reference": "This will only consider it a match if the\na new segment (following slash) or the end of the path immediately follows {@code pathSegments}.",
    "HebCup": "This will only consider it a match if the a new segment (following slash) or the end of the path immediately follows {@code pathSegments}."
}
{
    "Origin": "Gets the units of this drug order",
    "Reference": "Gets the doseUnits of this drug order",
    "HebCup": "Gets the doseUnits of this drug order"
}
{
    "Origin": "Provide custom {@link LayoutHandler}.",
    "Reference": "Provide custom {@link LithoHandler}.",
    "HebCup": "Provide custom {@link LithoHandler}."
}
{
    "Origin": "Generates a code sample for using {@link ShareDirectoryClient#createSubDirectoryWithResponse(String,",
    "Reference": "Generates a code sample for using {@link ShareDirectoryClient#createSubdirectoryWithResponse(String,",
    "HebCup": "Generates a code sample for using {@link ShareDirectoryClient#createSubdirectoryWithResponse (String,"
}
{
    "Origin": "See {@code EquivalenceMethod} for more info.",
    "Reference": "See {@code EqMethod} for more info.",
    "HebCup": "See {@code EqMethod} for more info."
}
{
    "Origin": "Get service locator.",
    "Reference": "Get instance manager.",
    "HebCup": "get Instance Manager."
}
{
    "Origin": "GrantAuthoritesMapperProcess.",
    "Reference": "GrantAuthoritiesMapperProcess.",
    "HebCup": "grantAuthoritiesMapperProcess."
}
{
    "Origin": "Returns the location of the output directory from the configuration or the temporary directory if not defined.",
    "Reference": "Returns the location of the directory from the configuration or the temporary directory if not defined.",
    "HebCup": "Returns the location of the directory from the configuration or the temporary directory if not defined."
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Indicates if the connection is ready to handle new messages.",
    "Reference": "Indicates if the connection is available to handle new messages.",
    "HebCup": "Indicates if the connection is Available to handle new messages."
}
{
    "Origin": "Gets the border colour of the element, as a HTML RGB hex string (e.g.",
    "Reference": "Gets the stroke colour of the element, as a HTML RGB hex string (e.g.",
    "HebCup": "Gets the Stroke colour of the element, as a HTML RGB hex string (e.g."
}
{
    "Origin": "Can be used to register a {@link IBlockState} as a valid soil.",
    "Reference": "Can be used to register a {@link BlockState} as a valid soil.",
    "HebCup": "Can be used to register a {@link BlockState} as a valid soil."
}
{
    "Origin": "The amount of real time, in nanoseconds, is given by the expression\n{@code 1000000 * timeout + nanos}.",
    "Reference": "The amount of real time, in nanoseconds, is given by the expression\n{@code 1000000 * timeoutMillis + nanos}.",
    "HebCup": "The amount of real time, in nanoseconds, is given by the expression {@code 1000000 * timeoutMillis + nanos}."
}
{
    "Origin": "This method obtains the extension as the textual part of the filename\nafter the last dot.",
    "Reference": "This method obtains the extension as the textual part of the fileName\nafter the last dot.",
    "HebCup": "This method obtains the extension as the textual part of the fileName after the last dot."
}
{
    "Origin": "Bind the {@link ModuleHandlerCallback} service - called from DS.",
    "Reference": "Bind the {@link RuleManager} service - called from DS.",
    "HebCup": "Bind the {@link RuleManager} service - called from DS."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Notify this session that sync completed/failed with given {@code NodePair}.",
    "Reference": "Notify this session that sync completed/failed with given {@code SyncNodePair}.",
    "HebCup": "Notify this session that sync completed/failed with given {@code SyncNodePair}."
}
{
    "Origin": "Gets the id of the underlying metric.",
    "Reference": "Gets the name of the underlying metric.",
    "HebCup": "Gets the Name of the underlying metric."
}
{
    "Origin": "Encode a PI action group to a action profile group.",
    "Reference": "Encode a PI action profile group to a action profile group.",
    "HebCup": "Encode a Pi Action Profile Group to a action profile group."
}
{
    "Origin": "This is because the members (and action parameters) all reference the {@link DomainClass}s, so these need\n    to exist first.",
    "Reference": "This is because the members (and action parameters) all reference the {@link DomainClassDto}s, so these need\n    to exist first.",
    "HebCup": "This is because the members (and action parameters) all reference the {@link DomainClassDto}s, so these need to exist first."
}
{
    "Origin": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicy#List}",
    "Reference": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicy#Iterable}",
    "HebCup": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicy#Iterable}"
}
{
    "Origin": "DocValues query) will return {@link Matches#MATCH_WITH_NO_TERMS}",
    "Reference": "DocValues query) will return {@link MatchesUtils#MATCH_WITH_NO_TERMS}",
    "HebCup": "DocValues query) will return {@link MatchesUtils#MATCH_WITH_NO_TERMS}"
}
{
    "Origin": "Getter for {@link #allowOnlyRequestedHeader}",
    "Reference": "Getter for {@link #allowAllRequestedHeaders}",
    "HebCup": "Getter for {@link#allowAllRequestedHeaders}"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Check if given coordinates lies inside contentRectMinusAllMargins.",
    "Reference": "Check if given coordinates lies inside contentRect.",
    "HebCup": "Check if given coordinates lies inside contentRect."
}
{
    "Origin": "Binds the specified {@link Service} under the specified directory of the default {@link VirtualHost}.",
    "Reference": "Binds the specified {@link HttpService} under the specified directory of the default {@link VirtualHost}.",
    "HebCup": "Binds the specified {@link HttpService} under the specified directory of the default {@link VirtualHost}."
}
{
    "Origin": "Print a list of {@link Taglet}s that might conflict with\nstandard tags in the future and a list of standard tags\nthat have been overriden.",
    "Reference": "Print a list of {@link Taglet}s that might conflict with\nstandard tags in the future and a list of standard tags\nthat have been overridden.",
    "HebCup": "Print a list of {@link Taglet}s that might conflict with standard tags in the future and a list of standard tags that have been overridden."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubDirectory#string}",
    "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory#string}",
    "HebCup": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory#string}"
}
{
    "Origin": "Calls {@code deallocate()}.",
    "Reference": "Calls {@code releaseReference()}.",
    "HebCup": "Calls {@code releaseReference ()}."
}
{
    "Origin": "Count the total file size, including id files, of {@link StoreFile}s.",
    "Reference": "Count the total file size, including id files, of {@link DatabaseStore}s.",
    "HebCup": "Count the total file size, including id files, of {@link DatabaseStore}s."
}
{
    "Origin": "Aggregates the service, app, and plan policies into a single ordered list.",
    "Reference": "Aggregates the API, app, and plan policies into a single ordered list.",
    "HebCup": "Aggregates the Api, app, and plan policies into a single ordered list."
}
{
    "Origin": "To SSLHostConfig info.",
    "Reference": "To SslHostConfig info.",
    "HebCup": "To SslHostConfig info."
}
{
    "Origin": "Takes a package and a relative path to a resource and returns an absolute path to the\nresource.",
    "Reference": "Takes a package and a path to a resource and returns an absolute path to the resource.",
    "HebCup": "Takes a package and a path to a resource and returns an absolute path to the resource."
}
{
    "Origin": "For example, the period in days between two dates can be calculated\nusing {@code startDate.periodUntil(endDate, DAYS)}.",
    "Reference": "For example, the period in days between two dates can be calculated\nusing {@code startDate.until(endDate, DAYS)}.",
    "HebCup": "For example, the period in days between two dates can be calculated using {@code startDate.until(endDate, DAYS)}."
}
{
    "Origin": "Undecorates this {@link Backoff} to find the {@link Backoff} which is an instance of the specified\n{@code backoffType}.",
    "Reference": "Undecorates this {@link Backoff} to find the {@link Backoff} which is an instance of the specified\n{@code type}.",
    "HebCup": "Undecorates this {@link Backoff} to find the {@link Backoff} which is an instance of the specified {@code type}."
}
{
    "Origin": "The value {@link #MEMBER_ENDPOINTSL_DEFAULT} or system property {@link #MEMBER_ENDPOINTS_PROP_NAME} if set.",
    "Reference": "The value {@link #MEMBER_ENDPOINTS_DEFAULT} or system property {@link #MEMBER_ENDPOINTS_PROP_NAME} if set.",
    "HebCup": "The value {@link#MEMBER_ENDPOINTS_DEFAULT} or system property {@link#MEMBER_ENDPOINTS_PROP_NAME} if set."
}
{
    "Origin": "Converts an entity (POJO) to a DBObject.",
    "Reference": "Converts an entity (POJO) to a Document.",
    "HebCup": "Converts an entity (POJO) to a Document."
}
{
    "Origin": "Returns an immutable list containing four elements.",
    "Reference": "Returns an unmodifiable list containing four elements.",
    "HebCup": "Returns an Unmodifiable list containing four elements."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Code snippets for {@link BlobClientBase#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,",
    "Reference": "Code snippets for {@link BlobClientBase#setHttpHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,",
    "HebCup": "Code snippets for {@link BlobClientBase#setHttpHeadersWithResponse (BlobHttpHeaders, BlobAccessConditions, Duration,"
}
{
    "Origin": "Sets the host address associated with this exception.",
    "Reference": "Sets the host associated with this exception.",
    "HebCup": "Sets the host associated with this exception."
}
{
    "Origin": "If {@code thread} is null, the list is immutable.",
    "Reference": "If {@code\nmutability} is null, the list is immutable.",
    "HebCup": "If {@code mutability} is null, the list is immutable."
}
{
    "Origin": "Sets the given span's last access timestamp.",
    "Reference": "Sets the given span's last touch timestamp.",
    "HebCup": "Sets the given span's last Touch Timestamp."
}
{
    "Origin": "Test affinity awareness Sql cache size property with semicolon.",
    "Reference": "Test Partition Awareness Sql cache size property with semicolon.",
    "HebCup": "test Partition Awareness Sql Cache Size Property with semicolon."
}
{
    "Origin": "Creates and caches a test {@link BaseEvent} instance for the scope of the current test method.",
    "Reference": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method.",
    "HebCup": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method."
}
{
    "Origin": "Entries are evicted from the dynamic table until\nthe size of the table and the new header field is less than the table's capacity.",
    "Reference": "Entries are evicted from the dynamic table until\nthe size of the table and the new header field is less than the table's maxHeaderTableSize.",
    "HebCup": "Entries are evicted from the dynamic table until\nthe size of the table and the new header field is less than the table's capacity."
}
{
    "Origin": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse#List}",
    "Reference": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse#Iterable}",
    "HebCup": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse#Iterable}"
}
{
    "Origin": "clear saved activity",
    "Reference": "clear saved activities",
    "HebCup": "clear saved Activities"
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Use the supplied truststore for HTTPS requests.",
    "Reference": "Use the supplied keystore for HTTPS requests.",
    "HebCup": "Use the supplied keyStore for HTTPS requests."
}
{
    "Origin": "Set the fileContentMD5 property: Sets the file's MD5 hash.",
    "Reference": "Set the contentMD5 property: Sets the file's MD5 hash.",
    "HebCup": "Set the contentMD5 property: Sets the file's MD5 hash."
}
{
    "Origin": "Try to postpone the {@code Math.exp} call to preserve numeric range!",
    "Reference": "Try to postpone the {@code FastMath.exp} call to preserve numeric range!",
    "HebCup": "Try to postpone the {@code FastMath.exp} call to preserve numeric range!"
}
{
    "Origin": "BuiltinFunction} instances, calling {@link BuiltinFunction#configure(SkylarkSignature)}.",
    "Reference": "BaseFunction} instances, calling {@link BaseFunction#configure(SkylarkSignature)}.",
    "HebCup": "BaseFunction} instances, calling {@link BaseFunction#configure (SkylarkSignature)}."
}
{
    "Origin": "Is a value with this type less than the length of the array?",
    "Reference": "Is a value with this type less than the length of the sequence?",
    "HebCup": "Is a value with this type less than the length of the sequence?"
}
{
    "Origin": "Gets the value of the 'publicPort' field",
    "Reference": "Gets the value of the 'publicPorts' field",
    "HebCup": "Gets the value of the 'publicPorts' field"
}
{
    "Origin": "Get an implementation of {@link JobSpecificationService} if one hasn't already been defined.",
    "Reference": "Get an implementation of {@link JobResolverService} if one hasn't already been defined.",
    "HebCup": "Get an implementation of {@link JobResolverService} if one hasn't already been defined."
}
{
    "Origin": "Checks that screen was closed with the given {@code result}.",
    "Reference": "Checks that screen was closed with the given {@code outcome}.",
    "HebCup": "Checks that screen was closed with the given {@code Outcome}."
}
{
    "Origin": "Converts from {@link CpuProfiler.CpuProfilerConfiguration} to {@link CpuProfilerConfig}",
    "Reference": "Converts from {@link Cpu.CpuTraceConfiguration.UserOptions} to {@link CpuProfilerConfig}",
    "HebCup": "Converts from {@link Cpu.CpuTraceConfiguration.UserOptions} to {@link CpuProfilerConfig}"
}
{
    "Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for\na directory with un-synced persistent entries without a sync check.",
    "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for\na directory with un-synced persistent entries without a sync check.",
    "HebCup": "Tests the {@link FileSystemMaster#delete (AlluxioURI, DeleteContext)} method for a directory with un-synced persistent entries without a sync check."
}
{
    "Origin": "Parses the 'ResourceInfo' annotation and builds swagger operation.",
    "Reference": "Parses the 'ResourceInfo' annotation and builds openApi operation.",
    "HebCup": "Parses the 'ResourceInfo' annotation and builds openApi operation."
}
{
    "Origin": "Get the object being interacted with.",
    "Reference": "Get the object being interacted.",
    "HebCup": "Get the object being Interacted."
}
{
    "Origin": "This is necessary because this class only keeps {@link WeakReference}s to the\n{@link FCPPluginClient} objects.",
    "Reference": "This is necessary because this class only keeps {@link WeakReference}s to the\n{@link FCPPluginConnection} objects.",
    "HebCup": "This is necessary because this class only keeps {@link WeakReference}s to the {@link FCPPluginConnection} objects."
}
{
    "Origin": "Objects of the following type(s) are allowed in the list\n{@link Element }",
    "Reference": "Objects of the following type(s) are allowed in the list\n{@link Object }",
    "HebCup": "Objects of the following type (s) are allowed in the list {@link Object}"
}
{
    "Origin": "Returns the class name remote service.",
    "Reference": "Returns the journal article remote service.",
    "HebCup": "Returns the journal Article remote service."
}
{
    "Origin": "Get an iterator to the vector contents.",
    "Reference": "Get an iterator to the double[] contents.",
    "HebCup": "Get an iterator to the double contents."
}
{
    "Origin": "Creates a {@code For}-comprehension of 6 Iterables.",
    "Reference": "Creates a {@code For}-comprehension of 6 Options.",
    "HebCup": "Creates a {@code For}-comprehension of 6 Iterables."
}
{
    "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "HebCup": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners."
}
{
    "Origin": "Creates an audit entry for the 'service version updated' event.",
    "Reference": "Creates an audit entry for the 'API version updated' event.",
    "HebCup": "Creates an audit entry for the 'api Version Updated' event."
}
{
    "Origin": "Construct a trident data source.",
    "Reference": "Construct a streams data source.",
    "HebCup": "Construct a Streams Data Source."
}
{
    "Origin": "Test of setParams method, of class NewAgentConnector.",
    "Reference": "Test of addMetric method, of class NewAgentConnector.",
    "HebCup": "Test of addMetric method, of class NewAgentConnector."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Code snippets for {@link ConfigurationAsyncClient#addSetting(String, String, String)}",
    "Reference": "Code snippets for {@link ConfigurationAsyncClient#addConfigurationSetting(String, String, String)}",
    "HebCup": "Code snippets for {@link ConfigurationAsyncClient#addConfigurationSetting (String, String, String)}"
}
{
    "Origin": "Get the Date that this Token was Created",
    "Reference": "Get the ZonedDateTime that this Token was Created",
    "HebCup": "Get the ZonedDateTime that this Token was Created"
}
{
    "Origin": "Scheduler:\n {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Returns an immutable list containing one element.",
    "Reference": "Returns an unmodifiable list containing one element.",
    "HebCup": "Returns an Unmodifiable list containing one element."
}
{
    "Origin": "Gets the value of the 'InMemory' field",
    "Reference": "Gets the value of the 'inMemory' field.",
    "HebCup": "Gets the value of the 'inMemory' field"
}
{
    "Origin": "Gets the prefix from a full filename, such as \nor .",
    "Reference": "Gets the prefix from a full fileName, such as \nor .",
    "HebCup": "Gets the prefix from a full fileName, such as or ."
}
{
    "Origin": "append {@link ProgramRunIdFields} and flush to file.",
    "Reference": "append {@link ProgramRunInfo} and flush to file.",
    "HebCup": "append {@link ProgramRunInfo} and flush to file."
}
{
    "Origin": "Setter for {@link #allowMethods}",
    "Reference": "Setter for {@link #allowedHeaders}",
    "HebCup": "Setter for {@link#allowedHeaders}"
}
{
    "Origin": "Nullifies readPosition and listeners.",
    "Reference": "Nullifies readLocator and listeners.",
    "HebCup": "Nullifies readLocator and listeners."
}
{
    "Origin": "If the original qualifier has no array length offsets, then UNKNOWN is\nreturned.",
    "Reference": "If the original qualifier has no sequence length\noffsets, then UNKNOWN is returned.",
    "HebCup": "If the original qualifier has no Sequence Length offsets, then UNKNOWN is returned."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Restore a LockableRandomAccessThing from a DataInputStream.",
    "Reference": "Restore a LockableRandomAccessBuffer from a DataInputStream.",
    "HebCup": "Restore a LockableRandomAccessBuffer from a DataInputStream."
}
{
    "Origin": "Sets the class name persistence.",
    "Reference": "Sets the journal article persistence.",
    "HebCup": "Sets the Journal Article Persistence."
}
{
    "Origin": "Create an instance of {@link Response.Fixed.Category }",
    "Reference": "Create an instance of {@link Response.Fixed.Item }",
    "HebCup": "Create an instance of {@link Response.Fixed.Item}"
}
{
    "Origin": "Waits during {@code timeout} until text extracted from specified {@code webElement} by {@link",
    "Reference": "Waits during {@code timeout} until text extracted from specified {@code element} by {@link",
    "HebCup": "Waits during {@code timeout} until text extracted from specified {@code element} by {@link"
}
{
    "Origin": "Returns true if the given char sequence is a legal Java identifier,\notherwise false.",
    "Reference": "Returns true if the given string is a legal Java identifier,\notherwise false.",
    "HebCup": "Returns true if the given String is a legal Java identifier, otherwise false."
}
{
    "Origin": "Converts this template into an {@link ArgumentTypeValidator}.",
    "Reference": "Converts this template into an {@link ArgumentTypeStrategy}.",
    "HebCup": "Converts this template into an {@link ArgumentTypeStrategy}."
}
{
    "Origin": "Is grand type supported service.",
    "Reference": "Is grant type supported service.",
    "HebCup": "is Grant Type Supported service."
}
{
    "Origin": "Creates a cluster using {@link #repoVersion2110} with ZooKeeper installed.",
    "Reference": "Creates a cluster using {@link #mpack211} with ZooKeeper installed.",
    "HebCup": "Creates a cluster using {@link#mpack211} with ZooKeeper installed."
}
{
    "Origin": "Report, in the SampleSheet whose ID is provided, all samples assigned the\ndesired shape.",
    "Reference": "Report, in the SampleSheet whose name is provided, all samples assigned the\ndesired shape.",
    "HebCup": "Report, in the SampleSheet whose name is provided, all samples assigned the desired shape."
}
{
    "Origin": "Opens a {@link TitanGraph} database.",
    "Reference": "Opens a {@link JanusGraph} database.",
    "HebCup": "Opens a {@link JanusGraph} database."
}
{
    "Origin": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKey#byte}",
    "Reference": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyBackup#byte}",
    "HebCup": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyBackup #byte}"
}
{
    "Origin": "Waits until text extracted from specified {@code webElement} by {@link",
    "Reference": "Waits until text extracted from specified {@code element} by {@link",
    "HebCup": "Waits until text extracted from specified {@code element} by {@link"
}
{
    "Origin": "LdapConnection.",
    "Reference": "LdapNetworkConnection.",
    "HebCup": "LdapNetworkConnection."
}
{
    "Origin": "Set the fileContentEncoding property: Specifies which content encodings\nhave been applied to the file.",
    "Reference": "Set the contentEncoding property: Specifies which content encodings\nhave been applied to the file.",
    "HebCup": "Set the contentEncoding property: Specifies which content encodings have been applied to the file."
}
{
    "Origin": "By default, it calls\nback the registered listener provided by {@link #getListener()}.",
    "Reference": "By default, it calls\nback the registered listener provided by {@link #getSelectionListener()}.",
    "HebCup": "By default, it calls back the registered listener provided by {@link#getSelectionListener ()}."
}
{
    "Origin": "Tests resilency when egress device is down.",
    "Reference": "Tests resiliency when egress device is down.",
    "HebCup": "Tests resiliency when egress device is down."
}
{
    "Origin": "Gets whether or not the configuration setting is locked.",
    "Reference": "Gets whether or not the configuration setting is read-only.",
    "HebCup": "Gets whether or not the configuration setting is Read Only."
}
{
    "Origin": "Send a message to a given endpoint.",
    "Reference": "Send a message to a given node.",
    "HebCup": "Send a message to a given Node."
}
{
    "Origin": "Similar to {@link #whenOrElse(boolean, Action, Action)}, except obtains the action instance from the registry by the given type.",
    "Reference": "Similar to {@link #when(boolean, Action, Action)}, except obtains the action instance from the registry by the given type.",
    "HebCup": "Similar to {@link#when (boolean, Action, Action)}, except obtains the action instance from the registry by the given type."
}
{
    "Origin": "In order to apply the rotation transformation to an existing transformation,\nuse {@link #rotate(Quaterniond) rotate()} instead.",
    "Reference": "In order to apply the rotation transformation to an existing transformation,\nuse {@link #rotate(Quaterniondc) rotate()} instead.",
    "HebCup": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaterniondc) rotate()} instead."
}
{
    "Origin": "Test of var method, of class KernelDensity.",
    "Reference": "Test of variance method, of class KernelDensity.",
    "HebCup": "Test of Variance method, of class KernelDensity."
}
{
    "Origin": "Retrieves the metadata for the specified {@link NamespacedEntityId}.",
    "Reference": "Retrieves the metadata for the specified {@link MetadataEntity}.",
    "HebCup": "Retrieves the metadata for the specified {@link MetadataEntity}."
}
{
    "Origin": "If the cipher is an asymmetric cipher (different keys for encryption and decryption, such as public/private key\npairs), you should set your encryption key via one of these methods:",
    "Reference": "If the CipherService is an asymmetric CipherService (different keys for encryption and decryption, such as\npublic/private key pairs), you should set your encryption key via one of these methods:",
    "HebCup": "If the CipherService is an asymmetric CipherService (different keys for encryption and decryption, such as public/private key pairs), you should set your encryption key via one of these methods:"
}
{
    "Origin": "Set the valueType.",
    "Reference": "Set the newType.",
    "HebCup": "Set the newType."
}
{
    "Origin": "The logAnyFailure parameter indicates whether or not AlluxioExceptions are expected results\n(for example it would be false for the exists() call).",
    "Reference": "The failureOk parameter indicates whether or not AlluxioExceptions are expected results (for\nexample it would be false for the exists() call).",
    "HebCup": "The failureOk parameter indicates whether or not AlluxioExceptions are expected results (for example it would be false for the exists () call)."
}
{
    "Origin": "Issues mCaptureRequestConfigs to {@link CameraCaptureSession}.",
    "Reference": "Issues mCaptureConfigs to {@link CameraCaptureSession}.",
    "HebCup": "Issues mCaptureConfigs to {@link CameraCaptureSession}."
}
{
    "Origin": "This merges the two objects - {@code this} and the specified date -\nto form an instance of {@code ZonedDateTime}.",
    "Reference": "This merges the two objects - {@code this} and the specified date -\nto form an instance of {@code OffsetDateTime}.",
    "HebCup": "This merges the two objects - {@code this} and the specified date - to form an instance of {@code OffsetDateTime}."
}
{
    "Origin": "Configure a sslConfig for the cluster using the legacy configuration",
    "Reference": "Configure a SSLConfig.Builder for the cluster using the legacy configuration",
    "HebCup": "Configure a SSLConfig.Builder for the cluster using the legacy configuration"
}
{
    "Origin": "Sets the value of the spid property.",
    "Reference": "Sets the value of the pic property.",
    "HebCup": "Sets the value of the Pic property."
}
{
    "Origin": "Get the iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider\ncontract in the underlying {@link InstanceManager instance manager} container.",
    "Reference": "Get the iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider\ncontract in the underlying {@link InjectionManager injection manager} container.",
    "HebCup": "Get the iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InjectionManager Injection Manager} container."
}
{
    "Origin": "This method obtains all necessary information about fields from entity\nand returns a List of FieldMetadata.",
    "Reference": "This method obtains all necessary information about fields from entity\nand returns a List of FieldItem.",
    "HebCup": "This method obtains all necessary information about fields from entity and returns a List of FieldItem."
}
{
    "Origin": "Test of print method, of class IntegerHistogram.",
    "Reference": "Test of print method, of class IntegerPeakFunction.",
    "HebCup": "Test of print method, of class IntegerPeakFunction."
}
{
    "Origin": "Generates a code sample for using {@link ShareAsyncClient#createFileWithResponse(String, long, FileHTTPHeaders,",
    "Reference": "Generates a code sample for using {@link ShareAsyncClient#createFileWithResponse(String, long, FileHttpHeaders,",
    "HebCup": "Generates a code sample for using {@link ShareAsyncClient#createFileWithResponse (String, long, FileHttpHeaders,"
}
{
    "Origin": "Generate a ChallengeReason from a string.",
    "Reference": "Generate a ChallengeReasons from a string.",
    "HebCup": "Generate a ChallengeReasons from a string."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "See the DefaultReaderConfig class in the extractionconfigs package\nfor available settings.",
    "Reference": "See the StringsConfig class in the extractionconfigs package\nfor available settings.",
    "HebCup": "See the StringsConfig class in the extractionconfigs package for available settings."
}
{
    "Origin": "Returns the object with the settings used for calls to labelAudio.",
    "Reference": "Returns the object with the settings used for calls to getEvaluation.",
    "HebCup": "Returns the object with the settings used for calls to GetEvaluation."
}
{
    "Origin": "Gets the name minus the path from a full filename.",
    "Reference": "Gets the name minus the path from a full fileName.",
    "HebCup": "Gets the name minus the path from a full filename."
}
{
    "Origin": "Returns an immutable map containing seven mappings.",
    "Reference": "Returns an unmodifiable map containing seven mappings.",
    "HebCup": "Returns an Unmodifiable map containing seven mappings."
}
{
    "Origin": "The state of playback should be updated to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done.",
    "Reference": "The state of playback should be updated to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prepare is done.",
    "HebCup": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the Prepare is done."
}
{
    "Origin": "Creates a default DBScan",
    "Reference": "Creates a default DBSCAN",
    "HebCup": "Creates a default DBSCAN"
}
{
    "Origin": "Code snippets for {@link BlobClient#setHTTPHeaders(BlobHTTPHeaders)}",
    "Reference": "Code snippets for {@link BlobClient#setHTTPHeaders(BlobHttpHeaders)}",
    "HebCup": "Code snippets for {@link BlobClient#setHTTPHeaders(BlobHttpHeaders)}"
}
{
    "Origin": "Sets decryption as failed",
    "Reference": "Sets crypto job as failed",
    "HebCup": "Sets CryptoJob as failed"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Tests if this string starts with any specified prefixes.",
    "Reference": "Tests if this CharSequence starts with any specified prefixes.",
    "HebCup": "Tests if this CharSequence starts with any specified prefixes."
}
{
    "Origin": "Build and setup a new ES settings builder by consulting all Titan config options\nrelevant to TransportClient or Node.",
    "Reference": "Build and setup a new ES settings builder by consulting all JanusGraph config options\nrelevant to TransportClient or Node.",
    "HebCup": "Build and setup a new ES settings builder by consulting all JanusGraph config options relevant to TransportClient or Node."
}
{
    "Origin": "Return (perhaps after creation) the flock based on provided best sample.",
    "Reference": "Return (perhaps after creation) the tribe based on provided best sample.",
    "HebCup": "Return (perhaps after creation) the Tribe based on provided best sample."
}
{
    "Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateEcKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Retrieves a matching Swagger {@link Property} for a provided ballerina type.",
    "Reference": "Retrieves a matching OpenApi {@link Property} for a provided ballerina type.",
    "HebCup": "Retrieves a matching OpenApi {@link Property} for a provided ballerina type."
}
{
    "Origin": "Returns the first router available.",
    "Reference": "Returns the next router available.",
    "HebCup": "Returns the Next Router available."
}
{
    "Origin": "Returns the object with the settings used for calls to labelAudio.",
    "Reference": "Returns the object with the settings used for calls to listEvaluationJobs.",
    "HebCup": "Returns the object with the settings used for calls to ListEvaluationJobs."
}
{
    "Origin": "Returns the schema version of the given {@link SharedRealm}.",
    "Reference": "Returns the schema version of the given {@link OsSharedRealm}.",
    "HebCup": "Returns the schema version of the given {@link OsSharedRealm}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Start building a new factory class-based service binding.",
    "Reference": "Start building a new supplier class-based service binding.",
    "HebCup": "Start building a new Supplier Class-based service binding."
}
{
    "Origin": "Runs the logic to dispatch any responses to the current listeners until {@link #_isRunning} is false.",
    "Reference": "Runs the logic to dispatch any responses to the current listeners until {@link #isRunning} is false.",
    "HebCup": "Runs the logic to dispatch any responses to the current listeners until {@link#isRunning} is false."
}
{
    "Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?",
    "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?",
    "HebCup": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?"
}
{
    "Origin": "Add a duration with the given time unit.",
    "Reference": "Add a amount with the given time unit.",
    "HebCup": "Add a amount with the given time unit."
}
{
    "Origin": "Name of schedule",
    "Reference": "Name of task",
    "HebCup": "Name of Task"
}
{
    "Origin": "Calculate the result code of the disablement of one plugin based in what went on during the process of this one\nand its dependant plugins.",
    "Reference": "Calculate the result code of the disablement of one plugin based in what went on during the process of this one\nand its dependent plugins.",
    "HebCup": "Calculate the result code of the disablement of one plugin based in what went on during the process of this one and its Dependent plugins."
}
{
    "Origin": "Get the estimator type",
    "Reference": "Get the estimator",
    "HebCup": "Get the Estimator"
}
{
    "Origin": "The generated HotStream is not pausable, for a pausable HotStream @see {@link ReactiveSeq#primedPausableHotStream(Executor)}.",
    "Reference": "The generated Connectable is not pausable, for a pausable Connectable @see {@link ReactiveSeq#primedPausableHotStream(Executor)}.",
    "HebCup": "The generated Connectable is not pausable, for a pausable Connectable @see {@link ReactiveSeq#primedPausableHotStream (Executor)}."
}
{
    "Origin": "The destination\nwould be what would distinguish an \"FileAppender\" from a \"NetworkAppender\".",
    "Reference": "The connection\nwould be what would distinguish an \"FileAppender\" from a \"NetworkAppender\".",
    "HebCup": "The Connection would be what would distinguish an ``FileAppender`` from a ``NetworkAppender``."
}
{
    "Origin": "Edits existing notification schema.",
    "Reference": "Edits existing log schema.",
    "HebCup": "Edits existing Log Schema."
}
{
    "Origin": "Adds an value to values.",
    "Reference": "Adds an values to values.",
    "HebCup": "Adds an Values to values."
}
{
    "Origin": "The {@link KeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "The {@link KeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Since this is the same for every shard it picks {@link JDA#getApplicationInfo()} from any shard.",
    "Reference": "Since this is the same for every shard it picks {@link JDA#retrieveApplicationInfo()} from any shard.",
    "HebCup": "Since this is the same for every shard it picks {@link JDA#retrieveApplicationInfo ()} from any shard."
}
{
    "Origin": "Otherwise this returns the\nresult of {@link Cell#getCellTypeEnum()}.",
    "Reference": "Otherwise this returns the\nresult of {@link Cell#getCellType()}.",
    "HebCup": "Otherwise this returns the result of {@link Cell#getCellType ()}."
}
{
    "Origin": "Get assisted query column.",
    "Reference": "Find assisted query column.",
    "HebCup": "find Assisted Query Column."
}
{
    "Origin": "Return the configured {@link #setProxyPing(boolean)}",
    "Reference": "Return the configured {@link #setHandlePing(boolean)}.",
    "HebCup": "Return the configured {@link #setHandlePing(boolean)}"
}
{
    "Origin": "Provides a list of all connection wrappers corresponding to a current environment.",
    "Reference": "Provides a list of all connection configs corresponding to a current environment.",
    "HebCup": "Provides a list of all connection Configs corresponding to a current environment."
}
{
    "Origin": "Returns true if there is at least one workspace running(it's status is different from {@link",
    "Reference": "Returns true if there is at least one workspace active(it's status is different from {@link",
    "HebCup": "Returns true if there is at least one workspace Active (it's status is different from {@link"
}
{
    "Origin": "Once the GeneratedRootGlideModule is written, we expect to be\n  finished.",
    "Reference": "Once the GeneratedAppGlideModule is written, we expect to be\n  finished.",
    "HebCup": "Once the GeneratedAppGlideModule is written, we expect to be finished."
}
{
    "Origin": "Provides a function that updates the payload value of an {@link BaseEvent} by replacing it with a {@link CursorProvider}.",
    "Reference": "Provides a function that updates the payload value of an {@link CoreEvent} by replacing it with a {@link CursorProvider}.",
    "HebCup": "Provides a function that updates the payload value of an {@link CoreEvent} by replacing it with a {@link CursorProvider}."
}
{
    "Origin": "Returns the state variables from template header.",
    "Reference": "Returns the prop variables from template header.",
    "HebCup": "Returns the Prop variables from template header."
}
{
    "Origin": "Call {@link AndroidCommonUtils#getResourceName(String, String)} with {@link ResourceType#LAYOUT}.",
    "Reference": "Call {@link AndroidBuildCommonUtils#getResourceName(String, String)} with {@link ResourceType#LAYOUT}.",
    "HebCup": "Call {@link AndroidBuildCommonUtils#getResourceName (String, String)} with {@link ResourceType#LAYOUT}."
}
{
    "Origin": "Clears the value of the 'ValueType' field",
    "Reference": "Clears the value of the 'valueType' field.",
    "HebCup": "Clears the value of the 'valueType' field"
}
{
    "Origin": "Sets the value of the algIdExtSource property.",
    "Reference": "Sets the value of the spinValue property.",
    "HebCup": "Sets the value of the SpinValue property."
}
{
    "Origin": "If {@code keys = \"abc1234\"}, settings with a key equal to \"abc1234\" are returned.",
    "Reference": "If {@code keyFilter = \"abc1234\"}, settings with a key equal to \"abc1234\" are returned.",
    "HebCup": "If {@code KeyFilter = ``abc1234``}, settings with a key equal to ``abc1234`` are returned."
}
{
    "Origin": "Set the fileContentDisposition property: Sets the file's",
    "Reference": "Set the contentDisposition property: Sets the file's",
    "HebCup": "Set the contentDisposition property: Sets the file's"
}
{
    "Origin": "Renders this vertex into the given {@link BufferBuilder}, assuming that the {@link VertexFormat} is\n{@link DefaultVertexFormats#BLOCK}.",
    "Reference": "Renders this vertex into the given {@link VertexBuffer}, assuming that the {@link VertexFormat} is\n{@link DefaultVertexFormats#BLOCK}.",
    "HebCup": "Renders this vertex into the given {@link VertexBuffer}, assuming that the {@link VertexFormat} is {@link DefaultVertexFormats#BLOCK}."
}
{
    "Origin": "Resets the analytics collector for a new playlist.",
    "Reference": "Resets the analytics collector for a new media source.",
    "HebCup": "Resets the analytics collector for a New Media Source."
}
{
    "Origin": "Gets the site selector options.",
    "Reference": "Gets the sitemap site selector options.",
    "HebCup": "Gets the Sitemap Site Selector Options."
}
{
    "Origin": "The {@link Secret} is required.",
    "Reference": "The {@link KeyVaultSecret} is required.",
    "HebCup": "The {@link KeyVaultSecret} is required."
}
{
    "Origin": "Get the abstract files for the selected group",
    "Reference": "Get the result files for the selected group",
    "HebCup": "Get the Result Files for the selected group"
}
{
    "Origin": "The default cluster load balancer if all others fail.",
    "Reference": "The default cluster selector if all others fail.",
    "HebCup": "The default Cluster Selector if all others fail."
}
{
    "Origin": "Test always uses the zone default flavor",
    "Reference": "Test always uses the zone default resources",
    "HebCup": "Test always uses the zone default resources"
}
{
    "Origin": "However, since we\ninject the ConstantAnnotationMarker the Annotation proxy types for ahead-of-time allocated\nannotations implement two interfaces.",
    "Reference": "However, since we\ninject the constant-annotation-marker interface the Annotation proxy types for ahead-of-time\nallocated annotations implement two interfaces.",
    "HebCup": "However, since we inject the constantAnnotationMarkerInterface the Annotation proxy types for ahead-of-time allocated annotations implement two interfaces."
}
{
    "Origin": "Adds the given word into the given string buffer with the start and end times from the given features.",
    "Reference": "Adds the given word into the given string builder with the start and end times from the given features.",
    "HebCup": "Adds the given word into the given String Builder with the start and end times from the given features."
}
{
    "Origin": "Returns an immutable map containing two mappings.",
    "Reference": "Returns an unmodifiable map containing two mappings.",
    "HebCup": "Returns an Unmodifiable map containing two mappings."
}
{
    "Origin": "OutputStream output, int dpi, float quality)} for more details.",
    "Reference": "OutputStream output, int dpi, float compressionQuality)} for more details.",
    "HebCup": "OutputStream output, int dpi, float compressionQuality)} for more details."
}
{
    "Origin": "Creates a {@link DynamicRealm} instance with a given {@link SharedRealm} instance without owning it.",
    "Reference": "Creates a {@link DynamicRealm} instance with a given {@link OsSharedRealm} instance without owning it.",
    "HebCup": "Creates a {@link DynamicRealm} instance with a given {@link OsSharedRealm} instance without owning it."
}
{
    "Origin": "Scenario:\n  - CA is only in service trust store, missing from gateway trust store\n  - Gateway does not trust service, as it does not trust CA\n  - Service trusts gateway via CA",
    "Reference": "Scenario:\n  - CA is only in API trust store, missing from gateway trust store\n  - Gateway does not trust API, as it does not trust CA\n  - API trusts gateway via CA",
    "HebCup": "Scenario: - CA is only in Api trust store, missing from gateway trust store - Gateway does not trust Api, as it does not trust CA - Api trusts gateway via CA"
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSetting#string-string}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteConfigurationSetting#string-string}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteConfigurationSetting#string-string}"
}
{
    "Origin": "Scenario:\n  - no CA inherited trust\n  - gateway trusts service certificate directly\n  - service trusts gateway certificate directly",
    "Reference": "Scenario:\n  - no CA inherited trust\n  - gateway trusts API certificate directly\n  - API trusts gateway certificate directly",
    "HebCup": "Scenario: - no CA inherited trust - gateway trusts Api certificate directly - Api trusts gateway certificate directly"
}
{
    "Origin": "Sets {@link ValidationType} for commit context.",
    "Reference": "Sets {@link ValidationMode} for commit context.",
    "HebCup": "Sets {@link ValidationMode} for commit context."
}
{
    "Origin": "The meta-property for the {@code holidays} property.",
    "Reference": "The meta-property for the {@code weekends} property.",
    "HebCup": "The meta-property for the {@code weekends} property."
}
{
    "Origin": "Use this when you need customizations such as log integration via\n{@linkplain Builder#addScopeDecorator(ScopeDecorator)}.",
    "Reference": "Use this when you need customizations such as log integration via\n{@linkplain RequestContextCurrentTraceContextBuilder#addScopeDecorator(ScopeDecorator)}.",
    "HebCup": "Use this when you need customizations such as log integration via {@linkplain RequestContextCurrentTraceContextBuilder#addScopeDecorator (ScopeDecorator)}."
}
{
    "Origin": "Especially notice that a\n{@link FCPPluginClient} is safe and intended to be used for multiple messages, you should\nnot obtain a fresh one for every message you send.",
    "Reference": "Especially notice that a\n{@link FCPPluginConnection} is safe and intended to be used for multiple messages, you should\nnot obtain a fresh one for every message you send.",
    "HebCup": "Especially notice that a {@link FCPPluginConnection} is safe and intended to be used for multiple messages, you should not obtain a fresh one for every message you send."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubDirectory#string}",
    "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory#string}",
    "HebCup": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory#string}"
}
{
    "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "It is sometimes more convenient to use {@link #promise(ObservableOnSubscribe)} over this method.",
    "Reference": "It is sometimes more convenient to use {@link #promiseAll(ObservableOnSubscribe)} over this method.",
    "HebCup": "It is sometimes more convenient to use {@link#promiseAll (ObservableOnSubscribe)} over this method."
}
{
    "Origin": "Set the IterationListeners for the ComputationGraph (and all layers in the network)",
    "Reference": "Set the trainingListeners for the ComputationGraph (and all layers in the network)",
    "HebCup": "Set the TrainingListeners for the ComputationGraph (and all layers in the network)"
}
{
    "Origin": "Shortcut to add a line of generated code",
    "Reference": "Shortcut to append a line of generated code",
    "HebCup": "Shortcut to append a line of generated code"
}
{
    "Origin": "Returns true if field persistedFileStatuses is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field persistedFileFingerprints is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field PersistedFileFingerprints is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "Creates a CaptureRequestConfiguration.Builder contains shared options.",
    "Reference": "Creates a CaptureRequestConfig.Builder contains shared options.",
    "HebCup": "Creates a CaptureRequestConfig.Builder contains shared options."
}
{
    "Origin": "Creates an {@link Array} containing the elements of this builder.",
    "Reference": "Creates an {@link XQArray} containing the elements of this builder.",
    "HebCup": "Creates an {@link XQArray} containing the elements of this builder."
}
{
    "Origin": "Get the iterable of all providers (custom and default) registered for the given service provider contract\nin the underlying {@link InstanceManager instance manager} container.",
    "Reference": "Get the iterable of all providers (custom and default) registered for the given service provider contract\nin the underlying {@link InjectionManager injection manager} container.",
    "HebCup": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link InjectionManager Injection Manager} container."
}
{
    "Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for\na directory with un-synced persistent entries with a sync check.",
    "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for\na directory with un-synced persistent entries with a sync check.",
    "HebCup": "Tests the {@link FileSystemMaster#delete (AlluxioURI, DeleteContext)} method for a directory with un-synced persistent entries with a sync check."
}
{
    "Origin": "Returns a list of packages available for the current project.",
    "Reference": "Returns a list of modules available for the current project.",
    "HebCup": "Returns a list of Modules available for the current project."
}
{
    "Origin": "Set number of partitions need processed for finished indexes create or rebuilding.",
    "Reference": "Add number of partitions need processed for finished indexes create or rebuilding.",
    "HebCup": "add number of partitions need processed for finished indexes create or rebuilding."
}
{
    "Origin": "Set this matrix to the rotation transformation of the given {@link Quaterniond}.",
    "Reference": "Set this matrix to the rotation transformation of the given {@link Quaterniondc}.",
    "HebCup": "Set this matrix to the rotation transformation of the given {@link Quaterniondc}."
}
{
    "Origin": "Gets the valueType.",
    "Reference": "Gets the newType.",
    "HebCup": "Gets the newType."
}
{
    "Origin": "Create a copy of TopologyMetaData with only endpointToHostIdMap.",
    "Reference": "Create a copy of TopologyMetaData with only nodeToHostIdMap.",
    "HebCup": "Create a copy of TopologyMetaData with only nodeToHostIdMap."
}
{
    "Origin": "Removes the specified keys from the metadata of the specified {@link NamespacedEntityId}.",
    "Reference": "Removes the specified keys from the metadata of the specified {@link MetadataEntity}.",
    "HebCup": "Removes the specified keys from the metadata of the specified {@link MetadataEntity}."
}
{
    "Origin": "Gets the value of the 'KeepDeletedCells' field.",
    "Reference": "Gets the value of the 'keepDeletedCells' field.",
    "HebCup": "Gets the value of the 'keepDeletedCells' field."
}
{
    "Origin": "Create a {@link InstanceManager}.",
    "Reference": "Create a {@link InjectionManager}.",
    "HebCup": "Create a {@link InjectionManager}."
}
{
    "Origin": "Tests resilency when L2 link is down.",
    "Reference": "Tests resiliency when L2 link is down.",
    "HebCup": "Tests resiliency when L2 link is down."
}
{
    "Origin": "This sets up a PoolingDataSource.",
    "Reference": "This sets up a PoolingDataSourceWrapper.",
    "HebCup": "This sets up a PoolingDataSourceWrapper."
}
{
    "Origin": "Returns a function.",
    "Reference": "Returns a function call.",
    "HebCup": "Returns a function."
}
{
    "Origin": "This method ADDS additional IterationListener to existing listeners",
    "Reference": "This method ADDS additional TrainingListener to existing listeners",
    "HebCup": "This method ADDS additional TrainingListener to existing listeners"
}
{
    "Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getContentLanguage(Context)}.",
    "Reference": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.",
    "HebCup": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage (Context)}."
}
{
    "Origin": "The classpath.",
    "Reference": "The build classpath.",
    "HebCup": "The classpath."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Scheduler, with this\ntask's result as the argument to the supplied action.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Executor, with this\ntask's result as the argument to the supplied action.",
    "HebCup": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied action."
}
{
    "Origin": "Standard setter for the rightwardLabel String in this Relationship",
    "Reference": "Standard setter for the rightwardValue String in this Relationship",
    "HebCup": "Standard setter for the rightwardValue String in this Relationship"
}
{
    "Origin": "Gets the field name to use when converting from a DBObject",
    "Reference": "Gets the field name to use when converting from a Document",
    "HebCup": "Gets the field name to use when converting from a Document"
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "I need to know chart dimension to remove extra empty spaces, that bad because viewport depends a\nlittle on contentRectMinusAllMargins.",
    "Reference": "I need to know chart dimension to remove extra empty spaces, that bad because viewport depends a\nlittle on contentRect.",
    "HebCup": "I need to know chart dimension to remove extra empty spaces, that bad because viewport depends a little on ContentRect."
}
{
    "Origin": "Sets the value of the any property.",
    "Reference": "Sets the value of the schemaLanguage property.",
    "HebCup": "Sets the value of the SchemaLanguage property."
}
{
    "Origin": "The array length access has been removed\nfrom the offset.",
    "Reference": "The sequence length\naccess has been removed from the offset.",
    "HebCup": "The Sequence Length Access has been removed from the offset."
}
{
    "Origin": "Creates a new DataLakeDirectoryAsyncClient object by concatenating subDirectoryName to the end of",
    "Reference": "Creates a new DataLakeDirectoryAsyncClient object by concatenating subdirectoryName to the end of",
    "HebCup": "Creates a new DataLakeDirectoryAsyncClient object by concatenating subdirectoryName to the end of"
}
{
    "Origin": "Creates an invalid service status exception.",
    "Reference": "Creates an invalid API status exception.",
    "HebCup": "Creates an Invalid Api Status Exception."
}
{
    "Origin": "Creates a new {@link FileIOChannel.Enumerator}, spreading the channels in a round-robin fashion\nacross the temporary file directories.",
    "Reference": "Creates a new {@link Enumerator}, spreading the channels in a round-robin fashion\nacross the temporary file directories.",
    "HebCup": "Creates a new {@link Enumerator}, spreading the channels in a round-robin fashion across the temporary file directories."
}
{
    "Origin": "The generated HotStream is pausable, for a unpausable HotStream @see {@link ReactiveSeq#primedHotStream(Executor)}.",
    "Reference": "The generated Connectable is pausable, for a unpausable Connectable @see {@link ReactiveSeq#primedHotStream(Executor)}.",
    "HebCup": "The generated Connectable is pausable, for a unpausable Connectable @see {@link ReactiveSeq#primedHotStream (Executor)}."
}
{
    "Origin": "Tests resilency when L2 and L4 link is down.",
    "Reference": "Tests resiliency when L2 and L4 link is down.",
    "HebCup": "Tests resiliency when L2 and L4 link is down."
}
{
    "Origin": "Invoke the Method Handler as a Callable.",
    "Reference": "Invoke the Method Handler as a Publisher.",
    "HebCup": "Invoke the Method Handler as a Publisher."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Creates builder for {@link PreparedDeleteObjects}.",
    "Reference": "Creates builder for {@link PreparedDeleteCollectionOfObjects}.",
    "HebCup": "Creates builder for {@link PreparedDeleteCollectionOfObjects}."
}
{
    "Origin": "Returns whether the inodeFile is fully in memory or not.",
    "Reference": "Returns whether the inodeFile is fully in Alluxio or not.",
    "HebCup": "Returns whether the inodeFile is Fully In Alluxio or not."
}
{
    "Origin": "Create a new {@link MappingMongoConverter} using the given {@link MongoDbFactory} when loading {@link DBRef}.",
    "Reference": "Create a new {@link MappingMongoConverter} using the given {@link MongoDatabaseFactory} when loading {@link DBRef}.",
    "HebCup": "Create a new {@link MappingMongoConverter} using the given {@link MongoDatabaseFactory} when loading {@link DBRef}."
}
{
    "Origin": "The negative of {@code endsWith} is {@link #endsNotWith}.",
    "Reference": "The negative of {@code endsWith} is {@link #notEndingWith}.",
    "HebCup": "The negative of {@code endsWith} is {@link#notEndingWith}."
}
{
    "Origin": "Bind all providers contained in {@code providerBag} (classes and instances) using instance manager.",
    "Reference": "Bind all providers contained in {@code providerBag} (classes and instances) using injection manager.",
    "HebCup": "Bind all providers contained in {@code providerBag} (classes and instances) using Injection Manager."
}
{
    "Origin": "Initializes the RESTXQ module cache.",
    "Reference": "Initializes the web module cache.",
    "HebCup": "Initializes the Web module cache."
}
{
    "Origin": "Takes the detected squares and turns it into a list of {@link PositionSquare}.",
    "Reference": "Takes the detected squares and turns it into a list of {@link PositionPatternNode}.",
    "HebCup": "Takes the detected squares and turns it into a list of {@link PositionPatternNode}."
}
{
    "Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateEcKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Resolves a {@link NameableClusterPrivilege} from a given name if it exists.",
    "Reference": "Resolves a {@link NamedClusterPrivilege} from a given name if it exists.",
    "HebCup": "Resolves a {@link NamedClusterPrivilege} from a given name if it exists."
}
{
    "Origin": "It is recommended to bind the service to a server using\n{@linkplain ServerBuilder#service(ServiceWithRoutes, Function[])",
    "Reference": "It is recommended to bind the service to a server using\n{@linkplain ServerBuilder#service(HttpServiceWithRoutes, Function[])",
    "HebCup": "It is recommended to bind the service to a server using {@linkplain ServerBuilder#service(HttpServiceWithRoutes, Function[])"
}
{
    "Origin": "Returns the Google accounts (see {@link #isGoogleAccountType) for this ContactListFilter.",
    "Reference": "Returns the Google accounts (see {@link #isWritableGoogleTypeFilter ) for this ContactListFilter.",
    "HebCup": "Returns the Google accounts (see {@link#isWritableGoogleTypeFilter) for this ContactListFilter."
}
{
    "Origin": "Test of npara method, of class ShiftedGeometricDistribution.",
    "Reference": "Test of length method, of class ShiftedGeometricDistribution.",
    "HebCup": "Test of Length method, of class ShiftedGeometricDistribution."
}
{
    "Origin": "Return a list of expanded labels in the current tree.",
    "Reference": "Return a list of expanded clusters in the current tree.",
    "HebCup": "Return a list of Expanded Clusters in the current tree."
}
{
    "Origin": "Generates an in-memory key for an service, used to index the app for later quick\nretrieval.",
    "Reference": "Generates an in-memory key for an api, used to index the app for later quick\nretrieval.",
    "HebCup": "Generates an in-memory key for an Api, used to index the app for later quick retrieval."
}
{
    "Origin": "Returns true if field jvmVersion is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field version is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field Version is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubDirectory#String}",
    "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubdirectory#String}",
    "HebCup": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubdirectory#String}"
}
{
    "Origin": "The state of playback should be updated to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done.",
    "Reference": "The state of playback should be updated to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prepare is done.",
    "HebCup": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the Prepare is done."
}
{
    "Origin": "***** Property JHOME *****",
    "Reference": "***** Property JAVAHOME *****",
    "HebCup": "***** Property JAVAHOME *****"
}
{
    "Origin": "Tests {@link Array#tail()}.",
    "Reference": "Tests {@link XQArray#tail()}.",
    "HebCup": "Tests {@link XQArray#tail ()}."
}
{
    "Origin": "Compiles classes in {@code paths}",
    "Reference": "Compiles classes in {@code targets}",
    "HebCup": "Compiles classes in {@code targets}"
}
{
    "Origin": "Record an {@link ExecutionEvent} for a published {@link ReportEntry}.",
    "Reference": "Record an {@link Event} for a published {@link ReportEntry}.",
    "HebCup": "Record an {@link Event} for a published {@link ReportEntry}."
}
{
    "Origin": "Converts a {@link Promise} into a {@link Completable}.",
    "Reference": "Converts a {@link Operation} into a {@link Completable}.",
    "HebCup": "Converts a {@link operation} into a {@link Completable}."
}
{
    "Origin": "During the prefetch, a session should not hold audio focus in order to allow\nother sessions play seamlessly.",
    "Reference": "During the prepare, a session should not hold audio focus in order to allow\nother sessions play seamlessly.",
    "HebCup": "During the Prepare, a session should not hold audio focus in order to allow other sessions play seamlessly."
}
{
    "Origin": "Match statement against pattern for alter schedule",
    "Reference": "Match statement against pattern for alter task",
    "HebCup": "Match statement against pattern for Alter Task"
}
{
    "Origin": "Tests {@code globalRecommend(Set, int)}.",
    "Reference": "Tests {@code recommendRelatedItems()(Set, int)}.",
    "HebCup": "Tests {@code recommendRelatedItems(Set, int)}."
}
{
    "Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "HebCup": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."
}
{
    "Origin": "Defaults to 0.",
    "Reference": "Defaults to 60000.",
    "HebCup": "Defaults to 60000."
}
{
    "Origin": "List the roles of the {@param user}.",
    "Reference": "List the roles of the {@param principal}.",
    "HebCup": "List the roles of the {@param principal}."
}
{
    "Origin": "If the\noffsets list is not empty, then it must be the same size as array.",
    "Reference": "If the offsets list is not empty, then it must be the same size as sequence.",
    "HebCup": "If the offsets list is not empty, then it must be the same size as sequence."
}
{
    "Origin": "Return a forward-order iterator of this node's children.",
    "Reference": "Return a forward-order stream of this node's children.",
    "HebCup": "Return a forward-order Stream of this node's children."
}
{
    "Origin": "- Will fail, as defaults are relatively safe,\n    and service certificate will not be recognised.",
    "Reference": "- Will fail, as defaults are relatively safe,\n    and API certificate will not be recognised.",
    "HebCup": "- Will fail, as defaults are relatively safe, and Api certificate will not be recognised."
}
{
    "Origin": "(Try to) connect this fermata with a suitable barline.",
    "Reference": "(Try to) connect this fermata with a suitable StaffBarline.",
    "HebCup": "(Try to) connect this fermata with a suitable barline."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "have been added with {@link #activateIndex(IndexDescriptor2)}.",
    "Reference": "have been added with {@link #activateIndex(IndexDescriptor)}.",
    "HebCup": "have been added with {@link #activateIndex(IndexDescriptor)}."
}
{
    "Origin": "Returns the member's term.",
    "Reference": "Returns the member's incarnation number.",
    "HebCup": "Returns the member's term."
}
{
    "Origin": "Read one constant from the given file, the type depends on a tag byte.",
    "Reference": "Read one constant from the given input, the type depends on a tag byte.",
    "HebCup": "Read one constant from the given input, the type depends on a tag byte."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Scenario:\n  - no CA inherited trust\n  - gateway does not trust the service\n  - service trusts gateway certificate",
    "Reference": "Scenario:\n  - no CA inherited trust\n  - gateway does not trust the API\n  - API trusts gateway certificate",
    "HebCup": "Scenario: - no CA inherited trust - gateway does not trust the Api - Api trusts gateway certificate"
}
{
    "Origin": "Returns the corresponding ShapeRenderer for a given ScatterShape.",
    "Reference": "Returns the corresponding IShapeRenderer for a given ScatterShape.",
    "HebCup": "Returns the corresponding IShapeRenderer for a given ScatterShape."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.deleteSubDirectory#string}",
    "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory#string}",
    "HebCup": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory#string}"
}
{
    "Origin": "Returns the distanceFunction.",
    "Reference": "Returns the distance.",
    "HebCup": "Returns the distance."
}
{
    "Origin": "Returns an RxJava Observable that monitors changes to this RealmObject.",
    "Reference": "Returns an RxJava Flowable that monitors changes to this RealmObject.",
    "HebCup": "Returns an RxJava Flowable that monitors changes to this RealmObject."
}
{
    "Origin": "Creates a new instance of {@link BlockMasterInfo} from a thrift representation.",
    "Reference": "Creates a new instance of {@link BlockMasterInfo} from a proto representation.",
    "HebCup": "Creates a new instance of {@link BlockMasterInfo} from a Proto representation."
}
{
    "Origin": "Locks existing inodes on the specified path, in the specified {@link LockMode}.",
    "Reference": "Locks existing inodes on the specified path, in the specified {@link LockPattern}.",
    "HebCup": "Locks existing inodes on the specified path, in the specified {@link LockPattern}."
}
{
    "Origin": "Sets {@link MediaItem2} object to render using VideoView2.",
    "Reference": "Sets {@link MediaItem} object to render using VideoView2.",
    "HebCup": "Sets {@link MediaItem} object to render using VideoView2."
}
{
    "Origin": "Set the max minutes per log file.",
    "Reference": "Set the current log file name",
    "HebCup": "Set the current Log File Name."
}
{
    "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Converts the given view data into datapoints that can be sent to SignalFx.",
    "Reference": "Converts the given Metric into datapoints that can be sent to SignalFx.",
    "HebCup": "Converts the given Metric into datapoints that can be sent to SignalFx."
}
{
    "Origin": "This method obtains the extension as the textual part of the filename\nafter the last dot.",
    "Reference": "This method obtains the extension as the textual part of the fileName\nafter the last dot.",
    "HebCup": "This method obtains the extension as the textual part of the fileName after the last dot."
}
{
    "Origin": "Test method for 'org.kie.common.asm.ClassBuilder.buildClass(ClassDefinition)'",
    "Reference": "Test method for 'org.drools.common.asm.ClassBuilder.buildClass(ClassDefinition)'",
    "HebCup": "Test method for 'org.drools.common.asm.ClassBuilder.buildClass(ClassDefinition)'"
}
{
    "Origin": "Transitive reduction of requires public edge and requires edge have\nto be applied separately to prevent the requires public edges\n(e.g.",
    "Reference": "Transitive reduction of requires transitive edge and requires edge have\nto be applied separately to prevent the requires transitive edges\n(e.g.",
    "HebCup": "Transitive reduction of requires TRANSITIVE edge and requires edge have to be applied separately to prevent the requires TRANSITIVE edges (e.g."
}
{
    "Origin": "Setter for {@link #allowHeaders}",
    "Reference": "Setter for {@link #allowedHeaders}",
    "HebCup": "Setter for {@link#allowedHeaders}"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Gets the bond group.",
    "Reference": "Gets the repo group.",
    "HebCup": "Gets the Repo Group."
}
{
    "Origin": "The {@code Chronology} represents the calendar system in use.",
    "Reference": "The {@code Chrono} represents the calendar system in use.",
    "HebCup": "The {@code Chrono} represents the calendar system in use."
}
{
    "Origin": "Setting raw updates handler provider",
    "Reference": "Setting raw updates handler",
    "HebCup": "Setting Raw Updates Handler"
}
{
    "Origin": "Returns true if the Embedded Social app key is non-empty",
    "Reference": "Returns true if the Embedded Social api key is non-empty",
    "HebCup": "Returns true if the Embedded Social Api Key is non-empty"
}
{
    "Origin": "Construct a {@link AgentManifestMessage} from the given {@link JobDirectoryManifest}.",
    "Reference": "Construct a {@link AgentManifestMessage} from the given {@link DirectoryManifest}.",
    "HebCup": "Construct a {@link AgentManifestMessage} from the given {@link DirectoryManifest}."
}
{
    "Origin": "Test for {@link Array#members()}.",
    "Reference": "Test for {@link XQArray#members()}.",
    "HebCup": "Test for {@link XQArray#members ()}."
}
{
    "Origin": "It creates a topic using KafkaProducer.",
    "Reference": "It creates a topic using Producer.",
    "HebCup": "It creates a topic using Producer."
}
{
    "Origin": "The returned era will be a singleton capable of being compared with the constants\nin {@link ISOChrono} using the {@code ==} operator.",
    "Reference": "The returned era will be a singleton capable of being compared with the constants\nin {@link ISOChronology} using the {@code ==} operator.",
    "HebCup": "The returned era will be a singleton capable of being compared with the constants in {@link ISOChronology} using the {@code ==} operator."
}
{
    "Origin": "TransactionToApply} given.",
    "Reference": "CommandsToApply} given.",
    "HebCup": "CommandsToApply} given."
}
{
    "Origin": "In order to set the matrix to a rotation transformation without pre-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without pre-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Returns the Jaas Realm named as realmName.",
    "Reference": "Returns the JAAS Realm named as realmName.",
    "HebCup": "Returns the Jaas Realm named as realmName."
}
{
    "Origin": "Returns the quorum name for queue operations.",
    "Reference": "Returns the split brain protection name for queue operations.",
    "HebCup": "Returns the split Brain Protection Name for queue operations."
}
{
    "Origin": "Assert that the named response header does exist.",
    "Reference": "Assert that the named response header exists.",
    "HebCup": "Assert that the named response header exists."
}
{
    "Origin": "The {@link EcKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault,\nif not specified.",
    "Reference": "The {@link CreateEcKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault,\nif not specified.",
    "HebCup": "The {@link CreateEcKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Turns this Streamable into a HotStream, a connectable Stream, being executed on a thread on the\nsupplied executor, that is producing data",
    "Reference": "Turns this Streamable into a Connectable, a connectable Stream, being executed on a thread on the\nsupplied executor, that is producing data",
    "HebCup": "Turns this Streamable into a Connectable, a connectable Stream, being executed on a thread on the supplied executor, that is producing data"
}
{
    "Origin": "Add optimized insert value.",
    "Reference": "Add insert value.",
    "HebCup": "add Insert Value."
}
{
    "Origin": "Creates a {@code TokenStream} that aggregates the outputs of a given set of\n{@code TokenStreams}.",
    "Reference": "Creates a {@code TwitterTokenStream} that aggregates the outputs of a given set of\n{@code TokenStreams}.",
    "HebCup": "Creates a {@code TwitterTokenStream} that aggregates the outputs of a given set of {@code TokenStreams}."
}
{
    "Origin": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubDirectoryAsyncClient(String)}",
    "Reference": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubdirectoryAsyncClient(String)}",
    "HebCup": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubdirectoryAsyncClient (String)}"
}
{
    "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "HebCup": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners."
}
{
    "Origin": "Sets the value of the 'publicPort' field",
    "Reference": "Sets the value of the 'publicPorts' field",
    "HebCup": "Sets the value of the 'PublicPorts' field"
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "Returns the \"real\" location of the file loaded by the other commands, starting from javatests/.",
    "Reference": "Returns the \"real\" location of the file loaded by the other commands, starting from\nsrc/test/resources/.",
    "HebCup": "Returns the ``real`` location of the file loaded by the other commands, starting from src/test/resources/."
}
{
    "Origin": "Validates that the {@link #operationModel} is valid for the given {@code configurationProvider}",
    "Reference": "Validates that the {@link #componentModel} is valid for the given {@code configurationProvider}",
    "HebCup": "Validates that the {@link#componentModel} is valid for the given {@code configurationProvider}"
}
{
    "Origin": "Generate a FactorStatus from a string.",
    "Reference": "Generate a FactorStatuses from a string.",
    "HebCup": "Generate a FactorStatuses from a string."
}
{
    "Origin": "Setter for {@link #exposeOnlyRequestedHeader}",
    "Reference": "Setter for {@link #allowOnlyRequestedHeader}",
    "HebCup": "Setter for {@link#allowOnlyRequestedHeader}"
}
{
    "Origin": "Opens a {@link TitanGraph} database configured according to the provided configuration.",
    "Reference": "Opens a {@link JanusGraph} database configured according to the provided configuration.",
    "HebCup": "Opens a {@link JanusGraph} database configured according to the provided configuration."
}
{
    "Origin": "Builds a metastorage key for pending task object.",
    "Reference": "Builds a metastorage key for continuous task object.",
    "HebCup": "Builds a metastorage key for continuous task object."
}
{
    "Origin": "Retrieves all the tags for the specified {@link NamespacedEntityId}.",
    "Reference": "Retrieves all the tags for the specified {@link MetadataEntity}.",
    "HebCup": "Retrieves all the tags for the specified {@link MetadataEntity}."
}
{
    "Origin": "Creates a valid {@link Sort} operation.",
    "Reference": "Creates a valid {@link SortTableOperation} operation.",
    "HebCup": "Creates a valid {@link SortTableOperation} operation."
}
{
    "Origin": "Setter for {@link #exposeHeaders}",
    "Reference": "Setter for {@link #allowHeaders}",
    "HebCup": "Setter for {@link#allowHeaders}"
}
{
    "Origin": "Creates tag swagger definition.",
    "Reference": "Creates tag openApi definition.",
    "HebCup": "Creates tag openApi definition."
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "This method will interpolate between each two successive quaternions via {@link #nlerpIterative(Quaterniond, double, double)}\nusing their relative interpolation weights.",
    "Reference": "This method will interpolate between each two successive quaternions via {@link #nlerpIterative(Quaterniondc, double, double)}\nusing their relative interpolation weights.",
    "HebCup": "This method will interpolate between each two successive quaternions via {@link #nlerpIterative(Quaterniondc, double, double)} using their relative interpolation weights."
}
{
    "Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@code pathPattern}.",
    "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}.",
    "HebCup": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}."
}
{
    "Origin": "Removes all the tags from the {@link NamespacedEntityId}",
    "Reference": "Removes all the tags from the {@link MetadataEntity}",
    "HebCup": "Removes all the tags from the {@link MetadataEntity}"
}
{
    "Origin": "The maximum size for #extraData is 32600 bytes.",
    "Reference": "The maximum size for #extraDataWriter is 32600 bytes.",
    "HebCup": "The maximum size for#extraDataWriter is 32600 bytes."
}
{
    "Origin": "Returns true if field ufsLastModificationTimeMs is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field ufsFingerprint is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field UfsFingerprint is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "If the reading user and the target\nuser are not the same, then explicit READ or SYSTEM_ADMINISTER access is\nrequired.",
    "Reference": "If the reading user and the target\nentity are not the same, then explicit READ or SYSTEM_ADMINISTER access\nis required.",
    "HebCup": "If the reading user and the target Entity are not the same, then explicit READ or SYSTEM_ADMINISTER access is required."
}
{
    "Origin": "The bucket that is included in this file.",
    "Reference": "The bucketId that is included in this file.",
    "HebCup": "The bucketId that is included in this file."
}
{
    "Origin": "Encode each value.",
    "Reference": "Encode each Resource.",
    "HebCup": "Encode each Resource."
}
{
    "Origin": "This indicator says if --defaultReturnType parameter should be visible or not.",
    "Reference": "This indicator says if --returnType parameter should be visible or not.",
    "HebCup": "This indicator says if --returnType parameter should be visible or not."
}
{
    "Origin": "Decode an action profile group with members information to a PI action\ngroup.",
    "Reference": "Decode an action profile group with members information to a PI action\nprofile group.",
    "HebCup": "Decode an action profile group with members information to a Pi Action Profile Group."
}
{
    "Origin": "Returns the highlighInfo.",
    "Reference": "Returns the parameters.",
    "HebCup": "Returns the Parameters."
}
{
    "Origin": "Gets the SSLHostConfig infos.",
    "Reference": "Gets the SslHostConfig infos.",
    "HebCup": "Gets the SslHostConfig infos."
}
{
    "Origin": "Provides the default {@link GoogleCredential} from the Google Cloud runtime.",
    "Reference": "Provides the default {@link GoogleCredentialsBundle} from the Google Cloud runtime.",
    "HebCup": "Provides the default {@link GoogleCredentialsBundle} from the Google Cloud runtime."
}
{
    "Origin": "This\ndeclaration is of the form \"Label lXXX = new Label();\".",
    "Reference": "This declaration is of the\nform \"Label labelXXX = new Label();\".",
    "HebCup": "This declaration is of the form ``Label labelXXX = new Label();``."
}
{
    "Origin": "Returns a Graph containing only requires public edges\nwith transitive reduction.",
    "Reference": "Returns a Graph containing only requires transitive edges\nwith transitive reduction.",
    "HebCup": "Returns a Graph containing only requires Transitive edges with transitive reduction."
}
{
    "Origin": "Retrieves all the properties for the specified {@link NamespacedEntityId}.",
    "Reference": "Retrieves all the properties for the specified {@link MetadataEntity}.",
    "HebCup": "Retrieves all the properties for the specified {@link MetadataEntity}."
}
{
    "Origin": "Parent will have\nmodified time to set to {@link LayerEntry#DEFAULT_MODIFIED_TIME}.",
    "Reference": "Parent will have\nmodified time to set to {@link LayerConfiguration#DEFAULT_MODIFIED_TIME}.",
    "HebCup": "Parent will have modified time to set to {@link LayerConfiguration#DEFAULT_MODIFIED_TIME}."
}
{
    "Origin": "This defaults to all of the {@linkplain Action} in\n{@linkplain ActionPlugin#getActions()}.",
    "Reference": "This defaults to all of the {@linkplain ActionType} in\n{@linkplain ActionPlugin#getActions()}.",
    "HebCup": "This defaults to all of the {@linkplain ActionType} in {@linkplain ActionPlugin#getActions ()}."
}
{
    "Origin": "Add a EventLogItem, but don't log.",
    "Reference": "Add a EventLogEntry, but don't log.",
    "HebCup": "Add a EventLogEntry, but don't log."
}
{
    "Origin": "Return point data dimension count",
    "Reference": "Return point dimension count",
    "HebCup": "Return point Dimension Count"
}
{
    "Origin": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given AuthorityName param",
    "Reference": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName\nparam",
    "HebCup": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName param"
}
{
    "Origin": "Calls {@link Plugin#didDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)}\non all the bundled plugins",
    "Reference": "Calls {@link Plugin#afterDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)}\non all the bundled plugins",
    "HebCup": "Calls {@link Plugin#afterDeclareGetter (TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins"
}
{
    "Origin": "Getter Parameter Value for File Name",
    "Reference": "Getter Parameter Value for File Path or Name",
    "HebCup": "Getter Parameter Value for file Path Or Name"
}
{
    "Origin": "{@code MinguoEra} is an enum representing the Minguo eras of ERA_BEFORE_ROC/ROC.",
    "Reference": "{@code MinguoEra} is an enum representing the Minguo eras of BEFORE_ROC/ROC.",
    "HebCup": "{@code MinguoEra} is an enum representing the Minguo eras of BEFORE_ROC/ROC."
}
{
    "Origin": "Get the current {@link IGetAndSetLocator}.",
    "Reference": "Get the current {@link IPropertyLocator}.",
    "HebCup": "Get the current {@link IPropertyLocator}."
}
{
    "Origin": "Provides a list of all connection wrappers corresponding to a current environment.",
    "Reference": "Provides a list of all connection configs corresponding to a current environment.",
    "HebCup": "Provides a list of all connection Configs corresponding to a current environment."
}
{
    "Origin": "The {@link RsaKeyCreateOptions} is required.",
    "Reference": "The {@link CreateRsaKeyOptions} is required.",
    "HebCup": "The {@link CreateRsaKeyOptions} is required."
}
{
    "Origin": "Get the representative SingleEvent for this cell.",
    "Reference": "Get the representative TimeLineEvent for this cell.",
    "HebCup": "Get the representative TimelineEvent for this cell."
}
{
    "Origin": "Loads the muCommander configuration.",
    "Reference": "Loads the muCommander CONFIGURATION.",
    "HebCup": "Loads the muCommander CONFIGURATION."
}
{
    "Origin": "Returns an {@link Operator} version of {@link #run(Observable)}.",
    "Reference": "Returns an {@link Transformer} version of {@link #run(Observable)}.",
    "HebCup": "Returns an {@link Transformer} version of {@link#run (Observable)}."
}
{
    "Origin": "Generates a code sample for using {@link FileAsyncClient#setProperties(long, FileHTTPHeaders, FileSmbProperties, String)}",
    "Reference": "Generates a code sample for using {@link FileAsyncClient#setProperties(long, FileHttpHeaders, FileSmbProperties, String)}",
    "HebCup": "Generates a code sample for using {@link FileAsyncClient#setProperties (long, FileHttpHeaders, FileSmbProperties, String)}"
}
{
    "Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions)}",
    "Reference": "Code snippets for {@link BlobAsyncClient#setHttpHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions)}",
    "HebCup": "Code snippets for {@link BlobAsyncClient#setHttpHeadersWithResponse (BlobHttpHeaders, BlobAccessConditions)}"
}
{
    "Origin": "Returns whether or not this qualifier has array with offset of -1.",
    "Reference": "Returns whether or not this qualifier has sequence with offset of -1.",
    "HebCup": "Returns whether or not this qualifier has Sequence With Offset of -1."
}
{
    "Origin": "Also @see {@link CompletableFutures#accumulate(CollectionX, Reducer)} if you would like a failure to result in a CompletableFuture\nwith an error",
    "Reference": "Also @see {@link CompletableFutures#accumulate(IterableX, Reducer)} if you would like a failure to result in a CompletableFuture\nwith an error",
    "HebCup": "Also @see {@link CompletableFutures#accumulate(IterableX, Reducer)} if you would like a failure to result in a CompletableFuture with an error"
}
{
    "Origin": "Start building a new factory class-based service binding.",
    "Reference": "Start building a new supplier class-based service binding.",
    "HebCup": "Start building a new Supplier Class-based service binding."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Set the {@link MongoClientOptions} to be used when creating {@link MongoClient}.",
    "Reference": "Set the {@link MongoClientSettings} to be used when creating {@link MongoClient}.",
    "HebCup": "Set the {@link MongoClientSettings} to be used when creating {@link MongoClient}."
}
{
    "Origin": "Gets the value of the 'ValueType' field",
    "Reference": "Gets the value of the 'valueType' field.",
    "HebCup": "Gets the value of the 'valueType' field"
}
{
    "Origin": "MaryData object which contains the reference to the updated utterance.",
    "Reference": "Utterance object which contains the reference to the updated utterance.",
    "HebCup": "Utterance object which contains the reference to the updated utterance."
}
{
    "Origin": "Users should remove\ngraphs via the {@link RemoveGraph} operation.",
    "Reference": "Users should remove\ngraphs via the {@link RemoveStore} operation.",
    "HebCup": "Users should remove graphs via the {@link Removestore} operation."
}
{
    "Origin": "Add a EventLogItem, but don't log.",
    "Reference": "Add a EventLogEntry, but don't log.",
    "HebCup": "Add a EventLogEntry, but don't log."
}
{
    "Origin": "Implementations of SkylarkValue may define their own behavior of {@code str}.",
    "Reference": "Implementations of StarlarkValue may define their own behavior of {@code str}.",
    "HebCup": "Implementations of StarlarkValue may define their own behavior of {@code str}."
}
{
    "Origin": "Sets the tracking state for this costas loop.",
    "Reference": "Sets the PLLGain state for this costas loop.",
    "HebCup": "Sets the PLLGain state for this costas loop."
}
{
    "Origin": "Test if the vector AD is right of AB.",
    "Reference": "Test if the double[] AD is right of AB.",
    "HebCup": "Test if the double AD is right of AB."
}
{
    "Origin": "Create a {@link MongoDbOutboundGatewaySpec} builder instance\nbased on the provided {@link MongoDbFactory} and {@link MongoConverter}.",
    "Reference": "Create a {@link MongoDbOutboundGatewaySpec} builder instance\nbased on the provided {@link MongoDatabaseFactory} and {@link MongoConverter}.",
    "HebCup": "Create a {@link MongoDbOutboundGatewaySpec} builder instance based on the provided {@link MongoDatabaseFactory} and {@link MongoConverter}."
}
{
    "Origin": "Getter for {@link #exposeOnlyRequestedHeader}",
    "Reference": "Getter for {@link #allowOnlyRequestedHeader}",
    "HebCup": "Getter for {@link#allowOnlyRequestedHeader}"
}
{
    "Origin": "Checks whether the extension of the filename is one of those specified.",
    "Reference": "Checks whether the extension of the fileName is one of those specified.",
    "HebCup": "Checks whether the extension of the fileName is one of those specified."
}
{
    "Origin": "Get Allowed En Cashment?.",
    "Reference": "Get Allowed Encashment.",
    "HebCup": "Get Allowed Encashment?."
}
{
    "Origin": "Returns an ordered range of all the sync d l objects where companyId = ?",
    "Reference": "Returns an ordered range of all the sync d l objects where repositoryId = ?",
    "HebCup": "Returns an ordered range of all the sync d l objects where repositoryId = ?"
}
{
    "Origin": "Creates a new {@code AtomicTreeMapBuilder}.",
    "Reference": "Creates a new {@code AtomicNavigableMapBuilder}.",
    "HebCup": "Creates a new {@code AtomicNavigableMapBuilder}."
}
{
    "Origin": "Currently supported views are\nlisted in WebConstants.*_VIEW.",
    "Reference": "Currently supported views are\nlisted in ComplexObsHandler.*_VIEW.",
    "HebCup": "Currently supported views are listed in ComplexObsHandler.*_VIEW."
}
{
    "Origin": "Creates an audit entry when a service definition is updated.",
    "Reference": "Creates an audit entry when a API definition is updated.",
    "HebCup": "Creates an audit entry when a api Definition is updated."
}
{
    "Origin": "Find {@link NativeLinkable} nodes transitively reachable from the given roots.",
    "Reference": "Find {@link NativeLinkableGroup} nodes transitively reachable from the given roots.",
    "HebCup": "Find {@link NativeLinkableGroup} nodes transitively reachable from the given roots."
}
{
    "Origin": "Tests the {@link SecurityUtils#getOwnerFromThriftClient()} ()} method.",
    "Reference": "Tests the {@link SecurityUtils#getOwnerFromGrpcClient()} ()} method.",
    "HebCup": "Tests the {@link SecurityUtils#getOwnerFromGrpcClient ()} ()} method."
}
{
    "Origin": "Converts a BucketAutoOptions to a DBObject for use by the Java driver.",
    "Reference": "Converts a BucketAutoOptions to a Document for use by the Java driver.",
    "HebCup": "Converts a BucketAutoOptions to a Document for use by the Java driver."
}
{
    "Origin": "Returns the set of compilation unit type names for all contained super source compilation\nunits.",
    "Reference": "Returns the set of compilation unit type source names for all contained super source\ncompilation units.",
    "HebCup": "Returns the set of Compilation Unit Type Source Names for all contained super source compilation units."
}
{
    "Origin": "For each the\noffsets for each array in superType, there must be an offset in this qualifier for the\narray that is greater than or equal to the super offset.",
    "Reference": "For each the\noffsets for each sequence in superType, there must be an offset in this qualifier for the\nsequence that is greater than or equal to the super offset.",
    "HebCup": "For each the offsets for each sequence in superType, there must be an offset in this qualifier for the sequence that is greater than or equal to the super offset."
}
{
    "Origin": "In order to set the matrix to a rotation transformation without pre-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without pre-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Each adapter will try to send blocks until have got special {@link Packet} with type {@link PacketTypes#ACK},\nthat means receiver have got block.",
    "Reference": "Each adapter will try to send blocks until have got special {@link Block} with type {@link PacketTypes#ACK},\nthat means receiver have got block.",
    "HebCup": "Each adapter will try to send blocks until have got special {@link block} with type {@link PacketTypes#ACK}, that means receiver have got block."
}
{
    "Origin": "Converts from {@link CpuProfilerConfig} to {@link CpuProfiler.CpuProfilerConfiguration}",
    "Reference": "Converts from {@link CpuProfilerConfig} to {@link Cpu.CpuTraceConfiguration.UserOptions}",
    "HebCup": "Converts from {@link CpuProfilerConfig} to {@link Cpu.CpuTraceConfiguration.UserOptions}"
}
{
    "Origin": "Gets the value of the pubBrowser property.",
    "Reference": "Gets the value of the target property.",
    "HebCup": "Gets the value of the Target property."
}
{
    "Origin": "Stub of {@link Plugin#didDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to\noverride",
    "Reference": "Stub of {@link Plugin#afterDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to\noverride",
    "HebCup": "Stub of {@link Plugin#afterDeclareSetter (TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to override"
}
{
    "Origin": "Record an {@link ExecutionEvent} for a container or test that completed\nwith the provided {@link TestExecutionResult}.",
    "Reference": "Record an {@link Event} for a container or test that completed\nwith the provided {@link TestExecutionResult}.",
    "HebCup": "Record an {@link Event} for a container or test that completed with the provided {@link TestExecutionResult}."
}
{
    "Origin": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link NamespacedEntityId}.",
    "Reference": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link MetadataEntity}.",
    "HebCup": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link MetadataEntity}."
}
{
    "Origin": "Returns an {@link Action} object that matches the parameters given.",
    "Reference": "Returns an {@link teammates.ui.controller.Action} object that matches the parameters given.",
    "HebCup": "Returns an {@link teammates.ui.controller.Action} object that matches the parameters given."
}
{
    "Origin": "The metamodel is populated in two phases, first to create a {@link DomainClass} for each ObjectSpecification,\nand then to populate the members of those domain class types.",
    "Reference": "The metamodel is populated in two phases, first to create a {@link DomainClassDto} for each ObjectSpecification,\nand then to populate the members of those domain class types.",
    "HebCup": "The metamodel is populated in two phases, first to create a {@link DomainClassDto} for each ObjectSpecification, and then to populate the members of those domain class types."
}
{
    "Origin": "The MediaTimestamp2 represents how the media time correlates to the system time in\na linear fashion using an anchor and a clock rate.",
    "Reference": "The MediaTimestamp represents how the media time correlates to the system time in\na linear fashion using an anchor and a clock rate.",
    "HebCup": "The MediaTimestamp represents how the media time correlates to the system time in a linear fashion using an anchor and a clock rate."
}
{
    "Origin": "Returns the builder for the settings used for calls to labelAudio.",
    "Reference": "Returns the builder for the settings used for calls to getEvaluation.",
    "HebCup": "Returns the builder for the settings used for calls to GetEvaluation."
}
{
    "Origin": "Passes the specified event to all registered configuration listeners.",
    "Reference": "Passes the specified event to all registered configuration LISTENERS.",
    "HebCup": "Passes the specified event to all registered configuration LISTENERS."
}
{
    "Origin": "This is activated by setting an explicit value for {@link #INTERFACE} in\nthe Titan configuration.",
    "Reference": "This is activated by setting an explicit value for {@link #INTERFACE} in\nthe JanusGraph configuration.",
    "HebCup": "This is activated by setting an explicit value for {@link#INTERFACE} in the JanusGraph configuration."
}
{
    "Origin": "Creates a new instance of {@link InconsistentProperty} from thrift representation.",
    "Reference": "Creates a new instance of {@link InconsistentProperty} from proto representation.",
    "HebCup": "Creates a new instance of {@link InconsistentProperty} from Proto representation."
}
{
    "Origin": "The code of this method is a copy of {@link #handleAttributes(Element,",
    "Reference": "The code of this method is a copy of {@link #outputAttributes(Element,",
    "HebCup": "The code of this method is a copy of {@link#outputAttributes (Element,"
}
{
    "Origin": "Returns a stream of modules upon which the given module `requires public`",
    "Reference": "Returns a stream of modules upon which the given module `requires transitive`",
    "HebCup": "Returns a stream of modules upon which the given module `requires Transitive`"
}
{
    "Origin": "Gets the maximum number of deferred processed application data messages.",
    "Reference": "Gets the maximum number of deferred processed outgoing application data messages.",
    "HebCup": "Gets the maximum number of Deferred Processed Outgoing Application Data Messages."
}
{
    "Origin": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniond}.",
    "Reference": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniondc}.",
    "HebCup": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniondc}."
}
{
    "Origin": "Create a {@link ServiceLocator}.",
    "Reference": "Create a {@link InstanceManager}.",
    "HebCup": "Create a {@link InstanceManager}."
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix, which is assumed to only contain a translation, and store\nthe result in .",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix, which is assumed to only contain a translation, and store\nthe result in .",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix, which is assumed to only contain a translation, and store the result in ."
}
{
    "Origin": "Sets the {@link Service} and returns the {@link VirtualHostBuilder} that this\n{@link VirtualHostServiceBindingBuilder} was created from.",
    "Reference": "Sets the {@link HttpService} and returns the {@link VirtualHostBuilder} that this\n{@link VirtualHostServiceBindingBuilder} was created from.",
    "HebCup": "Sets the {@link HttpService} and returns the {@link VirtualHostBuilder} that this {@link VirtualHostServiceBindingBuilder} was created from."
}
{
    "Origin": "Adds the specified object to the list of registered configuration listeners.",
    "Reference": "Adds the specified object to the list of registered configuration LISTENERS.",
    "HebCup": "Adds the specified object to the list of registered configuration LISTENERS."
}
{
    "Origin": "Adjust voice ID per staff, in line with their order.",
    "Reference": "Adjust voice ID per family, in line with their order.",
    "HebCup": "Adjust voice ID per family, in line with their order."
}
{
    "Origin": "Test that {@link RawContactDelta#buildDiffWrapper(ArrayList)} is correctly built for\ninsert, update, and delete cases.",
    "Reference": "Test that {@link RawContactDelta#buildDiff(ArrayList)} is correctly built for\ninsert, update, and delete cases.",
    "HebCup": "Test that {@link RawContactDelta#buildDiff (ArrayList)} is correctly built for insert, update, and delete cases."
}
{
    "Origin": "Returns an immutable map containing six mappings.",
    "Reference": "Returns an unmodifiable map containing six mappings.",
    "HebCup": "Returns an Unmodifiable map containing six mappings."
}
{
    "Origin": "Test of var method, of class WeibullDistribution.",
    "Reference": "Test of variance method, of class WeibullDistribution.",
    "HebCup": "Test of Variance method, of class WeibullDistribution."
}
{
    "Origin": "Get the {@link MongoDbFactory} that this instance manages transactions for.",
    "Reference": "Get the {@link MongoDatabaseFactory} that this instance manages transactions for.",
    "HebCup": "Get the {@link MongoDatabaseFactory} that this instance manages transactions for."
}
{
    "Origin": "Resolve the {@link Repo} referenced by the given intent",
    "Reference": "Resolve the {@link Repository} referenced by the given intent",
    "HebCup": "Resolve the {@link Repository} referenced by the given intent"
}
{
    "Origin": "The {@code onErrorResumeNext} method changes this\nbehavior.",
    "Reference": "The {@code onErrorResumeWith} method changes this\nbehavior.",
    "HebCup": "The {@code onErrorResumeWith} method changes this behavior."
}
{
    "Origin": "Deletes all documents from the Solr server.",
    "Reference": "Deletes all documents from the Solr client.",
    "HebCup": "Deletes all documents from the Solr Client."
}
{
    "Origin": "Gets the {@link PatternListValue} of all patterns for the\n{@link Banner}.",
    "Reference": "Gets the {@link ListValue.Mutable} of all patterns for the\n{@link Banner}.",
    "HebCup": "Gets the {@link ListValue.Mutable} of all patterns for the {@link Banner}."
}
{
    "Origin": "Undoes the previous command associated with the given object.",
    "Reference": "Undoes the previous command associated with the given display.",
    "HebCup": "Undoes the previous command associated with the given Display."
}
{
    "Origin": "Get the {@link DiscordClient} that emitted this {@link Event}.",
    "Reference": "Get the {@link GatewayDiscordClient} that emitted this {@link Event}.",
    "HebCup": "Get the {@link GatewayDiscordClient} that emitted this {@link Event}."
}
{
    "Origin": "Default {@link ValidationStatusHandler} functional method implementation.",
    "Reference": "Default {@link BindingValidationStatusHandler} functional method implementation.",
    "HebCup": "Default {@link BindingValidationStatusHandler} functional method implementation."
}
{
    "Origin": "Return the attributes map",
    "Reference": "Return the properties map",
    "HebCup": "Return the Properties map"
}
{
    "Origin": "Scenario successful connection to the back end service via basic auth.",
    "Reference": "Scenario successful connection to the back end API via basic auth.",
    "HebCup": "Scenario successful connection to the back end api via basic auth."
}
{
    "Origin": "Returns the first asset entry set in the ordered set where createTime = ?",
    "Reference": "Returns the last asset entry set in the ordered set where createTime > ?",
    "HebCup": "Returns the Last asset entry set in the ordered set where createTime = ?"
}
{
    "Origin": "Getter for beta",
    "Reference": "Getter for betaMarker",
    "HebCup": "Getter for BetaMarker"
}
{
    "Origin": "Returns the last saved gallery for the given gallery type id.",
    "Reference": "Returns the last saved gallery for the given gallery key.",
    "HebCup": "Returns the last saved gallery for the given gallery Key."
}
{
    "Origin": "Returns an immutable set containing five elements.",
    "Reference": "Returns an unmodifiable set containing five elements.",
    "HebCup": "Returns an Unmodifiable set containing five elements."
}
{
    "Origin": "Has the replay merge failed and entered into an errored state?",
    "Reference": "Has the replay merge failed and entered into an error state?",
    "HebCup": "Has the replay merge failed and entered into an Error state?"
}
{
    "Origin": "Register a record reader.",
    "Reference": "Register a batch listener.",
    "HebCup": "Register a batch Listener."
}
{
    "Origin": "Retrieves a basic template given the template name.",
    "Reference": "Retrieves a template or element given the template name.",
    "HebCup": "Retrieves a Template Or Element given the template name."
}
{
    "Origin": "System will constantly measure actual average latency and compare it with \"desirableOperationLatency\".",
    "Reference": "System will constantly measure actual average latency and compare it with \"slowCallDurationThreshold\".",
    "HebCup": "System will constantly measure actual average latency and compare it with ``slowCallDurationThreshold``."
}
{
    "Origin": "Sets the ratings stats total score of this asset entry set.",
    "Reference": "Sets the asset entry set likes count of this asset entry set.",
    "HebCup": "Sets the asset Entry Set Likes Count of this asset entry set."
}
{
    "Origin": "Is has sharding query assisted encryptor or not.",
    "Reference": "Is has query assisted column or not.",
    "HebCup": "is Has Query Assisted Column or not."
}
{
    "Origin": "Default implementation returns {@link ControllerResult#RESULT_CODE_NOT_SUPPORTED}.",
    "Reference": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.",
    "HebCup": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}."
}
{
    "Origin": "The {@link Secret} is required.",
    "Reference": "The {@link KeyVaultSecret} is required.",
    "HebCup": "The {@link KeyVaultSecret} is required."
}
{
    "Origin": "Makes sure, that for each language a \"rulesets.properties\" file exists.",
    "Reference": "Makes sure, that for each language a \"categories.properties\" file exists.",
    "HebCup": "Makes sure, that for each language a ``categories.properties`` file exists."
}
{
    "Origin": "Get the names of any classes referenced in the methods in this list.",
    "Reference": "Find the names of any classes referenced in the methods in this list.",
    "HebCup": "find the names of any classes referenced in the methods in this list."
}
{
    "Origin": "Sets the recreateMountedPagesAfterExpiry setting",
    "Reference": "Sets the recreateBookmarkablePagesAfterExpiry setting",
    "HebCup": "Sets the recreateBookmarkablePagesAfterExpiry setting"
}
{
    "Origin": "Returns a {@link ChannelOption} for the given {@link SocketOption}.",
    "Reference": "Returns a {@link ChannelOption} for the given {@link java.net.SocketOption}.",
    "HebCup": "Returns a {@link ChannelOption} for the given {@link java.net.SocketOption}."
}
{
    "Origin": "Sets the habitat for use in creating DeployCommand and UndeployCommand\ninstances.",
    "Reference": "Sets the serviceLocator for use in creating DeployCommand and UndeployCommand instances.",
    "HebCup": "Sets the ServiceLocator for use in creating DeployCommand and UndeployCommand instances."
}
{
    "Origin": "Deletes the specified variable from the configuration.",
    "Reference": "Deletes the specified variable from the CONFIGURATION.",
    "HebCup": "Deletes the specified variable from the CONFIGURATION."
}
{
    "Origin": "Obtain the default {@link MongoDatabase database} form the given {@link MongoDbFactory factory}.",
    "Reference": "Obtain the default {@link MongoDatabase database} form the given {@link MongoDatabaseFactory factory}.",
    "HebCup": "Obtain the default {@link MongoDatabase database} form the given {@link MongoDatabaseFactory factory}."
}
{
    "Origin": "Runs the logic to read from the socket until {@link #_isRunning} is false.",
    "Reference": "Runs the logic to read from the socket until {@link #isRunning} is false.",
    "HebCup": "Runs the logic to read from the socket until {@link#isRunning} is false."
}
{
    "Origin": "Transitive reduction of requires public edge and requires edge have\nto be applied separately to prevent the requires public edges\n(e.g.",
    "Reference": "Transitive reduction of requires transitive edge and requires edge have\nto be applied separately to prevent the requires transitive edges\n(e.g.",
    "HebCup": "Transitive reduction of requires TRANSITIVE edge and requires edge have to be applied separately to prevent the requires TRANSITIVE edges (e.g."
}
{
    "Origin": "Gets the servers resolved by name resolution.",
    "Reference": "Gets the addresses resolved by name resolution.",
    "HebCup": "Gets the Addresses resolved by name resolution."
}
{
    "Origin": "Test of var method, of class LogNormalDistribution.",
    "Reference": "Test of variance method, of class LogNormalDistribution.",
    "HebCup": "Test of Variance method, of class LogNormalDistribution."
}
{
    "Origin": "Generates a code sample for using {@link FileClient#setPropertiesWithResponse(long, FileHTTPHeaders,",
    "Reference": "Generates a code sample for using {@link FileClient#setPropertiesWithResponse(long, FileHttpHeaders,",
    "HebCup": "Generates a code sample for using {@link FileClient#setPropertiesWithResponse (long, FileHttpHeaders,"
}
{
    "Origin": "This new\ntransition is created using\n{@link TransitionBuilder#createMerged(TransitionBuilder, MatcherBuilder)}.",
    "Reference": "This new\ntransition is created using\n{@link TransitionBuilder#createMerged(TransitionBuilder, CharSet)}.",
    "HebCup": "This new transition is created using {@link TransitionBuilder#createMerged (TransitionBuilder, CharSet)}."
}
{
    "Origin": "Whether or not {@code lhs} is mutated depends on its type.",
    "Reference": "Whether or not {@code x} is mutated depends on its type.",
    "HebCup": "Whether or not {@code x} is mutated depends on its type."
}
{
    "Origin": "Scan a term buffer for a block of message fragments from an offset up to a limit.",
    "Reference": "Scan a term buffer for a block of message fragments from an offset up to a limitOffset.",
    "HebCup": "Scan a term buffer for a block of message fragments from an offset up to a limit."
}
{
    "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "HebCup": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners."
}
{
    "Origin": "Scheduler:\n {@code combineLatest} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Returns the partition ID.",
    "Reference": "Returns the partition.",
    "HebCup": "Returns the Partition."
}
{
    "Origin": "Item level validators are ignored if there is no bound item or if any\nfield level validator fails.",
    "Reference": "Bean\nlevel validators are ignored if there is no bound bean or if any field\nlevel validator fails.",
    "HebCup": "Bean level validators are ignored if there is no bound Bean or if any field level validator fails."
}
{
    "Origin": "Return a read-only {@link DatasetGraphFilteredView} that fulfils the {@link SecurityPolicy}.",
    "Reference": "Return a read-only {@link DatasetGraphFilteredView} that fulfils the {@link SecurityContext}.",
    "HebCup": "Return a read-only {@link DatasetGraphFilteredView} that fulfils the {@link SecurityContext}."
}
{
    "Origin": "Returns The The Type of this Challenge.",
    "Reference": "Returns The The Factor Type of this Challenge.",
    "HebCup": "Returns The The factorType of this Challenge."
}
{
    "Origin": "Test of npara method, of class Poisson.",
    "Reference": "Test of length method, of class Poisson.",
    "HebCup": "Test of Length method, of class Poisson."
}
{
    "Origin": "Returns an immutable set containing eight elements.",
    "Reference": "Returns an unmodifiable set containing eight elements.",
    "HebCup": "Returns an Unmodifiable set containing eight elements."
}
{
    "Origin": "Ensures that the service referenced by the Contract at the head of\nthe iterator actually exists (is published).",
    "Reference": "Ensures that the api referenced by the Contract at the head of\nthe iterator actually exists (is published).",
    "HebCup": "Ensures that the Api referenced by the Contract at the head of the iterator actually exists (is published)."
}
{
    "Origin": "Generic getter for the virtualMetadataPopularConfiguration property of this class",
    "Reference": "Generic getter for the virtualMetadataConfiguration property of this class",
    "HebCup": "Generic getter for the VirtualMetadataConfiguration property of this class"
}
{
    "Origin": "Parse service endpoint properties to retrieve enum value (if any)",
    "Reference": "Parse API endpoint properties to retrieve enum value (if any)",
    "HebCup": "Parse Api endpoint properties to retrieve enum value (if any)"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Get the {@link Set} of {@link EventCode}s that are enabled for the logger.",
    "Reference": "Get the {@link Set} of {@link DriverEventCode}s that are enabled for the logger.",
    "HebCup": "Get the {@link Set} of {@link DriverEventCode}s that are enabled for the logger."
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "Setter for {@link #allowCredentials}",
    "Reference": "Setter for {@link #allowedCredentials}",
    "HebCup": "Setter for {@link#allowedCredentials}"
}
{
    "Origin": "Getter for {@link #allowCredentials}",
    "Reference": "Getter for {@link #allowedCredentials}",
    "HebCup": "Getter for {@link#allowedCredentials}"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "The default behavior of this method is to return\n{@link HttpServletRequest#getServletMapping()} on the wrapped request object.",
    "Reference": "The default behavior of this method is to return\n{@link HttpServletRequest#getHttpServletMapping()} on the wrapped request\nobject.",
    "HebCup": "The default behavior of this method is to return {@link HttpServletRequest#getHttpServletMapping ()} on the wrapped request object."
}
{
    "Origin": "Parse a service request path from servlet path info.",
    "Reference": "Parse a API request path from servlet path info.",
    "HebCup": "Parse a Api Request Path from servlet path info."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Optionally provide a custom {@link LogStreamProvider} that provides streams for writing\ncontainer stdout/stderr logs.",
    "Reference": "Optionally provide a custom {@link LogStreamFollower} that provides streams for writing\ncontainer stdout/stderr logs.",
    "HebCup": "Optionally provide a custom {@link LogStreamFollower} that provides streams for writing container stdout/stderr logs."
}
{
    "Origin": "Build the range store with provided {@link RangeStoreFactory}.",
    "Reference": "Build the range store with provided {@link MVCCStoreFactory}.",
    "HebCup": "Build the range store with provided {@link MVCCStoreFactory}."
}
{
    "Origin": "Once the prefetch is done, the player will change\nits playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "Reference": "Once the prepare is done, the player will change\nits playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.",
    "HebCup": "Once the prepare is done, the player will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."
}
{
    "Origin": "Reset starting address.",
    "Reference": "Reset head segment.",
    "HebCup": "reset Head Segment."
}
{
    "Origin": "This method is a shortcut to {@code context().uuid()}.",
    "Reference": "This method is a shortcut to {@code context().id()}.",
    "HebCup": "This method is a shortcut to {@code context ().id ()}."
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildClient ()}."
}
{
    "Origin": "Test of npara method, of class TDistribution.",
    "Reference": "Test of length method, of class TDistribution.",
    "HebCup": "Test of Length method, of class TDistribution."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Test a read after write on SMRMap.",
    "Reference": "Test a read after write on CorfuTable.",
    "HebCup": "Test a read after write on CorfuTable."
}
{
    "Origin": "The {@link EcKeyCreateOptions} parameter is required.",
    "Reference": "The {@link CreateEcKeyOptions} parameter is required.",
    "HebCup": "The {@link CreateEcKeyOptions} parameter is required."
}
{
    "Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.",
    "Reference": "If the given language code is {@code null}, uses\n{@link DisplaySettings#getShowsLanguageFallback(Context)}.",
    "HebCup": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguageFallback (Context)}."
}
{
    "Origin": "Creates a {@link PropertyMatcher} to match against slot indexes.",
    "Reference": "Creates a {@link KeyValueMatcher} to match against slot indexes.",
    "HebCup": "Creates a {@link KeyValueMatcher} to match against slot indexes."
}
{
    "Origin": "The\n{@link RsaKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.",
    "Reference": "The\n{@link CreateRsaKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.",
    "HebCup": "The {@link CreateRsaKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Creates an audit entry for the 'service created' event.",
    "Reference": "Creates an audit entry for the 'API created' event.",
    "HebCup": "Creates an audit entry for the 'api Created' event."
}
{
    "Origin": "Sets the value of the shortDescription property.",
    "Reference": "Sets the value of the description property.",
    "HebCup": "Sets the value of the Description property."
}
{
    "Origin": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,",
    "Reference": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHttpHeaders, Map, BlobAccessConditions,",
    "HebCup": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHttpHeaders, Map, BlobAccessConditions,"
}
{
    "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings#settingSelector}",
    "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listConfigurationSettings#settingSelector}",
    "HebCup": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listConfigurationSettings#settingSelector}"
}
{
    "Origin": "Attempts to find the best suited {@link OnExceptionDefinition} to be used for handling the given thrown exception.",
    "Reference": "Attempts to find the best suited {@link ExceptionPolicy} to be used for handling the given thrown exception.",
    "HebCup": "Attempts to find the best suited {@link ExceptionPolicy} to be used for handling the given thrown exception."
}
{
    "Origin": "Determine the {@link SecurityPolicy} for this request",
    "Reference": "Determine the {@link SecurityContext} for this request",
    "HebCup": "Determine the {@link SecurityContext} for this request"
}
{
    "Origin": "The default behavior of this method is to return\n{@link HttpServletRequest#getPushBuilder()} on the wrapped request object.",
    "Reference": "The default behavior of this method is to return\n{@link HttpServletRequest#newPushBuilder()} on the wrapped request object.",
    "HebCup": "The default behavior of this method is to return {@link HttpServletRequest#newPushBuilder ()} on the wrapped request object."
}
{
    "Origin": "Test of npara method, of class Beta.",
    "Reference": "Test of length method, of class Beta.",
    "HebCup": "Test of Length method, of class Beta."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Gets the value of the spinCount property.",
    "Reference": "Gets the value of the saltValue property.",
    "HebCup": "Gets the value of the saltValue property."
}
{
    "Origin": "Set the maxPassagesPerDocument.",
    "Reference": "Set the maxPerDocument.",
    "HebCup": "Set the maxPerDocument."
}
{
    "Origin": "Test affinity awareness Sql cache size property.",
    "Reference": "Test Partition Awareness Sql cache size property.",
    "HebCup": "test Partition Awareness Sql Cache Size Property."
}
{
    "Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSetting#string-string-string}",
    "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSetting#string-string-string}",
    "HebCup": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSetting#string-string-string}"
}
{
    "Origin": "Returns an immutable map containing three mappings.",
    "Reference": "Returns an unmodifiable map containing three mappings.",
    "HebCup": "Returns an Unmodifiable map containing three mappings."
}
{
    "Origin": "Generates random trits for a transaction.",
    "Reference": "Generates trits for a transaction.",
    "HebCup": "Generates Trits for a transaction."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Scenario successful connection to the back end service via basic auth.",
    "Reference": "Scenario successful connection to the back end API via basic auth.",
    "HebCup": "Scenario successful connection to the back end api via basic auth."
}
{
    "Origin": "Sets the servers.",
    "Reference": "Sets the addresses.",
    "HebCup": "Sets the Addresses."
}
{
    "Origin": "Generates a valid document ID for a service, used to index the service in ES.",
    "Reference": "Generates a valid document ID for a api, used to index the api in ES.",
    "HebCup": "Generates a valid document ID for a Api, used to index the Api in ES."
}
{
    "Origin": "Handles URL: /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}",
    "Reference": "Handles URL: /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}",
    "HebCup": "Handles URL: /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}"
}
{
    "Origin": "If you have an EdgeIteratorState the other createTraversalId is preferred!",
    "Reference": "If you have an EdgeIteratorState the other createTraversalKey is preferred!",
    "HebCup": "If you have an EdgeIteratorState the other createTraversalKey is preferred!"
}
{
    "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Parses an array containing a coordinate into a LatLng object",
    "Reference": "Parses an array containing a coordinate into a LatLngAlt object",
    "HebCup": "Parses an array containing a coordinate into a LatLngAlt object"
}
{
    "Origin": "Setter for {@link #allowOnlyRequestedHeader}",
    "Reference": "Setter for {@link #allowAllRequestedHeaders}",
    "HebCup": "Setter for {@link#allowAllRequestedHeaders}"
}
{
    "Origin": "Returns true if field ttlNotUsed is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field ttl is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field Ttl is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "Returns the configured bootstrap locations.",
    "Reference": "Returns the configured bootstrap nodes.",
    "HebCup": "Returns the configured bootstrap Nodes."
}
{
    "Origin": "Requires\n{@link ClassGraph#enableFieldConstantInitializerValues()} to have been called.",
    "Reference": "Requires\n{@link ClassGraph#enableStaticFinalFieldConstantInitializerValues()} to have been called.",
    "HebCup": "Requires {@link ClassGraph#enableStaticFinalFieldConstantInitializerValues()} to have been called."
}
{
    "Origin": "RandomAccessThing, then read randomly and compare.",
    "Reference": "RandomAccessBuffer, then read randomly and compare.",
    "HebCup": "RandomAccessBuffer, then read randomly and compare."
}
{
    "Origin": "Returns an immutable set containing two elements.",
    "Reference": "Returns an unmodifiable set containing two elements.",
    "HebCup": "Returns an Unmodifiable set containing two elements."
}
{
    "Origin": "Returns {@link ServiceLocator} relevant to current application.",
    "Reference": "Returns {@link InstanceManager} relevant to current application.",
    "HebCup": "Returns {@link InstanceManager} relevant to current application."
}
{
    "Origin": "Add the triple to the where clause",
    "Reference": "Add the triple path to the where clause",
    "HebCup": "Add the TriplePath to the where clause"
}
{
    "Origin": "Invokes parent.resolveRequires to resolve the given root modules.",
    "Reference": "Invokes parent.resolve to resolve the given root modules.",
    "HebCup": "Invokes parent.resolve to resolve the given root modules."
}
{
    "Origin": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniond}.",
    "Reference": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniondc}.",
    "HebCup": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniondc}."
}
{
    "Origin": "Returns the {@link ISeedingStrategyFactory} used by this factory.",
    "Reference": "Returns the {@link SeedingStrategyFactory} used by this factory.",
    "HebCup": "Returns the {@link SeedingStrategyFactory} used by this factory."
}
{
    "Origin": "Verifies whether signature is made by signer with publicKey",
    "Reference": "Verifies whether signature is made by signer with pubKey",
    "HebCup": "Verifies whether signature is made by signer with pubKey"
}
{
    "Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Returns a {@link PointerBuffer} view of the {@code data.l} field.",
    "Reference": "Returns a {@link CLongBuffer} view of the {@code data.l} field.",
    "HebCup": "Returns a {@link CLongBuffer} view of the {@code data.l} field."
}
{
    "Origin": "Convert this MapX to a ListX via the provided transformation function",
    "Reference": "Convert this MapX to a Seq via the provided transformation function",
    "HebCup": "Convert this MapX to a Seq via the provided transformation function"
}
{
    "Origin": "Get the Date that this Token expires",
    "Reference": "Get the ZonedDateTime that this Token expires",
    "HebCup": "Get the ZonedDateTime that this Token expires"
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Scheduler.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Executor.",
    "HebCup": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor."
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix.",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix.",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix."
}
{
    "Origin": "If the prefetch is not needed, {@link #playFromUri} can be directly called\nwithout this method.",
    "Reference": "If the prepare is not needed, {@link #playFromUri} can be directly called\nwithout this method.",
    "HebCup": "If the prepare is not needed, {@link#playFromUri} can be directly called without this method."
}
{
    "Origin": "Creates a CaptureRequestConfig.Builder contains shared options.",
    "Reference": "Creates a CaptureConfig.Builder contains shared options.",
    "HebCup": "Creates a CaptureConfig.Builder contains shared options."
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildClient ()}."
}
{
    "Origin": "Set the value for some metadata on a collection alias.",
    "Reference": "Set the value for some properties on a collection alias.",
    "HebCup": "Set the value for some Properties on a collection alias."
}
{
    "Origin": "User / Group may restore files / folders from Recycle Bin - room permissions required.",
    "Reference": "User / Group may restore files / folders from recycle bin - room permissions required.",
    "HebCup": "User / Group may restore files / folders from recycle Bin - room permissions required."
}
{
    "Origin": "Getter for {@link #allowHeaders}",
    "Reference": "Getter for {@link #allowedHeaders}",
    "HebCup": "Getter for {@link#allowedHeaders}"
}
{
    "Origin": "Binds the specified {@link Service} at the specified path pattern.",
    "Reference": "Binds the specified {@link HttpService} at the specified path pattern.",
    "HebCup": "Binds the specified {@link HttpService} at the specified path pattern."
}
{
    "Origin": "Aggregate given void publishers into a new {@literal Mono} that will be\nfulfilled when all of the given {@literal Publishers} have been fulfilled.",
    "Reference": "Aggregate given publishers into a new {@literal Mono} that will be\nfulfilled when all of the given {@literal Publishers} have been fulfilled.",
    "HebCup": "Aggregate given ? publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal Publishers} have been fulfilled."
}
{
    "Origin": "So when we got packet and all is ok - call this method.",
    "Reference": "So when we got block and all is ok - call this method.",
    "HebCup": "So when we got block and all is ok - call this method."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Mark the DeterministicKeys as used, if they match the pubkeyHash",
    "Reference": "Mark the DeterministicKeys as used, if they match the pubKeyHash",
    "HebCup": "Mark the DeterministicKeys as used, if they match the pubKeyHash"
}
{
    "Origin": "Sets the group name used as an endpoint group password for authentication\non the target endpoint.",
    "Reference": "Sets the cluster name used as an endpoint group password for authentication\non the target endpoint.",
    "HebCup": "Sets the cluster Name used as an endpoint group password for authentication on the target endpoint."
}
{
    "Origin": "Requests that the player prefetch a media item with the specific search query for playback.",
    "Reference": "Requests that the player prepare a media item with the specific search query for playback.",
    "HebCup": "Requests that the player prepare a media item with the specific search query for playback."
}
{
    "Origin": "Turns this ReactiveSeq into a HotStream, a connectable & pausable Stream, being executed on a thread on the\nsupplied executor, that is producing data.",
    "Reference": "Turns this ReactiveSeq into a Connectable, a connectable & pausable Stream, being executed on a thread on the\nsupplied executor, that is producing data.",
    "HebCup": "Turns this ReactiveSeq into a Connectable, a connectable & pausable Stream, being executed on a thread on the supplied executor, that is producing data."
}
{
    "Origin": "This merges the two objects - {@code this} and the specified time -\nto form an instance of {@code ZonedDateTime}.",
    "Reference": "This merges the two objects - {@code this} and the specified time -\nto form an instance of {@code OffsetDateTime}.",
    "HebCup": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code OffsetDateTime}."
}
{
    "Origin": "If {@link #IGNORE_OVERFLOW} is true and one of the bounds is outside the Byte range, then\nthat bound is set to the bound of the Byte range.",
    "Reference": "If {@link #ignoreOverflow} is true and one of the bounds is outside the Byte range, then\nthat bound is set to the bound of the Byte range.",
    "HebCup": "If {@link#ignoreOverflow} is true and one of the bounds is outside the Byte range, then that bound is set to the bound of the Byte range."
}
{
    "Origin": "Removes all of the service contracts from ES.",
    "Reference": "Removes all of the api contracts from ES.",
    "HebCup": "Removes all of the Api Contracts from ES."
}
{
    "Origin": "Returns all the sync d l objects where companyId = ?",
    "Reference": "Returns all the sync d l objects where repositoryId = ?",
    "HebCup": "Returns all the sync d l objects where repositoryId = ?"
}
{
    "Origin": "Returns a new {@link Key.Builder}.",
    "Reference": "Returns a new {@link UnloadedToolchainContextKey.Builder}.",
    "HebCup": "Returns a new {@link UnloadedToolchainContextKey.Builder}."
}
{
    "Origin": "Creates a {@link Behavior} that uses the given {@link WicketFunction function}\nto do something with a component's attribute.",
    "Reference": "Creates a {@link Behavior} that uses the given {@link WicketFunction function}\nto do something with a component's attributeName.",
    "HebCup": "Creates a {@link Behavior} that uses the given {@link WicketFunction function}\nto do something with a component's attribute."
}
{
    "Origin": "Deletes the specified variable from the configuration.",
    "Reference": "Deletes the specified variable from the CONFIGURATION.",
    "HebCup": "Deletes the specified variable from the CONFIGURATION."
}
{
    "Origin": "Replaces existing tags of the specified {@link NamespacedEntityId} with a new set of tags.",
    "Reference": "Replaces existing tags of the specified {@link MetadataEntity} with a new set of tags.",
    "HebCup": "Replaces existing tags of the specified {@link MetadataEntity} with a new set of tags."
}
{
    "Origin": "Get sharding encryptor.",
    "Reference": "Find sharding encryptor.",
    "HebCup": "find Sharding Encryptor."
}
{
    "Origin": "Returns an unmodifiable Map of metadata for a given alias.",
    "Reference": "Returns an unmodifiable Map of properties for a given alias.",
    "HebCup": "Returns an unmodifiable Map of Properties for a given alias."
}
{
    "Origin": "Sets the storage serializer.",
    "Reference": "Sets the storage namespace.",
    "HebCup": "Sets the storage Namespace."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "HebCup": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners."
}
{
    "Origin": "User / Group may permanently remove files / folders from the Recycle Bin.",
    "Reference": "User / Group may permanently remove files / folders from the recycle bin.",
    "HebCup": "User / Group may permanently remove files / folders from the Recycle bin."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Reset starting address.",
    "Reference": "Reset head segment.",
    "HebCup": "reset Head Segment."
}
{
    "Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be\noptionally specified.",
    "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be\noptionally specified.",
    "HebCup": "The {@link CreateRsaKeyOptions#getKeySize () keySize} can be optionally specified."
}
{
    "Origin": "Set the valueType.",
    "Reference": "Set the type.",
    "HebCup": "Set the type."
}
{
    "Origin": "Returns a stream of modules upon which the given module `requires public`",
    "Reference": "Returns a stream of modules upon which the given module `requires transitive`",
    "HebCup": "Returns a stream of modules upon which the given module `requires Transitive`"
}
{
    "Origin": "The {@link RsaKeyCreateOptions} is required.",
    "Reference": "The {@link CreateRsaKeyOptions} is required.",
    "HebCup": "The {@link CreateRsaKeyOptions} is required."
}
{
    "Origin": "Test of npara method, of class LogNormalDistribution.",
    "Reference": "Test of length method, of class LogNormalDistribution.",
    "HebCup": "Test of Length method, of class LogNormalDistribution."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHTTPHeaders#BlobHTTPHeaders}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHTTPHeaders#BlobHttpHeaders}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHTTPHeaders#BlobHttpHeaders}"
}
{
    "Origin": "Gets a list of suggestions of input to this parser.",
    "Reference": "Gets a stream of suggestions of input to this parser.",
    "HebCup": "Gets a Stream of suggestions of input to this parser."
}
{
    "Origin": "Fire {@link IStorageSegment} changed when an {@link I_M_HU_Attribute} is changed.",
    "Reference": "Fire {@link IShipmentScheduleSegment} changed when an {@link I_M_HU_Attribute} is changed.",
    "HebCup": "Fire {@link IShipmentScheduleSegment} changed when an {@link I_M_HU_Attribute} is changed."
}
{
    "Origin": "get the flow start sla from the dag node config.",
    "Reference": "get the job start sla from the dag node config.",
    "HebCup": "get the Job Start Sla from the dag node config."
}
{
    "Origin": "Make sure to keep {@link #database} fields and map synchronized.",
    "Reference": "Make sure to keep {@link #wikiId} fields and map synchronized.",
    "HebCup": "Make sure to keep {@link#WikiId} fields and map synchronized."
}
{
    "Origin": "Getter for {@link #allowOnlyRequestedMethod}",
    "Reference": "Getter for {@link #allowAllRequestedHeaders}",
    "HebCup": "Getter for {@link#allowAllRequestedHeaders}"
}
{
    "Origin": "Return the current starting address.",
    "Reference": "Return the current head segment.",
    "HebCup": "Return the current head Segment."
}
{
    "Origin": "This builder\nshould only be used in some specific scenarios like {@code flow-ref} where a new Flow executing the same {@link BaseEvent}\nneeds a new context.",
    "Reference": "This builder\nshould only be used in some specific scenarios like {@code flow-ref} where a new Flow executing the same {@link CoreEvent}\nneeds a new context.",
    "HebCup": "This builder should only be used in some specific scenarios like {@code flow-ref} where a new Flow executing the same {@link CoreEvent} needs a new context."
}
{
    "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "HebCup": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners."
}
{
    "Origin": "Sets the value of the cycle property.",
    "Reference": "Sets the value of the cycleOption property.",
    "HebCup": "Sets the value of the CycleOption property."
}
{
    "Origin": "Sets the value of the 'ts' field.",
    "Reference": "Sets the value of the 'dec' field.",
    "HebCup": "Sets the value of the 'Dec' field."
}
{
    "Origin": "Sort the given {@link MutablePointsReader} based on its packed value then doc ID.",
    "Reference": "Sort the given {@link MutablePointValues} based on its packed value then doc ID.",
    "HebCup": "Sort the given {@link MutablePointValues} based on its packed value then doc ID."
}
{
    "Origin": "Maps all index descriptors according to {@link #lockedIndex(IndexDescriptor)}.",
    "Reference": "Maps all index descriptors according to {@link #lockIndex(IndexDescriptor)}.",
    "HebCup": "Maps all index descriptors according to {@link#lockIndex (IndexDescriptor)}."
}
{
    "Origin": "Whitelisted props can be defined only if ignored properties are not defined.",
    "Reference": "Included props can be defined only if ignored properties are not defined.",
    "HebCup": "Included props can be defined only if ignored properties are not defined."
}
{
    "Origin": "For example, the period in decades between two year can be calculated\nusing {@code startYear.periodUntil(endYear, DECADES)}.",
    "Reference": "For example, the period in decades between two year can be calculated\nusing {@code startYear.until(endYear, DECADES)}.",
    "HebCup": "For example, the period in decades between two year can be calculated using {@code startYear.until(endYear, DECADES)}."
}
{
    "Origin": "Encode a String using the {@link #PATHSAFE} set of characters.",
    "Reference": "Encode a String using the {@link #PATH_SPECIAL} set of characters.",
    "HebCup": "Encode a String using the {@link#PATH_SPECIAL} set of characters."
}
{
    "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "HebCup": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners."
}
{
    "Origin": "Constructs a {@link SharedKeyCredential} used to authorize requests sent to the service.",
    "Reference": "Constructs a {@link StorageSharedKeyCredential} used to authorize requests sent to the service.",
    "HebCup": "Constructs a {@link StorageSharedKeyCredential} used to authorize requests sent to the service."
}
{
    "Origin": "Resets the analytics collector for a new media source.",
    "Reference": "Resets the analytics collector for a new playlist.",
    "HebCup": "Resets the analytics collector for a New Playlist."
}
{
    "Origin": "httl.properties: precompiled=true",
    "Reference": "httl.properties: preload=true",
    "HebCup": "httl.properties: Preload=true"
}
{
    "Origin": "Note that the writing process does not start until the returned {@code Mono} is subscribed\nto.",
    "Reference": "Note that the writing process does not start until the returned {@code Flux} is subscribed\nto.",
    "HebCup": "Note that the writing process does not start until the returned {@code Flux} is subscribed to."
}
{
    "Origin": "If {@code labels = \"\\0\"}, settings without any label are returned.",
    "Reference": "If {@code labelFilter = \"\\0\"}, settings without any label are returned.",
    "HebCup": "If {@code LabelFilter = ``\\0``}, settings without any label are returned."
}
{
    "Origin": "Add classpath elements from an object obtained from reflection.",
    "Reference": "Add classpath entries from an object obtained from reflection.",
    "HebCup": "add Classpath Entries from an object obtained from reflection."
}
{
    "Origin": "Gets the path from a full filename, which excludes the prefix.",
    "Reference": "Gets the path from a full fileName, which excludes the prefix.",
    "HebCup": "Gets the path from a full fileName, which excludes the prefix."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Sets the value of the 'publicPort' field",
    "Reference": "Sets the value of the 'publicPorts' field",
    "HebCup": "Sets the value of the 'PublicPorts' field"
}
{
    "Origin": "Tests {@code globalRecommend(long, int, Set, Set)}.",
    "Reference": "Tests {@code recommendRelatedItems()(long, int, Set, Set)}.",
    "HebCup": "Tests {@code recommendRelatedItems(long, int, Set, Set)}."
}
{
    "Origin": "Setting the timeline is\nnot allowed after a call to {@link #setMediaSources(MediaSource...)}.",
    "Reference": "Setting the timeline is\nnot allowed after a call to {@link #setMediaSource(MediaSource)}.",
    "HebCup": "Setting the timeline is not allowed after a call to {@link #setmediaSource(MediaSource...)}."
}
{
    "Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method\nwhen some files are consistent.",
    "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method\nwhen some files are consistent.",
    "HebCup": "Tests the {@link FileSystemMaster#checkConsistency (AlluxioURI, CheckConsistencyContext)} method when some files are consistent."
}
{
    "Origin": "Creates a {@code For}-comprehension of three Iterables.",
    "Reference": "Creates a {@code For}-comprehension of three Options.",
    "HebCup": "Creates a {@code For}-comprehension of three Iterables."
}
{
    "Origin": "Adds tags for the specified {@link NamespacedEntityId}.",
    "Reference": "Adds tags for the specified {@link MetadataEntity}.",
    "HebCup": "Adds tags for the specified {@link MetadataEntity}."
}
{
    "Origin": "Sets the address of this connection's peer.",
    "Reference": "Update the address of this connection's peer.",
    "HebCup": "update the address of this connection's peer."
}
{
    "Origin": "Gets the value if it is a Valid or an value calculated from the error",
    "Reference": "Gets the value if it is a Valid or an value calculated from the errors",
    "HebCup": "Gets the value if it is a Valid or an value calculated from the Errors"
}
{
    "Origin": "Finds the {@link List} of {@link VirtualHost}s that contains the specified {@link Service}.",
    "Reference": "Finds the {@link List} of {@link VirtualHost}s that contains the specified {@link HttpService}.",
    "HebCup": "Finds the {@link List} of {@link VirtualHost}s that contains the specified {@link HttpService}."
}
{
    "Origin": "Creates an entity and populates its state based on the dbObject given.",
    "Reference": "Creates an entity and populates its state based on the document given.",
    "HebCup": "Creates an entity and populates its state based on the Document given."
}
{
    "Origin": "Get the Date that this Token was Created",
    "Reference": "Get the ZonedDateTime that this Token was Created",
    "HebCup": "Get the ZonedDateTime that this Token was Created"
}
{
    "Origin": "Gets the filters for items to fetch.",
    "Reference": "Gets the filter for items to fetch.",
    "HebCup": "Gets the Filter for items to fetch."
}
{
    "Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@code pathPattern}.",
    "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}.",
    "HebCup": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}."
}
{
    "Origin": "Creates a {@code For}-comprehension of 5 Iterables.",
    "Reference": "Creates a {@code For}-comprehension of 5 Options.",
    "HebCup": "Creates a {@code For}-comprehension of 5 Iterables."
}
{
    "Origin": "Helper method to check if we should do GCM topic request.",
    "Reference": "Helper method to check if we should do FCM topic request.",
    "HebCup": "Helper method to check if we should do FCM Topic Request."
}
{
    "Origin": "This test validates that connecting to a serviceURL does not\nwork.",
    "Reference": "This test validates that connecting to a getServiceURL() does not\nwork.",
    "HebCup": "This test validates that connecting to a getServiceURL does not work."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Turns this ReactiveSeq into a HotStream, a connectable Stream, being executed on a thread on the\nsupplied executor, that is producing data.",
    "Reference": "Turns this ReactiveSeq into a Connectable, a connectable Stream, being executed on a thread on the\nsupplied executor, that is producing data.",
    "HebCup": "Turns this ReactiveSeq into a Connectable, a connectable Stream, being executed on a thread on the supplied executor, that is producing data."
}
{
    "Origin": "Is the value with this qualifier less than or equal to the length of array?",
    "Reference": "Is the value with this qualifier less than or equal to the length of sequence?",
    "HebCup": "Is the value with this qualifier less than or equal to the length of sequence?"
}
{
    "Origin": "Get the barline that starts the part.",
    "Reference": "Get the PartBarline that starts the part.",
    "HebCup": "Get the PartBarline that starts the part."
}
{
    "Origin": "(see {@link #isGoogleAccountType)",
    "Reference": "(see {@link #isWritableGoogleTypeFilter )",
    "HebCup": "(see {@link#isWritableGoogleTypeFilter)"
}
{
    "Origin": "Test of npara method, of class Gamma.",
    "Reference": "Test of length method, of class Gamma.",
    "HebCup": "Test of Length method, of class Gamma."
}
{
    "Origin": "Populate a new {@link ExtensionRegistry} from extension types declared via\n{@link ExtendWith @ExtendWith} on the supplied {@link AnnotatedElement}.",
    "Reference": "Populate a new {@link MutableExtensionRegistry} from extension types declared via\n{@link ExtendWith @ExtendWith} on the supplied {@link AnnotatedElement}.",
    "HebCup": "Populate a new {@link MutableExtensionRegistry} from extension types declared via {@link ExtendWith @ExtendWith} on the supplied {@link AnnotatedElement}."
}
{
    "Origin": "Finds the {@link Dimension} by name.",
    "Reference": "Finds the {@link DimensionColumn} by name.",
    "HebCup": "Finds the {@link DimensionColumn} by name."
}
{
    "Origin": "If the {@code ASTNode} has a valid location, this one is used.",
    "Reference": "If the {@code Node} has a valid location, this one is used.",
    "HebCup": "If the {@code Node} has a valid location, this one is used."
}
{
    "Origin": "The meta-property for the {@code paymentAmount} property.",
    "Reference": "The meta-property for the {@code payment} property.",
    "HebCup": "The meta-property for the {@code payment} property."
}
{
    "Origin": "This is the example used in {@link IndexSetting}.",
    "Reference": "This is the example used in {@link IndexSettingImpl}.",
    "HebCup": "This is the example used in {@link IndexSettingImpl}."
}
{
    "Origin": "Create SSLContext using system defaults.",
    "Reference": "Create SSLConnectionSocketFactory using system defaults.",
    "HebCup": "Create SSLConnectionSocketFactory using system defaults."
}
{
    "Origin": "If {@code labels = \"*\"}, settings with any label are returned.",
    "Reference": "If {@code labelFilter = \"*\"}, settings with any label are returned.",
    "HebCup": "If {@code LabelFilter = ``*``}, settings with any label are returned."
}
{
    "Origin": "Sort the given {@link MutablePointValues} based on its packed value then doc ID.",
    "Reference": "Sort the given {@link MutablePointsReader} based on its packed value then doc ID.",
    "HebCup": "Sort the given {@link MutablePointsReader} based on its packed value then doc ID."
}
{
    "Origin": "Assign the current point, where the dragged image is to be displayed",
    "Reference": "Assign the current screen point, where the dragged image is to be displayed",
    "HebCup": "Assign the current ScreenPoint, where the dragged image is to be displayed"
}
{
    "Origin": "Fetch the given user's list of starred albums",
    "Reference": "Fetch the given user's list of loved albums",
    "HebCup": "Fetch the given user's list of Loved Albums"
}
{
    "Origin": "Applies a {@link Publisher< InternalEvent >} function transforming a stream of {@link BaseEvent}'s.",
    "Reference": "Applies a {@link Publisher< InternalEvent >} function transforming a stream of {@link CoreEvent}'s.",
    "HebCup": "Applies a {@link Publisher< InternalEvent >} function transforming a stream of {@link CoreEvent}'s."
}
{
    "Origin": "Gets the name of the quorum associated with specified cache",
    "Reference": "Gets the name of the split brain protection associated with specified cache",
    "HebCup": "Gets the name of the SplitBrainProtection associated with specified cache"
}
{
    "Origin": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addSetting#String-String-String}",
    "Reference": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting#String-String-String}",
    "HebCup": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting#String-String-String}"
}
{
    "Origin": "Test affinity awareness Sql cache size property with semicolon.",
    "Reference": "Test Partition Awareness Sql cache size property with semicolon.",
    "HebCup": "test Partition Awareness Sql Cache Size Property with semicolon."
}
{
    "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.",
    "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.",
    "HebCup": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}."
}
{
    "Origin": "Sets the {@link DrmProvider} to use when handling DRM for media.",
    "Reference": "Sets the {@link MediaDrmCallback} to use when handling DRM for media.",
    "HebCup": "Sets the {@link MediaDrmCallback} to use when handling DRM for media."
}
{
    "Origin": "Tests that adding a @JsNoExport annotation on a method comes out accurately and that removing\nit comes out accurately as well.",
    "Reference": "Tests that adding a @JsIgnore annotation on a method comes out accurately and that removing\nit comes out accurately as well.",
    "HebCup": "Tests that adding a @JsIgnore annotation on a method comes out accurately and that removing it comes out accurately as well."
}
{
    "Origin": "Gets the lastUpdated.",
    "Reference": "Gets the nextCrawl.",
    "HebCup": "Gets the nextCrawl."
}
{
    "Origin": "Binds the specified {@link Service} at the specified {@link Route}.",
    "Reference": "Binds the specified {@link HttpService} at the specified {@link Route}.",
    "HebCup": "Binds the specified {@link HttpService} at the specified {@link Route}."
}
{
    "Origin": "Gets the value of the shortDescription property.",
    "Reference": "Gets the value of the description property.",
    "HebCup": "Gets the value of the description property."
}
{
    "Origin": "This call is equivalent to calling {@code inInterpreter() || inLowTier()}.",
    "Reference": "This call is equivalent to calling {@code inInterpreter() || inLowGrade()}.",
    "HebCup": "This call is equivalent to calling {@code inInterpreter() || inLowGrade()}."
}
{
    "Origin": "Set the nodeType.",
    "Reference": "Set the type.",
    "HebCup": "Set the type."
}
{
    "Origin": "Queries the MinLen Checker to determine if there is a known minimum length for the array\nrepresented by {@code tree}.",
    "Reference": "Queries the Value Checker to determine if there is a known minimum length for the array\nrepresented by {@code tree}.",
    "HebCup": "Queries the Value Checker to determine if there is a known minimum length for the array represented by {@code tree}."
}
{
    "Origin": "This will set the margin between the annotations \"outer\" rectangle defined by\n/Rect and the border.",
    "Reference": "This will set the difference between the annotations \"outer\" rectangle defined by\n/Rect and the border.",
    "HebCup": "This will set the difference between the annotations ``outer`` rectangle defined by /Rect and the border."
}
{
    "Origin": "Test affinity awareness partition distributions cache size property.",
    "Reference": "Test Partition Awareness partition distributions cache size property.",
    "HebCup": "test Partition Awareness Partition Distributions Cache Size Property."
}
{
    "Origin": "Decode an action profile group with members information to a PI action\ngroup.",
    "Reference": "Decode an action profile group with members information to a PI action\nprofile group.",
    "HebCup": "Decode an action profile group with members information to a Pi Action Profile Group."
}
{
    "Origin": "Returns an immutable map containing ten mappings.",
    "Reference": "Returns an unmodifiable map containing ten mappings.",
    "HebCup": "Returns an Unmodifiable map containing ten mappings."
}
{
    "Origin": "Return the result hierarchy.",
    "Reference": "Return the result.",
    "HebCup": "Return the Result."
}
{
    "Origin": "Gets all of the {@link AlertDefinition}s that exist on the path for\n{@link Components#AMBARI_SERVER}.",
    "Reference": "Gets all of the {@link AlertDefinition}s that exist on the path for\n{@link RootComponent#AMBARI_SERVER}.",
    "HebCup": "Gets all of the {@link AlertDefinition}s that exist on the path for {@link RootComponent#AMBARI_SERVER}."
}
{
    "Origin": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given AuthorityName param",
    "Reference": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName\nparam",
    "HebCup": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName param"
}
{
    "Origin": "Add a Warn EventLogItem and log.",
    "Reference": "Add a Warn EventLogEntry and log.",
    "HebCup": "Add a Warn EventLogEntry and log."
}
{
    "Origin": "Loads the available edit groups.",
    "Reference": "Loads the available element views.",
    "HebCup": "Loads the available element Views."
}
{
    "Origin": "Run.",
    "Reference": "Execute.",
    "HebCup": "execute."
}
{
    "Origin": "Adds a qualified \"exports dynamic\" directive to the declaration.",
    "Reference": "Adds a qualified \"opens\" directive to the declaration.",
    "HebCup": "Adds a qualified ``opens`` directive to the declaration."
}
{
    "Origin": "Configure {@link AutoDiscoverable auto-discoverables} in the instance manager.",
    "Reference": "Configure {@link AutoDiscoverable auto-discoverables} in the injection manager.",
    "HebCup": "Configure {@link AutoDiscoverable auto-discoverables} in the Injection Manager."
}
{
    "Origin": "Gets the filed name.",
    "Reference": "Gets the field name.",
    "HebCup": "Gets the field Name."
}
{
    "Origin": "See {@link #setPadding(int, int, int, int)}",
    "Reference": "See {@link #setPadding(float, float, float, float)}",
    "HebCup": "See {@link #setPadding(float, float, float, float)}"
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient ()}."
}
{
    "Origin": "Get the result hierarchy.",
    "Reference": "Get the result.",
    "HebCup": "Get the Result."
}
{
    "Origin": "Adds a control metadata.",
    "Reference": "Adds a packet metadata.",
    "HebCup": "Adds a Packet Metadata."
}
{
    "Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?",
    "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?",
    "HebCup": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?"
}
{
    "Origin": "Returns the distanceFunction.",
    "Reference": "Returns the distance.",
    "HebCup": "Returns the distance."
}
{
    "Origin": "Returns the ratings stats total score of this asset entry set.",
    "Reference": "Returns the asset entry set likes count of this asset entry set.",
    "HebCup": "Returns the Asset Entry Set Likes Count of this asset entry set."
}
{
    "Origin": "Sets the {@link IGetAndSetLocator} for the given application.",
    "Reference": "Sets the {@link IPropertyLocator} for the given application.",
    "HebCup": "Sets the {@link IPropertyLocator} for the given application."
}
{
    "Origin": "Construct the NBT representation of the channel list, for use during login handshaking",
    "Reference": "Construct the Map representation of the channel list, for use during login handshaking",
    "HebCup": "Construct the Map representation of the channel list, for use during login handshaking"
}
{
    "Origin": "The given  is\nconverted to the actual user class if necessary, @see ClassUtils#getUserClass.",
    "Reference": "The given  is\nconverted to the actual user class if necessary, @see ProxyUtils#getUserClass.",
    "HebCup": "The given is converted to the actual user class if necessary, @see ProxyUtils#getUserClass."
}
{
    "Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s\nof the default {@link VirtualHost}.",
    "HebCup": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient ()}."
}
{
    "Origin": "Returns an immutable set containing an arbitrary number of elements.",
    "Reference": "Returns an unmodifiable set containing an arbitrary number of elements.",
    "HebCup": "Returns an Unmodifiable set containing an arbitrary number of elements."
}
{
    "Origin": "Attaches an application created from a WADL description document to the\ncomponent.",
    "Reference": "Attaches an application created from a Swagger description document to the\ncomponent.",
    "HebCup": "Attaches an application created from a swagger description document to the component."
}
{
    "Origin": "Deletes the specified variable from the configuration.",
    "Reference": "Deletes the specified variable from the CONFIGURATION.",
    "HebCup": "Deletes the specified variable from the CONFIGURATION."
}
{
    "Origin": "Replaces existing tags of the specified {@link NamespacedEntityId} with a new set of tags.",
    "Reference": "Replaces existing tags of the specified {@link MetadataEntity} with a new set of tags.",
    "HebCup": "Replaces existing tags of the specified {@link MetadataEntity} with a new set of tags."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Returns the database ID of the user to whom this permission is granted.",
    "Reference": "Returns the database ID of the entity to whom this permission is\ngranted.",
    "HebCup": "Returns the database ID of the Entity to whom this permission is granted."
}
{
    "Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.",
    "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.",
    "HebCup": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient ()}."
}
{
    "Origin": "The meta-property for the {@code price} property.",
    "Reference": "The meta-property for the {@code tradedPrice} property.",
    "HebCup": "The meta-property for the {@code tradedPrice} property."
}
{
    "Origin": "Tests if this string ends with any specified suffixes.",
    "Reference": "Tests if this CharSequence ends with any specified suffixes.",
    "HebCup": "Tests if this CharSequence ends with any specified suffixes."
}
{
    "Origin": "The state of playback should be updated to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done.",
    "Reference": "The state of playback should be updated to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prepare is done.",
    "HebCup": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the Prepare is done."
}
{
    "Origin": "Returns the first sync d l object in the ordered set where companyId = ?",
    "Reference": "Returns the first sync d l object in the ordered set where repositoryId = ?",
    "HebCup": "Returns the first sync d l object in the ordered set where repositoryId = ?"
}
{
    "Origin": "If {@code labels = \"\"}, settings without any label are returned.",
    "Reference": "If {@code labelFilter = \"\"}, settings without any label are returned.",
    "HebCup": "If {@code LabelFilter = ````}, settings without any label are returned."
}
{
    "Origin": "If {@code labels = \"abc1234\"}, settings with a label equal to \"abc1234\" are returned.",
    "Reference": "If {@code labelFilter = \"abc1234\"}, settings with a label equal to \"abc1234\" are returned.",
    "HebCup": "If {@code LabelFilter = ``abc1234``}, settings with a label equal to ``abc1234`` are returned."
}
{
    "Origin": "Sets the value of the sourceFileName property.",
    "Reference": "Sets the value of the componentName property.",
    "HebCup": "Sets the value of the ComponentName property."
}
{
    "Origin": "Implements {@link PacketFilter}.",
    "Reference": "Implements {@link StanzaFilter}.",
    "HebCup": "Implements {@link StanzaFilter}."
}
{
    "Origin": "Sets {@link CommitContext.ValidationType} for associated commit.",
    "Reference": "Sets {@link CommitContext.ValidationMode} for associated commit.",
    "HebCup": "Sets {@link CommitContext.ValidationMode} for associated commit."
}
{
    "Origin": "Default method - returns \"input\"",
    "Reference": "Default method - returns \"success\"",
    "HebCup": "Default method - returns ``SUCCESS``"
}
{
    "Origin": "Get the map of all processed certificates until now.",
    "Reference": "Get the set of all processed certificates until now.",
    "HebCup": "Get the Set of all processed certificates until now."
}
{
    "Origin": "Checks if the given type id is of the edit group type.",
    "Reference": "Checks if the given type id is of the element view type.",
    "HebCup": "Checks if the given type id is of the element View Type."
}
{
    "Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?",
    "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?",
    "HebCup": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?"
}
{
    "Origin": "The default behavior of this method is to return\n{@link HttpServletRequest#getPushBuilder()} on the wrapped request object.",
    "Reference": "The default behavior of this method is to return\n{@link HttpServletRequest#newPushBuilder()} on the wrapped request object.",
    "HebCup": "The default behavior of this method is to return {@link HttpServletRequest#newPushBuilder ()} on the wrapped request object."
}
{
    "Origin": "Also, puts the new names->nodes map in the TsurgeonPattern that called copy.",
    "Reference": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy.",
    "HebCup": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy."
}
{
    "Origin": "The {@code onErrorResumeNext} method changes this\nbehavior.",
    "Reference": "The {@code onErrorResumeWith} method changes this\nbehavior.",
    "HebCup": "The {@code onErrorResumeWith} method changes this behavior."
}
{
    "Origin": "Returns a snapshot of all instances",
    "Reference": "Returns a snapshot of all applications",
    "HebCup": "Returns a snapshot of all Applications"
}
{
    "Origin": "Sets the bootstrap locations.",
    "Reference": "Sets the bootstrap nodes.",
    "HebCup": "Sets the bootstrap Nodes."
}
{
    "Origin": "Sets the selection listener that will be notified.",
    "Reference": "Sets the wakeup listener that will be notified.",
    "HebCup": "Sets the Wakeup Listener that will be notified."
}
{
    "Origin": "Sets the specified value to the {@code favorDecSpeed} field.",
    "Reference": "Sets the specified value to the {@code autoFlush} field.",
    "HebCup": "Sets the specified value to the {@code autoFlush} field."
}
{
    "Origin": "Tests if this string ends with any specified suffixes.",
    "Reference": "Tests if this CharSequence ends with any specified suffixes.",
    "HebCup": "Tests if this CharSequence ends with any specified suffixes."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Get BlobStoreType from BlobStoreConfig class",
    "Reference": "Get BlobStoreType from BlobStoreInfo class",
    "HebCup": "Get BlobStoreType from BlobStoreInfo class"
}
{
    "Origin": "Generate sync point information from the thrift representation.",
    "Reference": "Generate sync point information from the proto representation.",
    "HebCup": "Generate sync point information from the Proto representation."
}
{
    "Origin": "Adds a {@link TemporalMemory} to this {@code Layer}",
    "Reference": "Adds a {@link OldTemporalMemory} to this {@code Layer}",
    "HebCup": "Adds a {@link OldTemporalMemory} to this {@code Layer}"
}
{
    "Origin": "Example server version string:  VERSION",
    "Reference": "Example  version string:  VERSION",
    "HebCup": "Example Version string: VERSION"
}
{
    "Origin": "Returns if there are changed inherit properties.",
    "Reference": "Returns if there are changed properties.",
    "HebCup": "Returns if there are Changed Properties."
}
{
    "Origin": "Gets the list of {@link ConfigurationSetting ConfigurationSettings} on this page.",
    "Reference": "Gets the iterable stream of {@link ConfigurationSetting ConfigurationSettings} on this page.",
    "HebCup": "Gets the IterableStream of {@link ConfigurationSetting ConfigurationSettings} on this page."
}
{
    "Origin": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubDirectoryWithResponse(String)} ()}",
    "Reference": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubdirectoryWithResponse(String)} ()}",
    "HebCup": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubdirectoryWithResponse (String)} ()}"
}
{
    "Origin": "All the following mouse and key events apply to the given modifiers.",
    "Reference": "All the following mouse and key events apply to the given modifiersEx.",
    "HebCup": "All the following mouse and key events apply to the given modifiers."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Retrieves all the properties for the specified {@link NamespacedEntityId}.",
    "Reference": "Retrieves all the properties for the specified {@link MetadataEntity}.",
    "HebCup": "Retrieves all the properties for the specified {@link MetadataEntity}."
}
{
    "Origin": "Deletes the specified variable from the configuration.",
    "Reference": "Deletes the specified variable from the CONFIGURATION.",
    "HebCup": "Deletes the specified variable from the CONFIGURATION."
}
{
    "Origin": "Set the value for some metadata on a collection alias.",
    "Reference": "Set the value for some properties on a collection alias.",
    "HebCup": "Set the value for some Properties on a collection alias."
}
{
    "Origin": "Creates an audit entry for the 'service updated' event.",
    "Reference": "Creates an audit entry for the 'API updated' event.",
    "HebCup": "Creates an audit entry for the 'api Updated' event."
}
{
    "Origin": "Start building a new factory instance-based service binding.",
    "Reference": "Start building a new supplier instance-based service binding.",
    "HebCup": "Start building a new Supplier Instance-based service binding."
}
{
    "Origin": "Sets the value of the 'dec' field.",
    "Reference": "Sets the value of the 'ts' field.",
    "HebCup": "Sets the value of the 'Ts' field."
}
{
    "Origin": "KeyCreateOptions#getNotBefore() notBefore} values are optional.",
    "Reference": "CreateKeyOptions#getNotBefore() notBefore} values are optional.",
    "HebCup": "CreateKeyOptions#getNotBefore () notBefore} values are optional."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Gets the value of the cryptAlgorithmType property.",
    "Reference": "Gets the value of the algorithmName property.",
    "HebCup": "Gets the value of the algorithmName property."
}
{
    "Origin": "String representation of \"this\" with packagename and the path.",
    "Reference": "String representation of \"this\" with elementname and the path.",
    "HebCup": "String representation of ``this`` with elementName and the path."
}
{
    "Origin": "Checks a filename to see if it matches the specified wildcard matcher\nusing the case rules of the system.",
    "Reference": "Checks a fileName to see if it matches the specified wildcard matcher\nusing the case rules of the system.",
    "HebCup": "Checks a fileName to see if it matches the specified wildcard matcher using the case rules of the system."
}
{
    "Origin": "Sets the value of the 'BloomFilter' field.",
    "Reference": "Sets the value of the 'bloomFilter' field.",
    "HebCup": "Sets the value of the 'bloomFilter' field."
}
{
    "Origin": "Get {@link Repo} from event",
    "Reference": "Get {@link Repository} from event",
    "HebCup": "Get {@link Repository} from event"
}
{
    "Origin": "Set the {@link MongoDbFactory} that this instance should manage transactions for.",
    "Reference": "Set the {@link MongoDatabaseFactory} that this instance should manage transactions for.",
    "HebCup": "Set the {@link MongoDatabaseFactory} that this instance should manage transactions for."
}
{
    "Origin": "Retrieves all the tags for the specified {@link NamespacedEntityId}.",
    "Reference": "Retrieves all the tags for the specified {@link MetadataEntity}.",
    "HebCup": "Retrieves all the tags for the specified {@link MetadataEntity}."
}
{
    "Origin": "Returns an adapter which converts a {@link MultimapSideInputHandlerFactory} to a {@link",
    "Reference": "Returns an adapter which converts a {@link SideInputHandlerFactory} to a {@link",
    "HebCup": "Returns an adapter which converts a {@link SideInputHandlerFactory} to a {@link"
}
{
    "Origin": "Gets the sentenceLocation.",
    "Reference": "Gets the sentenceLocations.",
    "HebCup": "Gets the sentenceLocations."
}
{
    "Origin": "Add component to be presented in the ScrollPane viewport",
    "Reference": "Set component to be presented in the ScrollPane viewport",
    "HebCup": "set Component To be presented in the ScrollPane viewport"
}
{
    "Origin": "Sets the base section paint and sends a {@link PlotChangeEvent} to all\nregistered listeners.",
    "Reference": "Sets the default section paint and sends a {@link PlotChangeEvent} to all\nregistered listeners.",
    "HebCup": "Sets the Default Section Paint and sends a {@link PlotChangeEvent} to all registered listeners."
}
{
    "Origin": "Returns the set of all compilation unit type names (both regular and super sourced).",
    "Reference": "Returns the set of all compilation unit type source names (both regular and super sourced).",
    "HebCup": "Returns the set of all compilation Unit Type Source Names (both regular and super sourced)."
}
{
    "Origin": "Expands the given item.",
    "Reference": "Expands the given items.",
    "HebCup": "Expands the given items."
}
{
    "Origin": "The {@link EcKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if\nnot specified.",
    "Reference": "The {@link CreateEcKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if\nnot specified.",
    "HebCup": "The {@link CreateEcKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "If not in position swap it with A[A[p]-1]",
    "Reference": "If not in position swap it with nums[nums[p]-1]",
    "HebCup": "If not in position swap it with nums[nums[p]-1]"
}
{
    "Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix while using (ox, oy, oz) as the rotation origin.",
    "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz) as the rotation origin.",
    "HebCup": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz) as the rotation origin."
}
{
    "Origin": "Sets the database ID of the user to whom this permission is granted.",
    "Reference": "Sets the database ID of the entity to whom this permission is granted.",
    "HebCup": "Sets the database ID of the Entity to whom this permission is granted."
}
{
    "Origin": "The meta-property for the {@code bondGroup} property.",
    "Reference": "The meta-property for the {@code repoGroup} property.",
    "HebCup": "The meta-property for the {@code RepoGroup} property."
}
{
    "Origin": "Test an {@link Array} used as a LIFO stack.",
    "Reference": "Test an {@link XQArray} used as a LIFO stack.",
    "HebCup": "Test an {@link XQArray} used as a LIFO stack."
}
{
    "Origin": "If {@code labels = \"abc*\"}, settings with a label starting with \"abc\" are returned.",
    "Reference": "If {@code labelFilter = \"abc*\"}, settings with a label starting with \"abc\" are returned.",
    "HebCup": "If {@code LabelFilter = ``abc*``}, settings with a label starting with ``abc`` are returned."
}
{
    "Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix and store\nthe result in .",
    "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix and store\nthe result in .",
    "HebCup": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix and store the result in ."
}
{
    "Origin": "Removes all metadata (including properties and tags) for the specified {@link NamespacedEntityId}.",
    "Reference": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}.",
    "HebCup": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}."
}
{
    "Origin": "Returns true if field ttlActionNotUsed is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field ttlAction is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field TtlAction is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "The negative of {@code startsWith} is {@link #startsNotWith}.",
    "Reference": "The negative of {@code startsWith} is {@link #notStartingWith}.",
    "HebCup": "The negative of {@code startsWith} is {@link#notStartingWith}."
}
{
    "Origin": "This method iteratively calls {@link\n#doFeatureIteration(TrainingEstimator, Collection, Vector, Vector, double)}  to train\nthe feature.",
    "Reference": "This method iteratively calls {@link\n#doFeatureIteration(TrainingEstimator, Collection, RealVector, RealVector, double)}  to train\nthe feature.",
    "HebCup": "This method iteratively calls {@link#doFeatureIteration (TrainingEstimator, Collection, RealVector, RealVector, double)} to train the feature."
}
{
    "Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listIssuers#context}",
    "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers#context}",
    "HebCup": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers#context}"
}
{
    "Origin": "Set the value of statusBefore, used in parameter comment.",
    "Reference": "Set the value of clustername, used in parameter comment.",
    "HebCup": "Set the value of clustername, used in parameter comment."
}
{
    "Origin": "Creates a {@link PropertyMatcher} to match against a\nslot position.",
    "Reference": "Creates a {@link KeyValueMatcher} to match against a\nslot position.",
    "HebCup": "Creates a {@link KeyValueMatcher} to match against a slot position."
}
{
    "Origin": "If this lookup object has private access, then the caller class is the lookupClass.",
    "Reference": "If this lookup object has full privilege access, then the caller class is the lookupClass.",
    "HebCup": "If this lookup object has Full Privilege Access, then the caller class is the lookupClass."
}
{
    "Origin": "Clears the value of the 'BloomFilter' field",
    "Reference": "Clears the value of the 'bloomFilter' field.",
    "HebCup": "Clears the value of the 'bloomFilter' field"
}
{
    "Origin": "Makes a copy of this offset and removes any added terms that are accesses to the length of\nthe listed arrays.",
    "Reference": "Makes a copy of this offset and removes any added terms that are accesses to the length of\nthe listed sequences.",
    "HebCup": "Makes a copy of this offset and removes any added terms that are accesses to the length of the listed sequences."
}
{
    "Origin": "This method will interpolate between each two successive quaternions via {@link #slerp(Quaterniond, double)} using their relative interpolation weights.",
    "Reference": "This method will interpolate between each two successive quaternions via {@link #slerp(Quaterniondc, double)} using their relative interpolation weights.",
    "HebCup": "This method will interpolate between each two successive quaternions via {@link #slerp(Quaterniondc, double)} using their relative interpolation weights."
}
{
    "Origin": "Gets the value of the sourceFileName property.",
    "Reference": "Gets the value of the componentName property.",
    "HebCup": "Gets the value of the componentName property."
}
{
    "Origin": "RsaKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.",
    "Reference": "CreateRsaKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.",
    "HebCup": "CreateRsaKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Scheduler.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Executor.",
    "HebCup": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor."
}
{
    "Origin": "Gets the list of {@link DeletedCertificate deletedSecrets} on this page.",
    "Reference": "Gets the iterable stream of {@link DeletedCertificate deletedSecrets} on this page.",
    "HebCup": "Gets the IterableStream of {@link DeletedCertificate deletedSecrets} on this page."
}
{
    "Origin": "Sets the specified value to the {@code bitfield} field.",
    "Reference": "Sets the specified value to the {@code baselineUsesContext} field.",
    "HebCup": "Sets the specified value to the {@code baselineUsesContext} field."
}
{
    "Origin": "Converts the provided outcome to a message describing the outcome.",
    "Reference": "Converts the provided error to a message describing the error.",
    "HebCup": "Converts the provided Error to a message describing the Error."
}
{
    "Origin": "Bind contract provider model to a provider instance using the supplied instance manager.",
    "Reference": "Bind contract provider model to a provider instance using the supplied injection manager.",
    "HebCup": "Bind contract provider model to a provider instance using the supplied Injection Manager."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "TkFallback can throw an IOException when no fallback is available.",
    "Reference": "TkFallback can throw an Exception when no fallback is available.",
    "HebCup": "TkFallback can throw an Exception when no fallback is available."
}
{
    "Origin": "Wraps a loaded value to add the refresh value.",
    "Reference": "Wraps a loaded value to add the refreshed value.",
    "HebCup": "Wraps a loaded value to add the Refreshed value."
}
{
    "Origin": "Sets the journal serializer, returning the builder for method chaining.",
    "Reference": "Sets the journal namespace, returning the builder for method chaining.",
    "HebCup": "Sets the journal Namespace, returning the builder for method chaining."
}
{
    "Origin": "Get the application-configured instance manager.",
    "Reference": "Get the application-configured injection manager.",
    "HebCup": "Get the application-configured Injection Manager."
}
{
    "Origin": "Get service locator.",
    "Reference": "Get instance manager.",
    "HebCup": "Get Instance Manager."
}
{
    "Origin": "within the chart's domain and range) represented by the given pixel coordinates, if\nthat pixel is within the chart region described by {@link #contentRectMinusAllMargins}.",
    "Reference": "within the chart's domain and range) represented by the given pixel coordinates, if\nthat pixel is within the chart region described by {@link #contentRect}.",
    "HebCup": "within the chart's domain and range) represented by the given pixel coordinates, if that pixel is within the chart region described by {@link#contentRect}."
}
{
    "Origin": "Gets the entityName.",
    "Reference": "Gets the entity.",
    "HebCup": "Gets the entity."
}
{
    "Origin": "Creates an audit entry for the 'service version created' event.",
    "Reference": "Creates an audit entry for the 'API version created' event.",
    "HebCup": "Creates an audit entry for the 'api Version Created' event."
}
{
    "Origin": "Equivalent to {@code load(file, true)}.",
    "Reference": "Equivalent to {@code load(module, true)}.",
    "HebCup": "Equivalent to {@code load(module, true)}."
}
{
    "Origin": "Getter Parameter Value for statementdate",
    "Reference": "Getter Parameter Value for Statement date",
    "HebCup": "Getter Parameter Value for StatementDate"
}
{
    "Origin": "Creates an {@code FxSwap} using forward points, specifying a date adjustment.",
    "Reference": "Creates an {@code FxSwap} using decimal forward points, specifying a date adjustment.",
    "HebCup": "Creates an {@code FxSwap} using decimal Forward Points, specifying a date adjustment."
}
{
    "Origin": "Copies the specified {@link PointerBuffer} to the {@code data.l} field.",
    "Reference": "Copies the specified {@link CLongBuffer} to the {@code data.l} field.",
    "HebCup": "Copies the specified {@link CLongBuffer} to the {@code data.l} field."
}
{
    "Origin": "Binds the specified {@link Service} under the specified directory.",
    "Reference": "Binds the specified {@link HttpService} under the specified directory.",
    "HebCup": "Binds the specified {@link HttpService} under the specified directory."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Add insert optimize result unit.",
    "Reference": "Add optimized insert value.",
    "HebCup": "Add Optimized Insert Value."
}
{
    "Origin": "Simple test -- dump and execute appJar with the given appClasses in classlist.",
    "Reference": "Simple test -- dump and execute appJar with the given classList in classlist.",
    "HebCup": "Simple test -- dump and execute appJar with the given classList in classlist."
}
{
    "Origin": "Creates the {@link com.univocity.parsers.fixed.FixedWidthFieldLengths} instance based on the headers and field\nlengths.",
    "Reference": "Creates the {@link com.univocity.parsers.fixed.FixedWidthFields} instance based on the headers and field\nlengths.",
    "HebCup": "Creates the {@link com.univocity.parsers.fixed.FixedWidthFields} instance based on the headers and field lengths."
}
{
    "Origin": "So we call\n{@link Utils#rSuicide(String)} instead.",
    "Reference": "So we call\n{@link RSuicide#rSuicide(String)} instead.",
    "HebCup": "So we call {@link RSuicide#rSuicide (String)} instead."
}
{
    "Origin": "Note that this method doesn't serialize the CharSequence of the TokenStream - the caller\nhas to take care of serializing this if necessary.",
    "Reference": "Note that this method doesn't serialize the CharSequence of the TwitterTokenStream - the caller\nhas to take care of serializing this if necessary.",
    "HebCup": "Note that this method doesn't serialize the CharSequence of the TwitterTokenStream - the caller has to take care of serializing this if necessary."
}
{
    "Origin": "Get all supported realms",
    "Reference": "Get all supported providers",
    "HebCup": "Get all supported Providers"
}
{
    "Origin": "Implementations of SkylarkValue may define their own behavior of {@code repr}.",
    "Reference": "Implementations of StarlarkValue may define their own behavior of {@code repr}.",
    "HebCup": "Implementations of StarlarkValue may define their own behavior of {@code repr}."
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Scheduler, with this\ntask's result as the argument to the supplied action.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Executor, with this\ntask's result as the argument to the supplied action.",
    "HebCup": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied action."
}
{
    "Origin": "Adds continuous task object.",
    "Reference": "Adds local continuous task object.",
    "HebCup": "Adds Local Continuous Task object."
}
{
    "Origin": "Test of var method, of class ShiftedGeometricDistribution.",
    "Reference": "Test of variance method, of class ShiftedGeometricDistribution.",
    "HebCup": "Test of Variance method, of class ShiftedGeometricDistribution."
}
{
    "Origin": "Gets the service either from the cache or from ES.",
    "Reference": "Gets the api either from the cache or from ES.",
    "HebCup": "Gets the Api either from the cache or from ES."
}
{
    "Origin": "Other method on {@link Descriptor}\nwill be ignored.",
    "Reference": "Other method on {@link Binding}\nwill be ignored.",
    "HebCup": "Other method on {@link Binding} will be ignored."
}
{
    "Origin": "{@link Keys#EGG_TIMER}",
    "Reference": "{@link Keys#EGG_TIME}",
    "HebCup": "{@link Keys#EGG_TIME}"
}
{
    "Origin": "This method sets the value of the database column m_monitor_item.user",
    "Reference": "This method sets the value of the database column m_monitor_item.username",
    "HebCup": "This method sets the value of the database column m_monitor_item.Username"
}
{
    "Origin": "See {@link #setPadding(int, int, int, int)}",
    "Reference": "See {@link #setPadding(float, float, float, float)}",
    "HebCup": "See {@link #setPadding(float, float, float, float)}"
}
{
    "Origin": "Test of var method, of class GeometricDistribution.",
    "Reference": "Test of variance method, of class GeometricDistribution.",
    "HebCup": "Test of Variance method, of class GeometricDistribution."
}
{
    "Origin": "If it's successfully completed, {@link BrowserResult#getMediaItems()} will return the list\nof children.",
    "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the list\nof children.",
    "HebCup": "If it's successfully completed, {@link LibraryResult#getMediaItems ()} will return the list of children."
}
{
    "Origin": "The meta-property for the {@code sensitivity} property.",
    "Reference": "The meta-property for the {@code zeroRateSensitivity} property.",
    "HebCup": "The meta-property for the {@code zeroRateSensitivity} property."
}
{
    "Origin": "Execute an accumulation along one or more dimensions",
    "Reference": "Execute an reduceOp along one or more dimensions",
    "HebCup": "Execute an ReduceOp along one or more dimensions"
}
{
    "Origin": "Sends a message to all connected members except to the one with the given id.",
    "Reference": "Sends a message to all connected clients except to the one with the given id.",
    "HebCup": "Sends a message to all connected clients except to the one with the given id."
}
{
    "Origin": "Checks the dirty status of the 'stmPriority' field.",
    "Reference": "Checks the dirty status of the 'reprUrl' field.",
    "HebCup": "Checks the dirty status of the 'ReprUrl' field."
}
{
    "Origin": "TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}.",
    "Reference": "NetworkEnvironmentOptions#NETWORK_BUFFERS_MEMORY_MAX}.",
    "HebCup": "NetworkEnvironmentOptions#NETWORK_BUFFERS_MEMORY_MAX}."
}
{
    "Origin": "Creates a {@code For}-comprehension of two Iterables.",
    "Reference": "Creates a {@code For}-comprehension of two Options.",
    "HebCup": "Creates a {@code For}-comprehension of two Iterables."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHTTPHeaders#BlobHTTPHeaders}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHTTPHeaders#BlobHttpHeaders}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHTTPHeaders#BlobHttpHeaders}"
}
{
    "Origin": "Getter for {@link #allowMethods}",
    "Reference": "Getter for {@link #allowedHeaders}",
    "HebCup": "Getter for {@link#allowedHeaders}"
}
{
    "Origin": "Fetch objects to a local disk up to {@link PrefetchConfig#maxFetchCapacityBytes}.",
    "Reference": "Fetch objects to a local disk up to {@link FetchConfig#maxFetchCapacityBytes}.",
    "HebCup": "Fetch objects to a local disk up to {@link fetchConfig#maxFetchCapacityBytes}."
}
{
    "Origin": "Create a new {@link MongoClient} with defaults suitable for replica set usage.",
    "Reference": "Create a new {@link com.mongodb.MongoClient} with defaults suitable for replica set usage.",
    "HebCup": "Create a new {@link com.mongodb.MongoClient} with defaults suitable for replica set usage."
}
{
    "Origin": "This is a mutually exclusive option to {@link #samlServiceProvider(ServiceProviderConfigurationResolver)}",
    "Reference": "This is a mutually exclusive option to {@link #saml2Login(ServiceProviderConfigurationResolver)}",
    "HebCup": "This is a mutually exclusive option to {@link#saml2Login (ServiceProviderConfigurationResolver)}"
}
{
    "Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.",
    "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.",
    "HebCup": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS."
}
{
    "Origin": "Scenario successful connection to the back end service via basic auth.",
    "Reference": "Scenario successful connection to the back end API via basic auth.",
    "HebCup": "Scenario successful connection to the back end api via basic auth."
}
{
    "Origin": "Opens a {@link TitanGraph} database configured according to the provided configuration.",
    "Reference": "Opens a {@link JanusGraph} database configured according to the provided configuration.",
    "HebCup": "Opens a {@link JanusGraph} database configured according to the provided configuration."
}
{
    "Origin": "Returns an SslContextFactory that should be used by a jetty server based on the specified\nSSLConfig param which may be null.",
    "Reference": "Returns an SslContextFactory.Server that should be used by a jetty server based on the specified\nSSLConfig param which may be null.",
    "HebCup": "Returns an SslContextFactory.Server that should be used by a jetty server based on the specified SSLConfig param which may be null."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Sets the value of the 'cf_name' field.",
    "Reference": "Sets the value of the 'cfName' field.",
    "HebCup": "Sets the value of the 'cfName' field."
}
{
    "Origin": "Sets the {@link PlatformConnectionManager} managing the connections to the AxonServer platform.",
    "Reference": "Sets the {@link AxonServerConnectionManager} managing the connections to the AxonServer platform.",
    "HebCup": "Sets the {@link AxonServerConnectionManager} managing the connections to the AxonServer platform."
}
{
    "Origin": "Get isManualImport.",
    "Reference": "Get IsManualImport.",
    "HebCup": "Get IsManualImport."
}
{
    "Origin": "Returns the default ValueFormatter that has been determined by the chart\nconsidering the provided minimum and maximum values.",
    "Reference": "Returns the default IValueFormatter that has been determined by the chart\nconsidering the provided minimum and maximum values.",
    "HebCup": "Returns the default IValueFormatter that has been determined by the chart considering the provided minimum and maximum values."
}
{
    "Origin": "Getter for the URL of the content review icon associated with this item",
    "Reference": "Getter for the css class of the content review icon associated with this item",
    "HebCup": "Getter for the CssClass of the content review icon associated with this item"
}
{
    "Origin": "Returns whether the template node is stateful (has at least one @state variable).",
    "Reference": "Returns whether the template node is stateful (has at least one @prop variable).",
    "HebCup": "Returns whether the template node is stateful (has at least one @Prop variable)."
}
{
    "Origin": "Given a {@link Tab}, selects the corresponding mode in the {@link SplitEditor}, i.e.",
    "Reference": "Given a {@link Tab}, selects the corresponding mode in the {@link DesignToolsSplitEditor}, i.e.",
    "HebCup": "Given a {@link Tab}, selects the corresponding mode in the {@link DesignToolsSplitEditor}, i.e."
}
{
    "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.",
    "HebCup": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners."
}
{
    "Origin": "Returns an immutable list containing eight elements.",
    "Reference": "Returns an unmodifiable list containing eight elements.",
    "HebCup": "Returns an Unmodifiable list containing eight elements."
}
{
    "Origin": "Find all ChildGlideModules",
    "Reference": "Find all LibraryGlideModules",
    "HebCup": "Find all libraryGlideModules"
}
{
    "Origin": "Clears the value of the 'zk_Quorum' field",
    "Reference": "Clears the value of the 'zkQuorum' field.",
    "HebCup": "Clears the value of the 'zkQuorum' field"
}
{
    "Origin": "Tests resilency when D2 device is down.",
    "Reference": "Tests resiliency when D2 device is down.",
    "HebCup": "Tests resiliency when D2 device is down."
}
{
    "Origin": "If {@code cursor#getNext()} is\n{@code null}, this method adds all the scalar values in current\narray to the result.",
    "Reference": "If {@code pathCursor#getNext()} is\n{@code null}, this method adds all the scalar values in current\narray to the result.",
    "HebCup": "If {@code pathCursor#getNext ()} is {@code null}, this method adds all the scalar values in current array to the result."
}
{
    "Origin": "Returns a wrapped instance of {@link ClientConnectionManager}\nto capture the necessary performance metrics.",
    "Reference": "Returns a wrapped instance of {@link HttpClientConnectionManager}\nto capture the necessary performance metrics.",
    "HebCup": "Returns a wrapped instance of {@link HttpClientConnectionManager} to capture the necessary performance metrics."
}
{
    "Origin": "Appends {@link UserDefinedFunctionInfo} protos to a {@link ModuleInfo.Builder}.",
    "Reference": "Appends {@link StarlarkFunctionInfo} protos to a {@link ModuleInfo.Builder}.",
    "HebCup": "Appends {@link StarlarkFunctionInfo} protos to a {@link ModuleInfo.Builder}."
}
{
    "Origin": "Test of setParams method, of class OldAgentConnector.",
    "Reference": "Test of addMetric method, of class OldAgentConnector.",
    "HebCup": "Test of addMetric method, of class OldAgentConnector."
}
{
    "Origin": "See {@link #setIgnoreGestureInsetBottom(boolean)}.",
    "Reference": "See {@link #setGestureInsetBottomIgnored(boolean)}.",
    "HebCup": "See {@link #setgestureInsetBottomIgnored(boolean)}."
}
{
    "Origin": "Updates the current packet.",
    "Reference": "Updates the current chunk.",
    "HebCup": "Updates the Current Chunk."
}
{
    "Origin": "Test of var method, of class FDistribution.",
    "Reference": "Test of variance method, of class FDistribution.",
    "HebCup": "Test of Variance method, of class FDistribution."
}
{
    "Origin": "Retrieve the {@link Graph} with the specified ID from the cache.",
    "Reference": "Retrieve the {@link Store} with the specified ID from the cache.",
    "HebCup": "Retrieve the {@link store} with the specified ID from the cache."
}
{
    "Origin": "Handles an {@link HttpResponseException} that occurs.",
    "Reference": "Handles an {@link ResponseException} that occurs.",
    "HebCup": "Handles an {@link ResponseException} that occurs."
}
{
    "Origin": "Gets the list of {@link KeyProperties KeyProperties} on this page.",
    "Reference": "Gets the iterable stream of {@link KeyProperties KeyProperties} on this page.",
    "HebCup": "Gets the IterableStream of {@link KeyProperties KeyProperties} on this page."
}
{
    "Origin": "Sets the statistic repository with the specified statistic repository.",
    "Reference": "Sets the option repository with the specified option repository.",
    "HebCup": "Sets the Option Repository with the specified Option Repository."
}
{
    "Origin": "Put attribute consent enabled.",
    "Reference": "Put service into flashscope.",
    "HebCup": "put Service Into Flash Scope."
}
{
    "Origin": "Returns a literal for the {@link Reference} availability.",
    "Reference": "Returns a literal for the {@link ScrService.Reference} availability.",
    "HebCup": "Returns a literal for the {@link ScrService.Reference} availability."
}
{
    "Origin": "Return a scalar {@code Codec} for the given range.",
    "Reference": "Return a scalar {@code Encodec} for the given range.",
    "HebCup": "Return a scalar {@code Encodec} for the given range."
}
{
    "Origin": "Gets the default type id for entry point folders.",
    "Reference": "Gets the default type id for subsitemap folders.",
    "HebCup": "Gets the default type id for Subsitemap folders."
}
{
    "Origin": "Create client response filtering stage using the instance manager.",
    "Reference": "Create client response filtering stage using the injection manager.",
    "HebCup": "Create client response filtering stage using the Injection Manager."
}
{
    "Origin": "If the size\nof the new entry is larger than the table's capacity, the dynamic table will be cleared.",
    "Reference": "If the size\nof the new entry is larger than the table's maxHeaderTableSize, the dynamic table will be cleared.",
    "HebCup": "If the size of the new entry is larger than the table's maxHeaderTableSize, the dynamic table will be cleared."
}
{
    "Origin": "Gets the intentName.",
    "Reference": "Gets the intent.",
    "HebCup": "Gets the intent."
}
{
    "Origin": "Returns an immutable set containing seven elements.",
    "Reference": "Returns an unmodifiable set containing seven elements.",
    "HebCup": "Returns an Unmodifiable set containing seven elements."
}
{
    "Origin": "Waits during {@code timeout} until update is finished by checking that only single master pod\nis present and it has incremented {@code masterVersionBeforeUpdate} number in name.",
    "Reference": "Waits during {@code timeoutInSec} until update is finished by checking that only single master\npod is present and it has incremented {@code masterVersionBeforeUpdate} number in name.",
    "HebCup": "Waits during {@code timeoutInSec} until update is finished by checking that only single master pod is present and it has incremented {@code masterVersionBeforeUpdate} number in name."
}
{
    "Origin": "Add a system classpath element.",
    "Reference": "Add a system classpath entry.",
    "HebCup": "Add a System Classpath Entry."
}
{
    "Origin": "Converts a java object to a sequence of bytes using a ProtoStream {@link SerializationContext}.",
    "Reference": "Converts a java object to a sequence of bytes using a ProtoStream {@link ImmutableSerializationContext}.",
    "HebCup": "Converts a java object to a sequence of bytes using a ProtoStream {@link ImmutableSerializationContext}."
}
{
    "Origin": "Gets called by  fromValueMap",
    "Reference": "Gets called by  fromValueMapWithClass",
    "HebCup": "Gets called by fromValueMapWithClass"
}
{
    "Origin": "Returns the builder for the settings used for calls to labelAudio.",
    "Reference": "Returns the builder for the settings used for calls to listEvaluationJobs.",
    "HebCup": "Returns the builder for the settings used for calls to ListEvaluationJobs."
}
{
    "Origin": "Can get a bean for Script Load Balancer.",
    "Reference": "Can get a bean for Script Cluster Selector.",
    "HebCup": "Can get a bean for Script Cluster Selector."
}
{
    "Origin": "KeyCreateOptions#getNotBefore() notBefore} values are optional.",
    "Reference": "CreateKeyOptions#getNotBefore() notBefore} values are optional.",
    "HebCup": "CreateKeyOptions#getNotBefore () notBefore} values are optional."
}
{
    "Origin": "GeneratedRootGlideModule.",
    "Reference": "GeneratedAppGlideModule.",
    "HebCup": "GeneratedAppGlideModule."
}
{
    "Origin": "Sets departement.",
    "Reference": "Sets department.",
    "HebCup": "Sets department."
}
{
    "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "HebCup": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners."
}
{
    "Origin": "Checks that semicolon is in empty for initializer.",
    "Reference": "Checks that semicolon is in empty for initializer or condition.",
    "HebCup": "Checks that semicolon is In Empty For Initializer Or Condition."
}
{
    "Origin": "Test of var method, of class Gamma.",
    "Reference": "Test of variance method, of class Gamma.",
    "HebCup": "Test of Variance method, of class Gamma."
}
{
    "Origin": "Sets the value of the 'zk_Quorum' field.",
    "Reference": "Sets the value of the 'zkQuorum' field.",
    "HebCup": "Sets the value of the 'zkQuorum' field."
}
{
    "Origin": "Copies the specified {@link PointerBuffer} to the {@code data.l} field.",
    "Reference": "Copies the specified {@link CLongBuffer} to the {@code data.l} field.",
    "HebCup": "Copies the specified {@link CLongBuffer} to the {@code data.l} field."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "This method returns the value of the database column m_prj_risk.dateraised",
    "Reference": "This method returns the value of the database column m_prj_risk.raisedDate",
    "HebCup": "This method returns the value of the database column m_prj_risk.Raiseddate"
}
{
    "Origin": "Return the rack for which an endpoint resides in",
    "Reference": "Return the rack for which an node resides in",
    "HebCup": "Return the rack for which an Node resides in"
}
{
    "Origin": "Deletes the specified variable from the configuration.",
    "Reference": "Deletes the specified variable from the CONFIGURATION.",
    "HebCup": "Deletes the specified variable from the CONFIGURATION."
}
{
    "Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix while using (ox, oy, oz)\nas the rotation origin.",
    "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz)\nas the rotation origin.",
    "HebCup": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz) as the rotation origin."
}
{
    "Origin": "Create client request filtering stage using the service locator.",
    "Reference": "Create client request filtering stage using the instance manager.",
    "HebCup": "Create client request filtering stage using the Instance Manager."
}
{
    "Origin": "Returns {@code true} if this method is the first JsMethod in the method hierarchy that exposes\nan existing non-JsMethod inside a class.",
    "Reference": "Returns {@code true} if this method is the first JsMember in the method hierarchy that exposes\nan existing non-JsMember inside a class.",
    "HebCup": "Returns {@code true} if this method is the first JsMember in the method hierarchy that exposes an existing non-JsMember inside a class."
}
{
    "Origin": "Removes the specified tags from the {@link NamespacedEntityId}",
    "Reference": "Removes the specified tags from the {@link MetadataEntity}",
    "HebCup": "Removes the specified tags from the {@link MetadataEntity}"
}
{
    "Origin": "Ensures that the service referenced by the Contract at the head of\nthe iterator actually exists (is published).",
    "Reference": "Ensures that the api referenced by the Contract at the head of\nthe iterator actually exists (is published).",
    "HebCup": "Ensures that the Api referenced by the Contract at the head of the iterator actually exists (is published)."
}
{
    "Origin": "Authorized the given DDLWork2.",
    "Reference": "Authorized the given DDLWork.",
    "HebCup": "Authorized the given DDLWork."
}
{
    "Origin": "Creates a global symbol of the form {@code \"JVM\" + container name}.",
    "Reference": "Creates a global symbol of the form {@code \"A\" + container name}.",
    "HebCup": "Creates a global symbol of the form {@code ``A`` + container name}."
}
{
    "Origin": "Gets the list of {@link DeletedKey deletedSecrets} on this page.",
    "Reference": "Gets the iterable stream of {@link DeletedKey deletedSecrets} on this page.",
    "HebCup": "Gets the IterableStream of {@link DeletedKey deletedSecrets} on this page."
}
{
    "Origin": "Converts a Swagger parameter to an instance of {@link Entity}.",
    "Reference": "Converts a Swagger parameter to an instance of {@link PayLoad}.",
    "HebCup": "Converts a Swagger parameter to an instance of {@link PayLoad}."
}
{
    "Origin": "Returns the storage serializer.",
    "Reference": "Returns the storage namespace.",
    "HebCup": "Returns the storage Namespace."
}
{
    "Origin": "Scheduler:\n {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Retrieves whether the permission of the given type has been granted to\nthe given user.",
    "Reference": "Retrieves whether the permission of the given type has been granted to\nthe given entity.",
    "HebCup": "Retrieves whether the permission of the given type has been granted to the given Entity."
}
{
    "Origin": "The annotation is sorted by array and then offset.",
    "Reference": "The annotation is sorted by sequence and then offset.",
    "HebCup": "The annotation is sorted by sequence and then offset."
}
{
    "Origin": "Note this method creates a HotStream that starts emitting data\nimmediately.",
    "Reference": "Note this method creates a Connectable that starts emitting data\nimmediately.",
    "HebCup": "Note this method creates a Connectable that starts emitting data immediately."
}
{
    "Origin": "Return the {@link VarNode} associated with the optional\n{@link Annotations#FAST_RANGE_COUNT} property.",
    "Reference": "Return the {@link VarNode} associated with the optional\n{@link Annotations#FAST_RANGE_COUNT_VAR} property.",
    "HebCup": "Return the {@link VarNode} associated with the optional {@link Annotations#FAST_RANGE_COUNT_VAR} property."
}
{
    "Origin": "By\ndefault, it returns the {@link Finder} class.",
    "Reference": "By\ndefault, it returns the {@link org.restlet.resource.Finder} class.",
    "HebCup": "By default, it returns the {@link org.restlet.resource.Finder} class."
}
{
    "Origin": "Standard setter for the rightwardLabel String for this RelationshipType",
    "Reference": "Standard setter for the rightwardType String for this RelationshipType",
    "HebCup": "Standard setter for the rightwardType String for this RelationshipType"
}
{
    "Origin": "Initializes the {@link DecryptionStatusTracker}",
    "Reference": "Initializes the {@link CryptoJobStatusTracker}",
    "HebCup": "Initializes the {@link cryptoJobStatusTracker}"
}
{
    "Origin": "Test of npara method, of class HyperGeometricDistribution.",
    "Reference": "Test of length method, of class HyperGeometricDistribution.",
    "HebCup": "Test of Length method, of class HyperGeometricDistribution."
}
{
    "Origin": "Return a scalar {@code Codec} for the given range.",
    "Reference": "Return a scalar {@code Encodec} for the given range.",
    "HebCup": "Return a scalar {@code Encodec} for the given range."
}
{
    "Origin": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse#ConfigurationSetting-Context}",
    "Reference": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSettingWithResponse#ConfigurationSetting-Context}",
    "HebCup": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSettingWithResponse#ConfigurationSetting-Context}"
}
{
    "Origin": "Is the value with this qualifier less than the length of array?",
    "Reference": "Is the value with this qualifier less than the length of sequence?",
    "HebCup": "Is the value with this qualifier less than the length of sequence?"
}
{
    "Origin": "The documentation of {@link FCPPluginClientTracker#getClient(UUID)} applies to this\nfunction.",
    "Reference": "The documentation of {@link FCPPluginClientTracker#getConnection(UUID)} applies to this\nfunction.",
    "HebCup": "The documentation of {@link FCPPluginClientTracker#getConnection (UUID)} applies to this function."
}
{
    "Origin": "Returns the group name used as a publisher group name for authentication\non the target endpoint.",
    "Reference": "Returns the cluster name used as a publisher cluster name for authentication\non the target endpoint.",
    "HebCup": "Returns the cluster Name used as a publisher cluster Name for authentication on the target endpoint."
}
{
    "Origin": "Stop managing a location.",
    "Reference": "Stop managing a DatasetGraph.",
    "HebCup": "Stop managing a location."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@link Route}.",
    "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@link Route}.",
    "HebCup": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@link Route}."
}
{
    "Origin": "Calls to {@code register} are idempotent; adding the same\nannotated class more than once has no additional effect.",
    "Reference": "Calls to {@code register} are idempotent; adding the same\ncomponent class more than once has no additional effect.",
    "HebCup": "Calls to {@code register} are idempotent; adding the same component Class more than once has no additional effect."
}
{
    "Origin": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, ReliableDownloadOptions,",
    "Reference": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, DownloadRetryOptions,",
    "HebCup": "Code snippets for {@link BlobAsyncClient#downloadWithResponse (BlobRange, DownloadRetryOptions,"
}
{
    "Origin": "Gets the value of the egBlockLevelElts property.",
    "Reference": "Gets the value of the content property.",
    "HebCup": "Gets the value of the content property."
}
{
    "Origin": "Clears the value of the 'cf_name' field",
    "Reference": "Clears the value of the 'cfName' field.",
    "HebCup": "Clears the value of the 'cfName' field"
}
{
    "Origin": "Use {@link HostAccessPolicy#EXPLICIT} or\n{@link HostAccessPolicy#ALL}.",
    "Reference": "Use {@link HostAccess#EXPLICIT} or\n{@link HostAccess#ALL}.",
    "HebCup": "Use {@link HostAccess#EXPLICIT} or {@link HostAccess#ALL}."
}
{
    "Origin": "Gets the value of the paragraphContent property.",
    "Reference": "Gets the value of the content property.",
    "HebCup": "Gets the value of the content property."
}
{
    "Origin": "Deletes a single document from the Solr server.",
    "Reference": "Deletes a single document from the Solr client.",
    "HebCup": "Deletes a single document from the Solr Client."
}
{
    "Origin": "Sets the client transport.",
    "Reference": "Sets the client protocol.",
    "HebCup": "Sets the Client Protocol."
}
{
    "Origin": "If --interface parameter has been specified, --all parameter will not be visible\nto prevent conflicts.",
    "Reference": "If --entity parameter has been specified, --all parameter will not be visible\nto prevent conflicts.",
    "HebCup": "If --entity parameter has been specified, --all parameter will not be visible to prevent conflicts."
}
{
    "Origin": "Returns split button part hitbox.",
    "Reference": "Returns menu button part hitbox.",
    "HebCup": "Returns Menu Button part hitbox."
}
{
    "Origin": "Gets the value of the saltData property.",
    "Reference": "Gets the value of the spinValue property.",
    "HebCup": "Gets the value of the spinValue property."
}
{
    "Origin": "Requests that the player prefetch a media item with the specific {@link Uri} for playback.",
    "Reference": "Requests that the player prepare a media item with the specific {@link Uri} for playback.",
    "HebCup": "Requests that the player prepare a media item with the specific {@link Uri} for playback."
}
{
    "Origin": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaterniond, double)}\nusing their relative interpolation weights.",
    "Reference": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaterniondc, double)}\nusing their relative interpolation weights.",
    "HebCup": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaterniondc, double)} using their relative interpolation weights."
}
{
    "Origin": "Returns true if field traceIdList is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field localTraceIdList is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field LocalTraceIdList is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "The scheduler that decides how this task runs.",
    "Reference": "The executor that decides how this task runs.",
    "HebCup": "The Executor that decides how this task runs."
}
{
    "Origin": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobRequestConditions, boolean)}",
    "Reference": "String, BlobRange, ParallelTransferOptions, DownloadRetryOptions, BlobRequestConditions, boolean)}",
    "HebCup": "String, BlobRange, ParallelTransferOptions, DownloadRetryOptions, BlobRequestConditions, boolean)}"
}
{
    "Origin": "{@link Query#rx()}.",
    "Reference": "{@link Query#__InternalRx()}.",
    "HebCup": "{@link Query#__InternalRx ()}."
}
{
    "Origin": "Sets the {@code eventListeners} this {@link EventHandlerInvoker} will forward all its events to.",
    "Reference": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to.",
    "HebCup": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to."
}
{
    "Origin": "Decodes the given object using the configured {@link #serializer()}.",
    "Reference": "Decodes the given object using the configured {@link #userSerializer}.",
    "HebCup": "Decodes the given object using the configured {@link #serializer()}."
}
{
    "Origin": "If more than one stream has a message it decides which\nmessage to return using the {@link #comparator}.",
    "Reference": "If more than one stream has a message it decides which\nmessage to return using the {@link #trackedEventComparator}.",
    "HebCup": "If more than one stream has a message it decides which message to return using the {@link#trackedEventComparator}."
}
{
    "Origin": "Gets the warningId.",
    "Reference": "Gets the message.",
    "HebCup": "Gets the message."
}
{
    "Origin": "Provide a {@link Mutate} {@link PTransform} to delete data to a Cassandra database.",
    "Reference": "Provide a {@link Write} {@link PTransform} to delete data to a Cassandra database.",
    "HebCup": "Provide a {@link Write} {@link PTransform} to delete data to a Cassandra database."
}
{
    "Origin": "Generates a random transaction.",
    "Reference": "Generates a transaction.",
    "HebCup": "Generates a Transaction."
}
{
    "Origin": "***** Property SXEXTENSIONS *****",
    "Reference": "***** Property EXTENSIONSFOLDER *****",
    "HebCup": "***** Property EXTENSIONSFOLDER *****"
}
{
    "Origin": "Checks whether the extension of the filename is that specified.",
    "Reference": "Checks whether the extension of the fileName is that specified.",
    "HebCup": "Checks whether the extension of the fileName is that specified."
}
{
    "Origin": "The calibration is defined using {@link CurveGroupDefinition}.",
    "Reference": "The calibration is defined using {@link RatesCurveGroupDefinition}.",
    "HebCup": "The calibration is defined using {@link RatesCurveGroupDefinition}."
}
{
    "Origin": "Test of var method, of class LogisticDistribution.",
    "Reference": "Test of variance method, of class LogisticDistribution.",
    "HebCup": "Test of Variance method, of class LogisticDistribution."
}
{
    "Origin": "The {@link KeyCreateOptions#isEnabled() enabled}\nfield is set to true by Azure Key Vault, if not specified.",
    "Reference": "The {@link CreateKeyOptions#isEnabled() enabled}\nfield is set to true by Azure Key Vault, if not specified.",
    "HebCup": "The {@link CreateKeyOptions#isEnabled () enabled} field is set to true by Azure Key Vault, if not specified."
}
{
    "Origin": "Attempt to parse a {@link Repo} from the given {@link Uri}",
    "Reference": "Attempt to parse a {@link Repository} from the given {@link Uri}",
    "HebCup": "Attempt to parse a {@link Repository} from the given {@link Uri}"
}
{
    "Origin": "Returns an immutable map containing four mappings.",
    "Reference": "Returns an unmodifiable map containing four mappings.",
    "HebCup": "Returns an Unmodifiable map containing four mappings."
}
{
    "Origin": "Gets the value of the spid property.",
    "Reference": "Gets the value of the pic property.",
    "HebCup": "Gets the value of the Pic property."
}
{
    "Origin": "Scheduler:\n{@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.",
    "Reference": "Scheduler:\n{@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.",
    "HebCup": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}."
}
{
    "Origin": "Read an optional Long value form a JSON value.",
    "Reference": "Read an optional Date value form a JSON value.",
    "HebCup": "Read an Optional Date value form a JSON value."
}
{
    "Origin": "Checks if the current user has write permissions on the given resource.",
    "Reference": "Checks if the current user has view permissions on the given resource.",
    "HebCup": "Checks if the current user has VIEW permissions on the given resource."
}
{
    "Origin": "Generates a code sample for using {@link FileClient#createWithResponse(long, FileHTTPHeaders, FileSmbProperties,",
    "Reference": "Generates a code sample for using {@link FileClient#createWithResponse(long, FileHttpHeaders, FileSmbProperties,",
    "HebCup": "Generates a code sample for using {@link FileClient#createWithResponse (long, FileHttpHeaders, FileSmbProperties,"
}
{
    "Origin": "Returns true if field isAcid is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field isTransactional is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field IsTransactional is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "The file should\ncontain an X.509 certificate chain in PEM format.",
    "Reference": "The file should\ncontain an X.509 certificate collection in PEM format.",
    "HebCup": "The file should contain an X.509 certificate Collection in PEM format."
}
{
    "Origin": "Returns the value of the {@code bitfield} field.",
    "Reference": "Returns the value of the {@code baselineUsesContext} field.",
    "HebCup": "Returns the value of the {@code baselineUsesContext} field."
}
{
    "Origin": "Gets a {@link Set} of directories containing the symbol files corresponding to the architecture of the session currently selected.",
    "Reference": "Gets a {@link List} of directories containing the symbol files corresponding to the architecture of the session currently selected.",
    "HebCup": "Gets a {@link List} of directories containing the symbol files corresponding to the architecture of the session currently selected."
}
{
    "Origin": "Test for {@link Array#cons(Value)} and {@link Array#snoc(Value)}.",
    "Reference": "Test for {@link XQArray#cons(Value)} and {@link XQArray#snoc(Value)}.",
    "HebCup": "Test for {@link XQArray#cons (Value)} and {@link XQArray#snoc (Value)}."
}
{
    "Origin": "Setter of publicationDateMax.",
    "Reference": "Setter of publicationDateMin.",
    "HebCup": "Setter of publicationDateMin."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Gets the value of the 'cf_name' field",
    "Reference": "Gets the value of the 'cfName' field.",
    "HebCup": "Gets the value of the 'cfName' field"
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Scheduler.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Executor.",
    "HebCup": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor."
}
{
    "Origin": "Retrieve all ports attached to a server.",
    "Reference": "Retrieve all ports attached to a device.",
    "HebCup": "Retrieve all ports attached to a Device."
}
{
    "Origin": "Test of var method, of class ChiSquareDistribution.",
    "Reference": "Test of variance method, of class ChiSquareDistribution.",
    "HebCup": "Test of Variance method, of class ChiSquareDistribution."
}
{
    "Origin": "Aggregates the service, app, and plan policies into a single ordered list.",
    "Reference": "Aggregates the api, app, and plan policies into a single ordered list.",
    "HebCup": "Aggregates the Api, app, and plan policies into a single ordered list."
}
{
    "Origin": "Returns an immutable set containing four elements.",
    "Reference": "Returns an unmodifiable set containing four elements.",
    "HebCup": "Returns an Unmodifiable set containing four elements."
}
{
    "Origin": "Return \"t.foo\" from \"region__t__foo\"",
    "Reference": "Return \"t.foo\" from \"/region__/t__foo\"",
    "HebCup": "Return ``t.foo`` from ``/region__t__foo``"
}
{
    "Origin": "Creates a new instance of {@link Address} from thrift representation.",
    "Reference": "Creates a new instance of {@link Address} from proto representation.",
    "HebCup": "Creates a new instance of {@link Address} from Proto representation."
}
{
    "Origin": "If --controller parameter has been specified, --all parameter will not be visible\nto prevent conflicts.",
    "Reference": "If --entity parameter has been specified, --all parameter will not be visible\nto prevent conflicts.",
    "HebCup": "If --entity parameter has been specified, --all parameter will not be visible to prevent conflicts."
}
{
    "Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubDirectoryWithResponse#string}",
    "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse#string}",
    "HebCup": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse#string}"
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Returns the {@link View.OnClickListener} of the {@code CarMenuItem}.",
    "Reference": "Returns the {@link OnClickListener} of the {@code CarMenuItem}.",
    "HebCup": "Returns the {@link OnClickListener} of the {@code CarMenuItem}."
}
{
    "Origin": "The {@link KeyCreateOptions} is required.",
    "Reference": "The {@link CreateKeyOptions} is required.",
    "HebCup": "The {@link CreateKeyOptions} is required."
}
{
    "Origin": "List recording descriptors from a recording id with a limit of record count for a given channel and stream id.",
    "Reference": "List recording descriptors from a recording id with a limit of record count for a given channelFragment and\nstream id.",
    "HebCup": "List recording descriptors from a recording id with a limit of record count for a given channelFragment and stream id."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Gets the edit group configuration resource type.",
    "Reference": "Gets the element view configuration resource type.",
    "HebCup": "Gets the Element View configuration resource type."
}
{
    "Origin": "Sets the record's sequence number.",
    "Reference": "Update the record's sequence number.",
    "HebCup": "update the record's sequence number."
}
{
    "Origin": "HmRqBody can describe in readable way.",
    "Reference": "HmBody can describe in readable way.",
    "HebCup": "HmBody can describe in readable way."
}
{
    "Origin": "Gets the default SSLHostConfig name.",
    "Reference": "Gets the default SslHostConfig name.",
    "HebCup": "Gets the default SslHostConfig name."
}
{
    "Origin": "Renders this vertex into the given {@link VertexBuffer}, assuming that the {@link VertexFormat} is\n{@link DefaultVertexFormats#BLOCK}.",
    "Reference": "Renders this vertex into the given {@link BufferBuilder}, assuming that the {@link VertexFormat} is\n{@link DefaultVertexFormats#BLOCK}.",
    "HebCup": "Renders this vertex into the given {@link BufferBuilder}, assuming that the {@link VertexFormat} is {@link DefaultVertexFormats#BLOCK}."
}
{
    "Origin": "Services incoming range write calls.",
    "Reference": "Services incoming multi write calls.",
    "HebCup": "Services incoming multi Write calls."
}
{
    "Origin": "Get Stop Function Snippet Block.",
    "Reference": "Get Graceful Stop Function Snippet Block.",
    "HebCup": "get Graceful Stop Function Snippet Block."
}
{
    "Origin": "Test of var method, of class Poisson.",
    "Reference": "Test of variance method, of class Poisson.",
    "HebCup": "Test of Variance method, of class Poisson."
}
{
    "Origin": "This method iteratively calls {@link\n#doFeatureIteration(TrainingEstimator, Collection, RealVector, RealVector, double)}  to train\nthe feature.",
    "Reference": "This method iteratively calls {@link\n#doFeatureIteration(TrainingEstimator, List, RealVector, RealVector, double)}  to train\nthe feature.",
    "HebCup": "This method iteratively calls {@link#doFeatureIteration (TrainingEstimator, List, RealVector, RealVector, double)} to train the feature."
}
{
    "Origin": "Gets the {@link Value.Mutable} for the {@link ParrotVariant} of this\n{@link Parrot}.",
    "Reference": "Gets the {@link Value.Mutable} for the {@link ParrotType} of this\n{@link Parrot}.",
    "HebCup": "Gets the {@link Value.Mutable} for the {@link ParrotType} of this {@link Parrot}."
}
{
    "Origin": "Gets the value of the category property.",
    "Reference": "Gets the value of the item property.",
    "HebCup": "Gets the value of the Item property."
}
{
    "Origin": "The file should\ncontain an X.509 certificate chain in PEM format.",
    "Reference": "The file should\ncontain an X.509 certificate collection in PEM format.",
    "HebCup": "The file should contain an X.509 certificate Collection in PEM format."
}
{
    "Origin": "Returns the {@link ImageCapture.CaptureMode}.",
    "Reference": "Returns the {@link CaptureMode}.",
    "HebCup": "Returns the {@link CaptureMode}."
}
{
    "Origin": "Getter for bookModified property",
    "Reference": "Getter for bookModifiedOrUpgraded property",
    "HebCup": "Getter for bookModifiedOrUpgraded property"
}
{
    "Origin": "Efficient version of {@link #lockChild(InodeView, LockPattern)} for when the child path\ncomponents are already known.",
    "Reference": "Efficient version of {@link #lockChild(Inode, LockPattern)} for when the child path\ncomponents are already known.",
    "HebCup": "Efficient version of {@link #lockChild(Inode, LockPattern)} for when the child path components are already known."
}
{
    "Origin": "Remove a cache entry for a sentence",
    "Reference": "Remove a cache entries for a sentence",
    "HebCup": "Remove a cache entries for a sentence"
}
{
    "Origin": "Invokes parent.resolveRequires to resolve the given root modules.",
    "Reference": "Invokes parent.resolve to resolve the given root modules.",
    "HebCup": "Invokes parent.resolve to resolve the given root modules."
}
{
    "Origin": "Check equality of two String objects.",
    "Reference": "Check equality of two CharSequence objects.",
    "HebCup": "Check equality of two CharSequence objects."
}
{
    "Origin": "Returns the {@code Cipher} to use for encrypting and decrypting serialized identity data to prevent easy\ninspection of Subject identity data.",
    "Reference": "Returns the {@code CipherService} to use for encrypting and decrypting serialized identity data to prevent easy\ninspection of Subject identity data.",
    "HebCup": "Returns the {@code CipherService} to use for encrypting and decrypting serialized identity data to prevent easy inspection of Subject identity data."
}
{
    "Origin": "This method is not thread-safe for the {@code\ninsertionOrderUnits} and should be called atomically relative to the {@code\ninsertionOrderUnits}.",
    "Reference": "This method is not thread-safe for the {@code\nindexedRemainingUnits} and should be called atomically relative to the {@code\nindexedRemainingUnits}.",
    "HebCup": "This method is not thread-safe for the {@code IndexedRemainingUnits} and should be called atomically relative to the {@code IndexedRemainingUnits}."
}
{
    "Origin": "Adds a {@link TemporalMemory} to this {@code Layer}",
    "Reference": "Adds a {@link OldTemporalMemory} to this {@code Layer}",
    "HebCup": "Adds a {@link OldTemporalMemory} to this {@code Layer}"
}
{
    "Origin": "Use {@link HostAccess#EXPLICIT} or {@link HostAccess#PUBLIC}.",
    "Reference": "Use {@link HostAccessPolicy#EXPLICIT} or\n{@link HostAccessPolicy#PUBLIC}.",
    "HebCup": "Use {@link HostAccessPolicy#EXPLICIT} or {@link HostAccessPolicy#PUBLIC}."
}
{
    "Origin": "Before initializing any WebModule we call each WebModule's prepare method\nto allow for a WebModule to leave information useful for other modules on\nthe shared ServletContext.",
    "Reference": "Before initializing any WebModule we call each WebModule's prepare method\nto allow for a WebModule to leave information useful for other modules on\nthe shared WebModuleContext.",
    "HebCup": "Before initializing any WebModule we call each WebModule's prepare method to allow for a WebModule to leave information useful for other modules on the shared WebModuleContext."
}
{
    "Origin": "Converts this module to a strict module with the given dependences",
    "Reference": "Converts this module to a normal module with the given dependences",
    "HebCup": "Converts this module to a Normal Module with the given dependences"
}
{
    "Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateEcKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Test of npara method, of class LogisticDistribution.",
    "Reference": "Test of length method, of class LogisticDistribution.",
    "HebCup": "Test of Length method, of class LogisticDistribution."
}
{
    "Origin": "testGetProcedure",
    "Reference": "testGetVoltProcedure",
    "HebCup": "testGetVoltProcedure"
}
{
    "Origin": "If the {@code null} is returned,\n{@link ControllerResult#RESULT_CODE_UNKNOWN_ERROR} will be returned.",
    "Reference": "If the {@code null} is returned,\n{@link SessionResult#RESULT_CODE_UNKNOWN_ERROR} will be returned.",
    "HebCup": "If the {@code null} is returned, {@link SessionResult#RESULT_CODE_UNKNOWN_ERROR} will be returned."
}
{
    "Origin": "Returns an immutable set containing ten elements.",
    "Reference": "Returns an unmodifiable set containing ten elements.",
    "HebCup": "Returns an Unmodifiable set containing ten elements."
}
{
    "Origin": "Sets the paramSitetitle.",
    "Reference": "Sets the site name.",
    "HebCup": "Sets the sitename."
}
{
    "Origin": "Tests the {@link SecurityUtils#getGroupFromThriftClient()} ()} method.",
    "Reference": "Tests the {@link SecurityUtils#getGroupFromGrpcClient()} ()} method.",
    "HebCup": "Tests the {@link SecurityUtils#getGroupFromGrpcClient ()} ()} method."
}
{
    "Origin": "Unsafe version of {@link #data_l(PointerBuffer) data_l}.",
    "Reference": "Unsafe version of {@link #data_l(CLongBuffer) data_l}.",
    "HebCup": "Unsafe version of {@link #data_l(CLongBuffer) data_l}."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.startCopyFromURL#URL}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.startCopyFromURL#String}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.startCopyFromURL#String}"
}
{
    "Origin": "In other words, the returned {@link BasicGraph}\nwill not be updated after modifications to {@code graph}.",
    "Reference": "In other words, the returned {@link Graph} will not\nbe updated after modifications to {@code graph}.",
    "HebCup": "In other words, the returned {@link Graph} will not be updated after modifications to {@code graph}."
}
{
    "Origin": "Creates an instance of {@link RowFactory} using {@link DefaultRowTypeFactory}\nand {@link GeneratedGetterFactory}.",
    "Reference": "Creates an instance of {@link RowFactory} using {@link DefaultSchemaFactory}\nand {@link GeneratedGetterFactory}.",
    "HebCup": "Creates an instance of {@link RowFactory} using {@link DefaultSchemaFactory} and {@link GeneratedGetterFactory}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "The negative of {@code startsNotWith} is {@link #startsWith}.",
    "Reference": "The negative of {@code startsNotWith} is {@link #startingWith}.",
    "HebCup": "The negative of {@code startsNotWith} is {@link#startingWith}."
}
{
    "Origin": "Validates whether {@code modulus} is at least 2048-bit.",
    "Reference": "Validates whether {@code modulusSize} is at least 2048-bit.",
    "HebCup": "Validates whether {@code modulusSize} is at least 2048-bit."
}
{
    "Origin": "Get condition values.",
    "Reference": "Get values.",
    "HebCup": "get Values."
}
{
    "Origin": "Maven coordinates: org.apache.camel:camel-spark-rest",
    "Reference": "Maven coordinates: org.apache.camel:camel-spark",
    "HebCup": "Maven coordinates: org.apache.camel:camel-spark"
}
{
    "Origin": "Converts an entity (POJO) to a DBObject.",
    "Reference": "Converts an entity (POJO) to a Document.",
    "HebCup": "Converts an entity (POJO) to a Document."
}
{
    "Origin": "Build a Map with projection field names and \"path\" field names\nand adds it to the typesFieldMaps Map.",
    "Reference": "Build a Map with field names and \"path\" field names\nand adds it to the typesFieldMaps Map.",
    "HebCup": "Build a Map with Field Names and ``path`` field names and adds it to the typesFieldMaps Map."
}
{
    "Origin": "The difference in seconds is calculated using {@link Temporal#periodUntil(Temporal, TemporalUnit)}.",
    "Reference": "The difference in seconds is calculated using {@link Temporal#until(Temporal, TemporalUnit)}.",
    "HebCup": "The difference in seconds is calculated using {@link Temporal#until (Temporal, TemporalUnit)}."
}
{
    "Origin": "FilterEvaluator should return {@link Optional#absent()} when the link doesn't match any filters",
    "Reference": "FilterEvaluator should return {@link Optional.empty()} when the link doesn't match any filters",
    "HebCup": "FilterEvaluator should return {@link Optional#empty()} when the link doesn't match any filters"
}
{
    "Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method with a\nnon-empty directory.",
    "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method with a\nnon-empty directory.",
    "HebCup": "Tests the {@link FileSystemMaster#delete (AlluxioURI, DeleteContext)} method with a non-empty directory."
}
{
    "Origin": "Test to convert between a thrift type and a wire type.",
    "Reference": "Test to convert between a proto type and a wire type.",
    "HebCup": "Test to convert between a proto type and a wire type."
}
{
    "Origin": "Adapts the arguments according to the properties of the {@link TypeInferenceUtil.Result}.",
    "Reference": "Adapts the arguments according to the properties of the {@link Result}.",
    "HebCup": "Adapts the arguments according to the properties of the {@link Result}."
}
{
    "Origin": "Conditionally update the {@link #serviceTable} iff it does not exist or\nis empty.",
    "Reference": "Conditionally update the {@link #serviceTableRef} iff it does not exist or\nis empty.",
    "HebCup": "Conditionally update the {@link#serviceTableRef} iff it does not exist or is empty."
}
{
    "Origin": "Generates a code sample for using {@link FileClient#setProperties(long, FileHTTPHeaders, FileSmbProperties,",
    "Reference": "Generates a code sample for using {@link FileClient#setProperties(long, FileHttpHeaders, FileSmbProperties,",
    "HebCup": "Generates a code sample for using {@link FileClient#setProperties (long, FileHttpHeaders, FileSmbProperties,"
}
{
    "Origin": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_SELECT_PACKAGES_PROPERTY} from stack",
    "Reference": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_PACKAGES_PROPERTY} from stack",
    "HebCup": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_PACKAGES_PROPERTY} from stack"
}
{
    "Origin": "If it's successfully completed, {@link BrowserResult#getMediaItem()} will return the media\nitem.",
    "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItem()} will return the media\nitem.",
    "HebCup": "If it's successfully completed, {@link LibraryResult#getMediaItem ()} will return the media item."
}
{
    "Origin": "The formally correct mechanism of disconnecting the returned {@link FCPPluginClient} is to\nnull out the strong reference to it.",
    "Reference": "The formally correct mechanism of disconnecting the returned {@link FCPPluginConnection}\nis to null out the strong reference to it.",
    "HebCup": "The formally correct mechanism of disconnecting the returned {@link FCPPluginConnection} is to null out the strong reference to it."
}
{
    "Origin": "Bind all providers contained in {@code p roviderBag} (classes and instances) using instance manager.",
    "Reference": "Bind all providers contained in {@code p roviderBag} (classes and instances) using injection manager.",
    "HebCup": "Bind all providers contained in {@code p roviderBag} (classes and instances) using Injection Manager."
}
{
    "Origin": "Returns the {@link MatcherBuilder} representing the set of characters that can be matched by\nthis {@link CharacterClass}.",
    "Reference": "Returns the {@link CharSet} representing the set of characters that can be matched by this\n{@link CharacterClass}.",
    "HebCup": "Returns the {@link CharSet} representing the set of characters that can be matched by this {@link CharacterClass}."
}
{
    "Origin": "Return a {@link JettyRemoteRepositoryManager} for talking to the\n{@link NanoSparqlServer} instance associated with an {@link HAGlue}\ninterface.",
    "Reference": "Return a {@link RemoteRepositoryManager} for talking to the\n{@link NanoSparqlServer} instance associated with an {@link HAGlue}\ninterface.",
    "HebCup": "Return a {@link RemoteRepositoryManager} for talking to the {@link NanoSparqlServer} instance associated with an {@link HAGlue} interface."
}
{
    "Origin": "Match statement against pattern for create schedule",
    "Reference": "Match statement against pattern for create task",
    "HebCup": "Match statement against pattern for Create Task"
}
{
    "Origin": "Returns a {@link ResolvingConverter} for the given attribute definition",
    "Reference": "Returns a {@link Converter} for the given attribute definition",
    "HebCup": "Returns a {@link Converter} for the given attribute definition"
}
{
    "Origin": "See {@link #withChrono(Chronology)} for more details on overriding.",
    "Reference": "See {@link #withChronology(Chronology)} for more details on overriding.",
    "HebCup": "See {@link #withChronology(Chronology)} for more details on overriding."
}
{
    "Origin": "Sets the specified value to the {@code autoFlush} field.",
    "Reference": "Sets the specified value to the {@code favorDecSpeed} field.",
    "HebCup": "Sets the specified value to the {@code favorDecSpeed} field."
}
{
    "Origin": "Setter for {@link #exposeOnlyRequestedHeader}",
    "Reference": "Setter for {@link #allowOnlyRequestedHeader}",
    "HebCup": "Setter for {@link#allowOnlyRequestedHeader}"
}
{
    "Origin": "Reads from bytes serialized in TBinaryProtocol",
    "Reference": "Reads from buffer serialized in TBinaryProtocol",
    "HebCup": "Reads from buffer serialized in TBinaryProtocol"
}
{
    "Origin": "Returns  if the provided key is an \"empty slot\"\nmarker.",
    "Reference": "Returns  if the provided value is an \"empty slot\"\nmarker.",
    "HebCup": "Returns if the provided value is an ``empty slot`` marker."
}
{
    "Origin": "Returns the base section paint.",
    "Reference": "Returns the default section paint.",
    "HebCup": "Returns the Default Section paint."
}
{
    "Origin": "Reverse-\ntransforms using the FECReceiver for the SSRC found in\npkts.",
    "Reference": "Reverse-\ntransforms using the AbstractFECReceiver for the SSRC found in\npkts.",
    "HebCup": "Reverse- transforms using the AbstractFECReceiver for the SSRC found in pkts."
}
{
    "Origin": "Key.create(webSafeString) is easier to type than new Key(webSafeString)",
    "Reference": "Key.create(urlSafeString) is easier to type than new Key(urlSafeString)",
    "HebCup": "Key.create(urlSafeString) is easier to type than new Key(urlSafeString)"
}
{
    "Origin": "Creates a DBObject from this Shape",
    "Reference": "Creates a Document from this Shape",
    "HebCup": "Creates a Document from this Shape"
}
{
    "Origin": "If {@code labels = \"abc*\"}, settings with a label starting with \"abc\" are returned.",
    "Reference": "If {@code labelFilter = \"abc*\"}, settings with a label starting with \"abc\" are returned.",
    "HebCup": "If {@code LabelFilter = ``abc*``}, settings with a label starting with ``abc`` are returned."
}
{
    "Origin": "Tests if this string starts with any specified prefixes.",
    "Reference": "Tests if this CharSequence starts with any specified prefixes.",
    "HebCup": "Tests if this CharSequence starts with any specified prefixes."
}
{
    "Origin": "Gets the value of the 'InMemory' field.",
    "Reference": "Gets the value of the 'inMemory' field.",
    "HebCup": "Gets the value of the 'inMemory' field."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "Checks the dirty status of the 'stmPriority' field.",
    "Reference": "Checks the dirty status of the 'reprUrl' field.",
    "HebCup": "Checks the dirty status of the 'ReprUrl' field."
}
{
    "Origin": "Returns the port that the REST server endpoint should listen on.",
    "Reference": "Returns the port range that the REST server endpoint should listen on.",
    "HebCup": "Returns the PortRange that the REST server endpoint should listen on."
}
{
    "Origin": "Getter for {@link #exposeOnlyRequestedHeader}",
    "Reference": "Getter for {@link #allowOnlyRequestedHeader}",
    "HebCup": "Getter for {@link#allowOnlyRequestedHeader}"
}
{
    "Origin": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link NamespacedEntityId}.",
    "Reference": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link MetadataEntity}.",
    "HebCup": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link MetadataEntity}."
}
{
    "Origin": "Decorates {@link Service}s with the specified {@link Route}.",
    "Reference": "Decorates {@link HttpService}s with the specified {@link Route}.",
    "HebCup": "Decorates {@link HttpService}s with the specified {@link Route}."
}
{
    "Origin": "Obtains an instance from the specified unique name.",
    "Reference": "Obtains an instance from the specified name.",
    "HebCup": "Obtains an instance from the specified name."
}
{
    "Origin": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link CurveId} as the identifier.",
    "Reference": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link RatesCurveId} as the identifier.",
    "HebCup": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier."
}
{
    "Origin": "Test affinity awareness Sql cache size property.",
    "Reference": "Test Partition Awareness Sql cache size property.",
    "HebCup": "test Partition Awareness Sql Cache Size Property."
}
{
    "Origin": "Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance,\nor null if SSL should not be used.",
    "Reference": "Returns an SslContextFactory.Server that should be used by a jetty server based on this SSLConfig instance,\nor null if SSL should not be used.",
    "HebCup": "Returns an SslContextFactory.Server that should be used by a jetty server based on this SSLConfig instance, or null if SSL should not be used."
}
{
    "Origin": "If {@code keys = \"*abc*\"}, settings with a key containing \"abc\" are returned.",
    "Reference": "If {@code keyFilter = \"*abc*\"}, settings with a key containing \"abc\" are returned.",
    "HebCup": "If {@code KeyFilter = ``*abc*``}, settings with a key containing ``abc`` are returned."
}
{
    "Origin": "Gets the path from a full filename, which excludes the prefix, and\nalso excluding the final directory separator.",
    "Reference": "Gets the path from a full fileName, which excludes the prefix, and\nalso excluding the final directory separator.",
    "HebCup": "Gets the path from a full fileName, which excludes the prefix, and also excluding the final directory separator."
}
{
    "Origin": "Get the Date that this Token expires",
    "Reference": "Get the ZonedDateTime that this Token expires",
    "HebCup": "Get the ZonedDateTime that this Token expires"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Sets the current data source for this DataCommunicator.",
    "Reference": "Sets the current data provider for this DataCommunicator.",
    "HebCup": "Sets the current Data Provider for this DataCommunicator."
}
{
    "Origin": "Sets the base section paint.",
    "Reference": "Sets the default section paint.",
    "HebCup": "Sets the Default Section paint."
}
{
    "Origin": "Creates a {@code For}-comprehension of 4 Iterables.",
    "Reference": "Creates a {@code For}-comprehension of 4 Options.",
    "HebCup": "Creates a {@code For}-comprehension of 4 Iterables."
}
{
    "Origin": "Get extra information for a given realm",
    "Reference": "Get extra information for a given provider",
    "HebCup": "Get extra information for a given Provider"
}
{
    "Origin": "Get the fileContentMD5 property: Sets the file's MD5 hash.",
    "Reference": "Get the contentMD5 property: Sets the file's MD5 hash.",
    "HebCup": "Get the ContentMD5 property: Sets the file's MD5 hash."
}
{
    "Origin": "Add an attribute.",
    "Reference": "Add an property.",
    "HebCup": "Add an Property."
}
{
    "Origin": "Returns a new {@link Partitioner.OnVNodes} based on the partition key token.",
    "Reference": "Returns a new {@link Partitioner.OnVirtualNodes} based on the partition key token.",
    "HebCup": "Returns a new {@link Partitioner.OnVirtualNodes} based on the partition key token."
}
{
    "Origin": "get Local video duration",
    "Reference": "get Local  duration",
    "HebCup": "get Local Duration"
}
{
    "Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateEcKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Setter for {@link #allowOrigins}",
    "Reference": "Setter for {@link #allowedOrigins}",
    "HebCup": "Setter for {@link#allowedOrigins}"
}
{
    "Origin": "Gets an abstract representation of the engine's {@link Filesystem}.",
    "Reference": "Gets an abstract representation of the engine's {@link FileSystem}.",
    "HebCup": "Gets an abstract representation of the engine's {@link FileSystem}."
}
{
    "Origin": "Check equality between a String and a char[] object.",
    "Reference": "Check equality between a CharSequence and a char[] object.",
    "HebCup": "Check equality between a CharSequence and a char[] object."
}
{
    "Origin": "Returns the last sync d l object in the ordered set where companyId = ?",
    "Reference": "Returns the last sync d l object in the ordered set where repositoryId = ?",
    "HebCup": "Returns the last sync d l object in the ordered set where repositoryId = ?"
}
{
    "Origin": "Provides a list of all connection wrappers corresponding to a given environment.",
    "Reference": "Provides a list of all connection configs corresponding to a given environment.",
    "HebCup": "Provides a list of all connection Configs corresponding to a given environment."
}
{
    "Origin": "Remove the mapping for the field name, and notify listeners about\nthe change including the {@link EntryEventSource}.",
    "Reference": "Remove the mapping for the field name, and notify listeners about\nthe change including the {@link EntriesEventSource}.",
    "HebCup": "Remove the mapping for the field name, and notify listeners about the change including the {@link EntriesEventSource}."
}
{
    "Origin": "Validates failover on redeploy of a @Stateful bean containing injected resource manager connection factories",
    "Reference": "Validates failover on redeploy of a @Stateful bean containing injected JDBC resource manager connection factories",
    "HebCup": "Validates failover on redeploy of a @Stateful bean containing injected JDBC Resource Manager Connection factories"
}
{
    "Origin": "Get cache affinity awareness group which is compatible with the mapping.",
    "Reference": "Get cache Partition Awareness group which is compatible with the mapping.",
    "HebCup": "Get Cache Partition Awareness Group which is compatible with the mapping."
}
{
    "Origin": "Get the map of all processed certificates until now.",
    "Reference": "Get the set of all processed certificates until now.",
    "HebCup": "Get the Set of all processed certificates until now."
}
{
    "Origin": "Creates an exception from an service id and version.",
    "Reference": "Creates an exception from an API id and version.",
    "HebCup": "Creates an exception from an api Id and version."
}
{
    "Origin": "Generates an in-memory key for an service, used to index the app for later quick\nretrieval.",
    "Reference": "Generates an in-memory key for an API, used to index the app for later quick\nretrieval.",
    "HebCup": "Generates an in-memory key for an Api, used to index the app for later quick retrieval."
}
{
    "Origin": "Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}.",
    "Reference": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}.",
    "HebCup": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}."
}
{
    "Origin": "Create new {@link BaseEvent} with {@link org.mule.runtime.api.message.Error} instance set.",
    "Reference": "Create new {@link CoreEvent} with {@link org.mule.runtime.api.message.Error} instance set.",
    "HebCup": "Create new {@link CoreEvent} with {@link org.mule.runtime.api.message.Error} instance set."
}
{
    "Origin": "So, if the given {@link Quaterniond} is\nthe identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .",
    "Reference": "So, if the given {@link Quaterniondc} is\nthe identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .",
    "HebCup": "So, if the given {@link Quaterniondc} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given ."
}
{
    "Origin": "After the {@link ServiceLocator} is created, we specifically do not call\nany more methods on it: the locator must instantiate the Immediate\nservice without any further prompting to the locator.",
    "Reference": "After the {@link InstanceManager} is created, we specifically do not call\nany more methods on it: the locator must instantiate the Immediate\nservice without any further prompting to the locator.",
    "HebCup": "After the {@link InstanceManager} is created, we specifically do not call any more methods on it: the locator must instantiate the Immediate service without any further prompting to the locator."
}
{
    "Origin": "Sets the value of the descrption property.",
    "Reference": "Sets the value of the description property.",
    "HebCup": "Sets the value of the Description property."
}
{
    "Origin": "Test of contextual method, of class Grades.",
    "Reference": "Test of contextual method, of class GradeUtil.",
    "HebCup": "Test of contextual method, of class Grades."
}
{
    "Origin": "Locks existing inodes on the specified path, in the specified {@link LockMode}.",
    "Reference": "Locks existing inodes on the specified path, in the specified {@link LockPattern}.",
    "HebCup": "Locks existing inodes on the specified path, in the specified {@link LockPattern}."
}
{
    "Origin": "The meta-property for the {@code weekendDays} property.",
    "Reference": "The meta-property for the {@code startYear} property.",
    "HebCup": "The meta-property for the {@code startYear} property."
}
{
    "Origin": "Default implementation returns {@link ControllerResult#RESULT_CODE_NOT_SUPPORTED}.",
    "Reference": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.",
    "HebCup": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}."
}
{
    "Origin": "Sets the quorum name for operations.",
    "Reference": "Sets the split brain protection name for operations.",
    "HebCup": "Sets the split Brain Protection Name for operations."
}
{
    "Origin": "Set the values for some metadata keys on a collection alias.",
    "Reference": "Set the values for some properties keys on a collection alias.",
    "HebCup": "Set the values for some Properties keys on a collection alias."
}
{
    "Origin": "Return a {@link ByteArrayInputStream} over some bytes at the beginning of the data.",
    "Reference": "Return a {@link HandshakeMessageInput} over some bytes at the beginning of the data.",
    "HebCup": "Return a {@link HandshakeMessageInput} over some bytes at the beginning of the data."
}
{
    "Origin": "The official ISO-8601 standard does not define eras, however {@code ISOChronology} does.",
    "Reference": "The official ISO-8601 standard does not define eras, however {@code ISOChrono} does.",
    "HebCup": "The official ISO-8601 standard does not define eras, however {@code ISOChrono} does."
}
{
    "Origin": "Returns the StatusSelectorMenu corresponding to the given\nprotocolProvider.",
    "Reference": "Returns the StatusEntry corresponding to the given\nprotocolProvider.",
    "HebCup": "Returns the StatusEntry corresponding to the given protocolProvider."
}
{
    "Origin": "Inserts the given rich-text content at the position returned from\n{@code getAbsolutePosition(paragraphIndex, columnIndex)}.",
    "Reference": "Inserts the given rich-text content at the position returned from\n{@code getAbsolutePosition(paragraphIndex, columnPosition)}.",
    "HebCup": "Inserts the given rich-text content at the position returned from {@code getAbsolutePosition (paragraphIndex, columnPosition)}."
}
{
    "Origin": "Gets the maxPassagesPerDocument.",
    "Reference": "Gets the maxPerDocument.",
    "HebCup": "Gets the maxPerDocument."
}
{
    "Origin": "First get priority from {@link FootFlagEncoder#handlePriority(ReaderWay, int)} then evaluate wheelchair specific\ntags.",
    "Reference": "First get priority from {@link FootFlagEncoder#handlePriority(ReaderWay, Integer)} then evaluate wheelchair specific\ntags.",
    "HebCup": "First get priority from {@link FootFlagEncoder#handlePriority (ReaderWay, Integer)} then evaluate wheelchair specific tags."
}
{
    "Origin": "If currently visiting a method, get the method's Method object",
    "Reference": "If currently visiting a field, get the field's Field object",
    "HebCup": "If currently visiting a field, get the field's field object"
}
{
    "Origin": "Gets or creates the power level objective on the main scoreboard.",
    "Reference": "Gets or creates the power level objective on the main targetBoard.",
    "HebCup": "Gets or creates the power level objective on the main scoreboard."
}
{
    "Origin": "testReadEvictedTuples",
    "Reference": "testEvictTuples",
    "HebCup": "testEvictTuples"
}
{
    "Origin": "Returns {@code true} if there are properties in the processConfigDef instance.",
    "Reference": "Returns {@code true} if there are properties in the stepConfigDef instance.",
    "HebCup": "Returns {@code true} if there are properties in the stepConfigDef instance."
}
{
    "Origin": "Test of npara method, of class Exponential.",
    "Reference": "Test of length method, of class Exponential.",
    "HebCup": "Test of Length method, of class Exponential."
}
{
    "Origin": "and repositoryId = ?.",
    "Reference": "and parentFolderId = ?.",
    "HebCup": "and parentFolderId = ?."
}
{
    "Origin": "Returns the first sync d l object in the ordered set where companyId = ?",
    "Reference": "Returns the first sync d l object in the ordered set where repositoryId = ?",
    "HebCup": "Returns the first sync d l object in the ordered set where repositoryId = ?"
}
{
    "Origin": "Read one constant from the given file, the type depends on a tag byte.",
    "Reference": "Read one constant from the given input, the type depends on a tag byte.",
    "HebCup": "Read one constant from the given input, the type depends on a tag byte."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.",
    "HebCup": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners."
}
{
    "Origin": "The {@link KeyCreateOptions#getKeyType() keyType} indicates the type of key to create.",
    "Reference": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create.",
    "HebCup": "The {@link CreateKeyOptions#getKeyType () keyType} indicates the type of key to create."
}
{
    "Origin": "Obtains a failure from a reason, exception and message.",
    "Reference": "Obtains a failure from a reason, throwable and message.",
    "HebCup": "Obtains a failure from a reason, Throwable and message."
}
{
    "Origin": "Returns the ContactDetail.SubCategory corresponding to the given label.",
    "Reference": "Returns the SubCategory corresponding to the given label.",
    "HebCup": "Returns the SubCategory corresponding to the given label."
}
{
    "Origin": "Get instance manager.",
    "Reference": "Get injection manager.",
    "HebCup": "get Injection Manager."
}
{
    "Origin": "Is has query assisted column or not.",
    "Reference": "Contains query assisted column or not.",
    "HebCup": "contains Query Assisted Column or not."
}
{
    "Origin": "This method returns the value of the database column m_monitor_item.user",
    "Reference": "This method returns the value of the database column m_monitor_item.username",
    "HebCup": "This method returns the value of the database column m_monitor_item.Username"
}
{
    "Origin": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given\n{@link ResourceLoader}.",
    "Reference": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given\n{@link ClassLoader}.",
    "HebCup": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given {@link ClassLoader}."
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveFromRangeEnd} {@code >}}"
}
{
    "Origin": "Test of npara method, of class ChiSquareDistribution.",
    "Reference": "Test of length method, of class ChiSquareDistribution.",
    "HebCup": "Test of Length method, of class ChiSquareDistribution."
}
{
    "Origin": "Create a {@link ClusterLoadBalancerScript} unless one exists.",
    "Reference": "Create a {@link ClusterSelectorScript} unless one exists.",
    "HebCup": "Create a {@link ClusterSelectorScript} unless one exists."
}
{
    "Origin": "(Try to) connect this marker with a suitable barline.",
    "Reference": "(Try to) connect this marker with a suitable StaffBarline.",
    "HebCup": "(Try to) connect this marker with a suitable barline."
}
{
    "Origin": "{@link Query#rxPlain()}.",
    "Reference": "{@link Query#__internalRxPlain()}.",
    "HebCup": "{@link Query#__internalRxPlain ()}."
}
{
    "Origin": "Returns the whitelisted class names.",
    "Reference": "Returns the white class names.",
    "HebCup": "Returns the White Class Names."
}
{
    "Origin": "Verifies that the username matches the user whose connections are being managed by this\nfactory and closes the pool if this is the case; otherwise does nothing.",
    "Reference": "Verifies that the user name matches the user whose connections are being managed by this factory and closes the\npool if this is the case; otherwise does nothing.",
    "HebCup": "Verifies that the userName matches the user whose connections are being managed by this factory and closes the pool if this is the case; otherwise does nothing."
}
{
    "Origin": "In quiet mode, only the errors (dependants plugins) are printed.",
    "Reference": "In quiet mode, only the errors (dependents plugins) are printed.",
    "HebCup": "In quiet mode, only the errors (Dependents plugins) are printed."
}
{
    "Origin": "Add a classpath element.",
    "Reference": "Add a classpath entry.",
    "HebCup": "Add a Classpath Entry."
}
{
    "Origin": "Check whether the given request match the realm for which this handler is responsible",
    "Reference": "Check whether the given request match the provider for which this handler is responsible",
    "HebCup": "Check whether the given request match the Provider for which this handler is responsible"
}
{
    "Origin": "Builds a safe decorated {@link Service} by wrapping the localDecorator with exceptionHandlingDecorators.",
    "Reference": "Builds a safe decorated {@link HttpService} by wrapping the localDecorator with\nexceptionHandlingDecorators.",
    "HebCup": "Builds a safe decorated {@link HttpService} by wrapping the localDecorator with exceptionHandlingDecorators."
}
{
    "Origin": "Gets the value of the 'RowKey' field.",
    "Reference": "Gets the value of the 'rowKey' field.",
    "HebCup": "Gets the value of the 'rowKey' field."
}
{
    "Origin": "Getter for {@link #exposeHeaders}",
    "Reference": "Getter for {@link #allowHeaders}",
    "HebCup": "Getter for {@link#allowHeaders}"
}
{
    "Origin": "Transform to a SurfaceConfiguration object with cameraId, image format and size info",
    "Reference": "Transform to a SurfaceConfig object with cameraId, image format and size info",
    "HebCup": "Transform to a SurfaceConfig object with cameraId, image format and size info"
}
{
    "Origin": "Gets the value of the cryptAlgorithmSid property.",
    "Reference": "Gets the value of the hashValue property.",
    "HebCup": "Gets the value of the hashValue property."
}
{
    "Origin": "Returns  if the given type has {@link ITokenTypeAttribute#TF_SEPARATOR_DOCUMENT} set.",
    "Reference": "Returns  if the given type has {@link ITokenizer#TF_SEPARATOR_DOCUMENT} set.",
    "HebCup": "Returns if the given type has {@link ITokenizer#TF_SEPARATOR_DOCUMENT} set."
}
{
    "Origin": "Parses the 'Responses' annotation attachment and build swagger operation.",
    "Reference": "Parses the 'Responses' annotation attachment and build openApi operation.",
    "HebCup": "Parses the 'Responses' annotation attachment and build openApi operation."
}
{
    "Origin": "The {@link RsaKeyCreateOptions} is required.",
    "Reference": "The {@link CreateRsaKeyOptions} is required.",
    "HebCup": "The {@link CreateRsaKeyOptions} is required."
}
{
    "Origin": "Construct a {@link CxxLink} rule that builds a native linkable from top-level input objects and\na dependency tree of {@link NativeLinkable} dependencies.",
    "Reference": "Construct a {@link CxxLink} rule that builds a native linkable from top-level input objects and\na dependency tree of {@link NativeLinkableGroup} dependencies.",
    "HebCup": "Construct a {@link CxxLink} rule that builds a native linkable from top-level input objects and a dependency tree of {@link NativeLinkableGroup} dependencies."
}
{
    "Origin": "Return a {@link JettyRemoteRepositoryManager} for talking to the\n{@link NanoSparqlServer} instance associated with an {@link HAGlue}\ninterface.",
    "Reference": "Return a {@link RemoteRepositoryManager} for talking to the\n{@link NanoSparqlServer} instance associated with an {@link HAGlue}\ninterface.",
    "HebCup": "Return a {@link RemoteRepositoryManager} for talking to the {@link NanoSparqlServer} instance associated with an {@link HAGlue} interface."
}
{
    "Origin": "Gets the list of {@link DeletedSecret deletedSecrets} on this page.",
    "Reference": "Gets the iterable stream of {@link DeletedSecret deletedSecrets} on this page.",
    "HebCup": "Gets the IterableStream of {@link DeletedSecret deletedSecrets} on this page."
}
{
    "Origin": "Returns an immutable set containing zero elements.",
    "Reference": "Returns an unmodifiable set containing zero elements.",
    "HebCup": "Returns an Unmodifiable set containing zero elements."
}
{
    "Origin": "Clears global cache for the specified {@link IconData}.",
    "Reference": "Clears global cache for the specified {@link IconSource}.",
    "HebCup": "Clears global cache for the specified {@link IconSource}."
}
{
    "Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHTTPHeaders#BlobHttpHeaders}",
    "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders#BlobHttpHeaders}",
    "HebCup": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders#BlobHttpHeaders}"
}
{
    "Origin": "Set the {@link RecordMessageConverter} to use.",
    "Reference": "Set the {@link MessageConverter} to use.",
    "HebCup": "Set the {@link MessageConverter} to use."
}
{
    "Origin": "Returns true if field execTime is set (has been assigned a value) and false otherwise",
    "Reference": "Returns true if field startTime is set (has been assigned a value) and false otherwise",
    "HebCup": "Returns true if field StartTime is set (has been assigned a value) and false otherwise"
}
{
    "Origin": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Scheduler, with this\ntask's result as the argument to the supplied function.",
    "Reference": "Returns a new Task that, when this task completes\nnormally, is executed using the supplied Executor, with this\ntask's result as the argument to the supplied function.",
    "HebCup": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied function."
}
{
    "Origin": "Returns the width of the space character.",
    "Reference": "Returns the x-advance of the space character.",
    "HebCup": "Returns the Xadvance of the space character."
}
{
    "Origin": "This is why there is not a set method for the egBlockLevelElts property.",
    "Reference": "This is why there is not a set method for the content property.",
    "HebCup": "This is why there is not a set method for the content property."
}
{
    "Origin": "Counts entries in the queue with the specified status for each specified component uuid.",
    "Reference": "Counts entries in the queue with the specified status for each specified main component uuid.",
    "HebCup": "Counts entries in the queue with the specified status for each specified Main Component Uuid."
}
{
    "Origin": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates\n{@link TimedMetaData2}.",
    "Reference": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates\n{@link TimedMetaData}.",
    "HebCup": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData}."
}
{
    "Origin": "Gets the Chemical Oxidizer Recipe for the ItemStackInput in the parameters.",
    "Reference": "Gets the Chemical Oxidizer Recipe for the ItemStack in the parameters.",
    "HebCup": "Gets the Chemical Oxidizer Recipe for the ItemStack in the parameters."
}
{
    "Origin": "Standard getter for the leftwardLabel String for this RelationshipType",
    "Reference": "Standard getter for the leftwardType String for this RelationshipType",
    "HebCup": "Standard getter for the leftwardType String for this RelationshipType"
}
{
    "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}",
    "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}",
    "HebCup": "Create an instance of {@link JAXBElement} {@code <} {@link CTMoveToRangeEnd} {@code >}}"
}
{
    "Origin": "Sets the value of the pubBrowser property.",
    "Reference": "Sets the value of the target property.",
    "HebCup": "Sets the value of the target property."
}
{
    "Origin": "Is the counter valid for usage?",
    "Reference": "Is the counter active for usage?",
    "HebCup": "Is the counter Active for usage?"
}
{
    "Origin": "Returns a sampler, given a rate expressed as a percentage.",
    "Reference": "Returns a sampler, given a probability expressed as a percentage.",
    "HebCup": "Returns a sampler, given a probability expressed as a percentage."
}
{
    "Origin": "A new\n{@link EventContext} is used instead of the existing instance referenced by the existing {@link BaseEvent}.",
    "Reference": "A new\n{@link EventContext} is used instead of the existing instance referenced by the existing {@link CoreEvent}.",
    "HebCup": "A new {@link EventContext} is used instead of the existing instance referenced by the existing {@link CoreEvent}."
}